<?php
/**
 * InventoryApi
 * PHP version  5
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 星辰
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com_kingdee_service\data\api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use com_kingdee_service\ApiException;
use com_kingdee_service\Configuration;
use com_kingdee_service\HeaderSelector;
use com_kingdee_service\ObjectSerializer;

/**
 * InventoryApi Class Doc Comment
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InventoryApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation inventoryBatchKfperiodInvList
     *
     * 批次保质期及库存列表;批次保质期及库存列表;1.0.7
     *
     * @param  \com_kingdee_service\data\entity\InventoryBatchKfperiodInvListReq $body body (optional)
     *
     * @throws \com_kingdee_service\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com_kingdee_service\data\entity\BatchKfperiodInvListRes
     */
    public function inventoryBatchKfperiodInvList($body = null)
    {
        $response = $this->inventoryBatchKfperiodInvListWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation inventoryBatchKfperiodInvListWithHttpInfo
     *
     * 批次保质期及库存列表;批次保质期及库存列表;1.0.7
     *
     * @param  \com_kingdee_service\data\entity\InventoryBatchKfperiodInvListReq $body (optional)
     *
     * @throws \com_kingdee_service\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com_kingdee_service\data\entity\BatchKfperiodInvListRes, HTTP status code, HTTP response headers (array of strings)
     */
    public function inventoryBatchKfperiodInvListWithHttpInfo($body = null)
    {
        $returnType = '\com_kingdee_service\data\entity\BatchKfperiodInvListRes';
        $request = $this->inventoryBatchKfperiodInvListRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return $content;

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com_kingdee_service\data\entity\BatchKfperiodInvListRes',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com_kingdee_service\data\entity\Status',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation inventoryBatchKfperiodInvListAsync
     *
     * 批次保质期及库存列表;批次保质期及库存列表;1.0.7
     *
     * @param  \com_kingdee_service\data\entity\InventoryBatchKfperiodInvListReq $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inventoryBatchKfperiodInvListAsync($body = null)
    {
        return $this->inventoryBatchKfperiodInvListAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation inventoryBatchKfperiodInvListAsyncWithHttpInfo
     *
     * 批次保质期及库存列表;批次保质期及库存列表;1.0.7
     *
     * @param  \com_kingdee_service\data\entity\InventoryBatchKfperiodInvListReq $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inventoryBatchKfperiodInvListAsyncWithHttpInfo($body = null)
    {
        $returnType = '\com_kingdee_service\data\entity\BatchKfperiodInvListRes';
        $request = $this->inventoryBatchKfperiodInvListRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return $content;
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'inventoryBatchKfperiodInvList'
     *
     * @param  \com_kingdee_service\data\entity\InventoryBatchKfperiodInvListReq $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function inventoryBatchKfperiodInvListRequest($body = null)
    {

        $resourcePath = '/jdy/v2/scm/batch_kfperiod_inventory';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        // 增加头部签名
        $headers['Content-Type'] = 'application/json; charset=UTF-8';
        //固定字符串
        $headers['X-Api-SignHeaders'] = 'X-Api-TimeStamp,X-Api-Nonce';
        $headers['X-Api-Auth-Version'] = '2.0';
        $headers['X-Api-ClientID'] = $this->config->getAppID();
        //当前时间戳
        list($msec, $sec) = explode(' ', microtime());
        $timestamp = (float)sprintf('%.0f', (floatval($msec) + floatval($sec)) * 1000);
        //随机数
        $nonce = rand(1000000, 9999999);
        $headers['X-Api-TimeStamp'] = $timestamp;
        $headers['X-Api-Nonce'] = $nonce;

        //参数处理
        $urlencode_params = '';
        if (!empty($queryParams)) {
            $values = array();
            foreach ($queryParams as $key => $val) {
                $values[] = rawurlencode(rawurlencode($key)) . "=" . rawurlencode(rawurlencode($val));
            }
            $urlencode_params = implode("&", $values);
            unset($values);
        }
        $data = strtoupper('GET') . "\n" . urlencode($resourcePath) . "\n" . $urlencode_params . "\nx-api-nonce:" . $nonce . "\nx-api-timestamp:" . $timestamp . "\n";
        //密钥
        $seckey = $this->config->getAppSec();
        $headers['X-Api-Signature'] = base64_encode(hash_hmac('sha256', $data, $seckey, false));
        $headers['app-token'] = $this->config->getAppToken();

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation inventoryInvDetailList
     *
     * 商品收发明细表列表;商品收发明细表列表;1.0.7
     *
     * @param  int $page a&#x3D;第几页，默认1 ;c&#x3D;2. (optional)
     * @param  int $page_size a&#x3D;页大小，可选50/100,默认100;c&#x3D;50. (optional)
     * @param  string $start_date a&#x3D;开始时间；格式：yyyy-MM-dd;c&#x3D;2021-04-16. (optional)
     * @param  string $end_date a&#x3D;结束时间；格式：yyyy-MM-dd;c&#x3D;2021-04-17. (optional)
     * @param  string $search 模糊搜索，支持商品名称;c&#x3D;XXX. (optional)
     * @param  string[] $filter_stock_category a&#x3D;仓库分类id；格式：[,];c&#x3D;[11,22]. (optional)
     * @param  string[] $filter_sp_id a&#x3D;仓位id；格式：[,];c&#x3D;[11,22]. (optional)
     * @param  string[] $filter_stock_id a&#x3D;仓库id；格式：[,];c&#x3D;[11,22]. (optional)
     * @param  string[] $filter_material_category a&#x3D;商品类别id；格式：[,];c&#x3D;[11,22]. (optional)
     * @param  string[] $filter_material_id a&#x3D;商品id；格式：[,];c&#x3D;[1057992072985868292]. (optional)
     * @param  string[] $filter_batch_no a&#x3D;批次；格式：[,];c&#x3D;[11,22]. (optional)
     * @param  string[] $filter_dept_id a&#x3D;部门id；格式：[,];c&#x3D;[11,22]. (optional)
     * @param  string $filter_bill_type_id a&#x3D;单据类型, 详见单据类型表格；格式：[,];c&#x3D;[11,22]. (optional)
     * @param  string $filter_audit_status a&#x3D;调价单状态审核状态,C为审核，B为未审核，D为作废中;c&#x3D;C. (optional)
     *
     * @throws \com_kingdee_service\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com_kingdee_service\data\entity\InvDetailListRes
     */
    public function inventoryInvDetailList($page = null, $page_size = null, $start_date = null, $end_date = null, $search = null, $filter_stock_category = null, $filter_sp_id = null, $filter_stock_id = null, $filter_material_category = null, $filter_material_id = null, $filter_batch_no = null, $filter_dept_id = null, $filter_bill_type_id = null, $filter_audit_status = null)
    {
        $response = $this->inventoryInvDetailListWithHttpInfo($page, $page_size, $start_date, $end_date, $search, $filter_stock_category, $filter_sp_id, $filter_stock_id, $filter_material_category, $filter_material_id, $filter_batch_no, $filter_dept_id, $filter_bill_type_id, $filter_audit_status);
        return $response;
    }

    /**
     * Operation inventoryInvDetailListWithHttpInfo
     *
     * 商品收发明细表列表;商品收发明细表列表;1.0.7
     *
     * @param  int $page a&#x3D;第几页，默认1 ;c&#x3D;2. (optional)
     * @param  int $page_size a&#x3D;页大小，可选50/100,默认100;c&#x3D;50. (optional)
     * @param  string $start_date a&#x3D;开始时间；格式：yyyy-MM-dd;c&#x3D;2021-04-16. (optional)
     * @param  string $end_date a&#x3D;结束时间；格式：yyyy-MM-dd;c&#x3D;2021-04-17. (optional)
     * @param  string $search 模糊搜索，支持商品名称;c&#x3D;XXX. (optional)
     * @param  string[] $filter_stock_category a&#x3D;仓库分类id；格式：[,];c&#x3D;[11,22]. (optional)
     * @param  string[] $filter_sp_id a&#x3D;仓位id；格式：[,];c&#x3D;[11,22]. (optional)
     * @param  string[] $filter_stock_id a&#x3D;仓库id；格式：[,];c&#x3D;[11,22]. (optional)
     * @param  string[] $filter_material_category a&#x3D;商品类别id；格式：[,];c&#x3D;[11,22]. (optional)
     * @param  string[] $filter_material_id a&#x3D;商品id；格式：[,];c&#x3D;[1057992072985868292]. (optional)
     * @param  string[] $filter_batch_no a&#x3D;批次；格式：[,];c&#x3D;[11,22]. (optional)
     * @param  string[] $filter_dept_id a&#x3D;部门id；格式：[,];c&#x3D;[11,22]. (optional)
     * @param  string $filter_bill_type_id a&#x3D;单据类型, 详见单据类型表格；格式：[,];c&#x3D;[11,22]. (optional)
     * @param  string $filter_audit_status a&#x3D;调价单状态审核状态,C为审核，B为未审核，D为作废中;c&#x3D;C. (optional)
     *
     * @throws \com_kingdee_service\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com_kingdee_service\data\entity\InvDetailListRes, HTTP status code, HTTP response headers (array of strings)
     */
    public function inventoryInvDetailListWithHttpInfo($page = null, $page_size = null, $start_date = null, $end_date = null, $search = null, $filter_stock_category = null, $filter_sp_id = null, $filter_stock_id = null, $filter_material_category = null, $filter_material_id = null, $filter_batch_no = null, $filter_dept_id = null, $filter_bill_type_id = null, $filter_audit_status = null)
    {
        $returnType = '\com_kingdee_service\data\entity\InvDetailListRes';
        $request = $this->inventoryInvDetailListRequest($page, $page_size, $start_date, $end_date, $search, $filter_stock_category, $filter_sp_id, $filter_stock_id, $filter_material_category, $filter_material_id, $filter_batch_no, $filter_dept_id, $filter_bill_type_id, $filter_audit_status);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return $content;

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com_kingdee_service\data\entity\InvDetailListRes',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com_kingdee_service\data\entity\Status',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation inventoryInvDetailListAsync
     *
     * 商品收发明细表列表;商品收发明细表列表;1.0.7
     *
     * @param  int $page a&#x3D;第几页，默认1 ;c&#x3D;2. (optional)
     * @param  int $page_size a&#x3D;页大小，可选50/100,默认100;c&#x3D;50. (optional)
     * @param  string $start_date a&#x3D;开始时间；格式：yyyy-MM-dd;c&#x3D;2021-04-16. (optional)
     * @param  string $end_date a&#x3D;结束时间；格式：yyyy-MM-dd;c&#x3D;2021-04-17. (optional)
     * @param  string $search 模糊搜索，支持商品名称;c&#x3D;XXX. (optional)
     * @param  string[] $filter_stock_category a&#x3D;仓库分类id；格式：[,];c&#x3D;[11,22]. (optional)
     * @param  string[] $filter_sp_id a&#x3D;仓位id；格式：[,];c&#x3D;[11,22]. (optional)
     * @param  string[] $filter_stock_id a&#x3D;仓库id；格式：[,];c&#x3D;[11,22]. (optional)
     * @param  string[] $filter_material_category a&#x3D;商品类别id；格式：[,];c&#x3D;[11,22]. (optional)
     * @param  string[] $filter_material_id a&#x3D;商品id；格式：[,];c&#x3D;[1057992072985868292]. (optional)
     * @param  string[] $filter_batch_no a&#x3D;批次；格式：[,];c&#x3D;[11,22]. (optional)
     * @param  string[] $filter_dept_id a&#x3D;部门id；格式：[,];c&#x3D;[11,22]. (optional)
     * @param  string $filter_bill_type_id a&#x3D;单据类型, 详见单据类型表格；格式：[,];c&#x3D;[11,22]. (optional)
     * @param  string $filter_audit_status a&#x3D;调价单状态审核状态,C为审核，B为未审核，D为作废中;c&#x3D;C. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inventoryInvDetailListAsync($page = null, $page_size = null, $start_date = null, $end_date = null, $search = null, $filter_stock_category = null, $filter_sp_id = null, $filter_stock_id = null, $filter_material_category = null, $filter_material_id = null, $filter_batch_no = null, $filter_dept_id = null, $filter_bill_type_id = null, $filter_audit_status = null)
    {
        return $this->inventoryInvDetailListAsyncWithHttpInfo($page, $page_size, $start_date, $end_date, $search, $filter_stock_category, $filter_sp_id, $filter_stock_id, $filter_material_category, $filter_material_id, $filter_batch_no, $filter_dept_id, $filter_bill_type_id, $filter_audit_status)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation inventoryInvDetailListAsyncWithHttpInfo
     *
     * 商品收发明细表列表;商品收发明细表列表;1.0.7
     *
     * @param  int $page a&#x3D;第几页，默认1 ;c&#x3D;2. (optional)
     * @param  int $page_size a&#x3D;页大小，可选50/100,默认100;c&#x3D;50. (optional)
     * @param  string $start_date a&#x3D;开始时间；格式：yyyy-MM-dd;c&#x3D;2021-04-16. (optional)
     * @param  string $end_date a&#x3D;结束时间；格式：yyyy-MM-dd;c&#x3D;2021-04-17. (optional)
     * @param  string $search 模糊搜索，支持商品名称;c&#x3D;XXX. (optional)
     * @param  string[] $filter_stock_category a&#x3D;仓库分类id；格式：[,];c&#x3D;[11,22]. (optional)
     * @param  string[] $filter_sp_id a&#x3D;仓位id；格式：[,];c&#x3D;[11,22]. (optional)
     * @param  string[] $filter_stock_id a&#x3D;仓库id；格式：[,];c&#x3D;[11,22]. (optional)
     * @param  string[] $filter_material_category a&#x3D;商品类别id；格式：[,];c&#x3D;[11,22]. (optional)
     * @param  string[] $filter_material_id a&#x3D;商品id；格式：[,];c&#x3D;[1057992072985868292]. (optional)
     * @param  string[] $filter_batch_no a&#x3D;批次；格式：[,];c&#x3D;[11,22]. (optional)
     * @param  string[] $filter_dept_id a&#x3D;部门id；格式：[,];c&#x3D;[11,22]. (optional)
     * @param  string $filter_bill_type_id a&#x3D;单据类型, 详见单据类型表格；格式：[,];c&#x3D;[11,22]. (optional)
     * @param  string $filter_audit_status a&#x3D;调价单状态审核状态,C为审核，B为未审核，D为作废中;c&#x3D;C. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inventoryInvDetailListAsyncWithHttpInfo($page = null, $page_size = null, $start_date = null, $end_date = null, $search = null, $filter_stock_category = null, $filter_sp_id = null, $filter_stock_id = null, $filter_material_category = null, $filter_material_id = null, $filter_batch_no = null, $filter_dept_id = null, $filter_bill_type_id = null, $filter_audit_status = null)
    {
        $returnType = '\com_kingdee_service\data\entity\InvDetailListRes';
        $request = $this->inventoryInvDetailListRequest($page, $page_size, $start_date, $end_date, $search, $filter_stock_category, $filter_sp_id, $filter_stock_id, $filter_material_category, $filter_material_id, $filter_batch_no, $filter_dept_id, $filter_bill_type_id, $filter_audit_status);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return $content;
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'inventoryInvDetailList'
     *
     * @param  int $page a&#x3D;第几页，默认1 ;c&#x3D;2. (optional)
     * @param  int $page_size a&#x3D;页大小，可选50/100,默认100;c&#x3D;50. (optional)
     * @param  string $start_date a&#x3D;开始时间；格式：yyyy-MM-dd;c&#x3D;2021-04-16. (optional)
     * @param  string $end_date a&#x3D;结束时间；格式：yyyy-MM-dd;c&#x3D;2021-04-17. (optional)
     * @param  string $search 模糊搜索，支持商品名称;c&#x3D;XXX. (optional)
     * @param  string[] $filter_stock_category a&#x3D;仓库分类id；格式：[,];c&#x3D;[11,22]. (optional)
     * @param  string[] $filter_sp_id a&#x3D;仓位id；格式：[,];c&#x3D;[11,22]. (optional)
     * @param  string[] $filter_stock_id a&#x3D;仓库id；格式：[,];c&#x3D;[11,22]. (optional)
     * @param  string[] $filter_material_category a&#x3D;商品类别id；格式：[,];c&#x3D;[11,22]. (optional)
     * @param  string[] $filter_material_id a&#x3D;商品id；格式：[,];c&#x3D;[1057992072985868292]. (optional)
     * @param  string[] $filter_batch_no a&#x3D;批次；格式：[,];c&#x3D;[11,22]. (optional)
     * @param  string[] $filter_dept_id a&#x3D;部门id；格式：[,];c&#x3D;[11,22]. (optional)
     * @param  string $filter_bill_type_id a&#x3D;单据类型, 详见单据类型表格；格式：[,];c&#x3D;[11,22]. (optional)
     * @param  string $filter_audit_status a&#x3D;调价单状态审核状态,C为审核，B为未审核，D为作废中;c&#x3D;C. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function inventoryInvDetailListRequest($page = null, $page_size = null, $start_date = null, $end_date = null, $search = null, $filter_stock_category = null, $filter_sp_id = null, $filter_stock_id = null, $filter_material_category = null, $filter_material_id = null, $filter_batch_no = null, $filter_dept_id = null, $filter_bill_type_id = null, $filter_audit_status = null)
    {

        $resourcePath = '/jdy/v2/scm/inv_detail';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['page_size'] = ObjectSerializer::toQueryValue($page_size);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($start_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($end_date);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = ObjectSerializer::toQueryValue($search);
        }
        // query params
        if (is_array($filter_stock_category)) {
            $queryParams['filter_stock_category'] = $filter_stock_category;
        } else
        if ($filter_stock_category !== null) {
            $queryParams['filter_stock_category'] = ObjectSerializer::toQueryValue($filter_stock_category);
        }
        // query params
        if (is_array($filter_sp_id)) {
            $queryParams['filter_sp_id'] = $filter_sp_id;
        } else
        if ($filter_sp_id !== null) {
            $queryParams['filter_sp_id'] = ObjectSerializer::toQueryValue($filter_sp_id);
        }
        // query params
        if (is_array($filter_stock_id)) {
            $queryParams['filter_stock_id'] = $filter_stock_id;
        } else
        if ($filter_stock_id !== null) {
            $queryParams['filter_stock_id'] = ObjectSerializer::toQueryValue($filter_stock_id);
        }
        // query params
        if (is_array($filter_material_category)) {
            $queryParams['filter_material_category'] = $filter_material_category;
        } else
        if ($filter_material_category !== null) {
            $queryParams['filter_material_category'] = ObjectSerializer::toQueryValue($filter_material_category);
        }
        // query params
        if (is_array($filter_material_id)) {
            $queryParams['filter_material_id'] = $filter_material_id;
        } else
        if ($filter_material_id !== null) {
            $queryParams['filter_material_id'] = ObjectSerializer::toQueryValue($filter_material_id);
        }
        // query params
        if (is_array($filter_batch_no)) {
            $queryParams['filter_batch_no'] = $filter_batch_no;
        } else
        if ($filter_batch_no !== null) {
            $queryParams['filter_batch_no'] = ObjectSerializer::toQueryValue($filter_batch_no);
        }
        // query params
        if (is_array($filter_dept_id)) {
            $queryParams['filter_dept_id'] = $filter_dept_id;
        } else
        if ($filter_dept_id !== null) {
            $queryParams['filter_dept_id'] = ObjectSerializer::toQueryValue($filter_dept_id);
        }
        // query params
        if ($filter_bill_type_id !== null) {
            $queryParams['filter_bill_type_id'] = ObjectSerializer::toQueryValue($filter_bill_type_id);
        }
        // query params
        if ($filter_audit_status !== null) {
            $queryParams['filter_audit_status'] = ObjectSerializer::toQueryValue($filter_audit_status);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        // 增加头部签名
        $headers['Content-Type'] = 'application/json; charset=UTF-8';
        //固定字符串
        $headers['X-Api-SignHeaders'] = 'X-Api-TimeStamp,X-Api-Nonce';
        $headers['X-Api-Auth-Version'] = '2.0';
        $headers['X-Api-ClientID'] = $this->config->getAppID();
        //当前时间戳
        list($msec, $sec) = explode(' ', microtime());
        $timestamp = (float)sprintf('%.0f', (floatval($msec) + floatval($sec)) * 1000);
        //随机数
        $nonce = rand(1000000, 9999999);
        $headers['X-Api-TimeStamp'] = $timestamp;
        $headers['X-Api-Nonce'] = $nonce;

        //参数处理
        $urlencode_params = '';
        if (!empty($queryParams)) {
            $values = array();
            foreach ($queryParams as $key => $val) {
                $values[] = rawurlencode(rawurlencode($key)) . "=" . rawurlencode(rawurlencode($val));
            }
            $urlencode_params = implode("&", $values);
            unset($values);
        }
        $data = strtoupper('GET') . "\n" . urlencode($resourcePath) . "\n" . $urlencode_params . "\nx-api-nonce:" . $nonce . "\nx-api-timestamp:" . $timestamp . "\n";
        //密钥
        $seckey = $this->config->getAppSec();
        $headers['X-Api-Signature'] = base64_encode(hash_hmac('sha256', $data, $seckey, false));
        $headers['app-token'] = $this->config->getAppToken();

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation inventoryInvList
     *
     * 商品库存列表;商品库存列表;1.0.6
     *
     * @param  \com_kingdee_service\data\entity\InventoryInvListReq $body body (optional)
     *
     * @throws \com_kingdee_service\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com_kingdee_service\data\entity\InvListRes
     */
    public function inventoryInvList($body = null)
    {
        $response = $this->inventoryInvListWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation inventoryInvListWithHttpInfo
     *
     * 商品库存列表;商品库存列表;1.0.6
     *
     * @param  \com_kingdee_service\data\entity\InventoryInvListReq $body (optional)
     *
     * @throws \com_kingdee_service\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com_kingdee_service\data\entity\InvListRes, HTTP status code, HTTP response headers (array of strings)
     */
    public function inventoryInvListWithHttpInfo($body = null)
    {
        $returnType = '\com_kingdee_service\data\entity\InvListRes';
        $request = $this->inventoryInvListRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return $content;

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com_kingdee_service\data\entity\InvListRes',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com_kingdee_service\data\entity\Status',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation inventoryInvListAsync
     *
     * 商品库存列表;商品库存列表;1.0.6
     *
     * @param  \com_kingdee_service\data\entity\InventoryInvListReq $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inventoryInvListAsync($body = null)
    {
        return $this->inventoryInvListAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation inventoryInvListAsyncWithHttpInfo
     *
     * 商品库存列表;商品库存列表;1.0.6
     *
     * @param  \com_kingdee_service\data\entity\InventoryInvListReq $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inventoryInvListAsyncWithHttpInfo($body = null)
    {
        $returnType = '\com_kingdee_service\data\entity\InvListRes';
        $request = $this->inventoryInvListRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return $content;
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'inventoryInvList'
     *
     * @param  \com_kingdee_service\data\entity\InventoryInvListReq $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function inventoryInvListRequest($body = null)
    {

        $resourcePath = '/jdy/v2/scm/inventory';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        // 增加头部签名
        $headers['Content-Type'] = 'application/json; charset=UTF-8';
        //固定字符串
        $headers['X-Api-SignHeaders'] = 'X-Api-TimeStamp,X-Api-Nonce';
        $headers['X-Api-Auth-Version'] = '2.0';
        $headers['X-Api-ClientID'] = $this->config->getAppID();
        //当前时间戳
        list($msec, $sec) = explode(' ', microtime());
        $timestamp = (float)sprintf('%.0f', (floatval($msec) + floatval($sec)) * 1000);
        //随机数
        $nonce = rand(1000000, 9999999);
        $headers['X-Api-TimeStamp'] = $timestamp;
        $headers['X-Api-Nonce'] = $nonce;

        //参数处理
        $urlencode_params = '';
        if (!empty($queryParams)) {
            $values = array();
            foreach ($queryParams as $key => $val) {
                $values[] = rawurlencode(rawurlencode($key)) . "=" . rawurlencode(rawurlencode($val));
            }
            $urlencode_params = implode("&", $values);
            unset($values);
        }
        $data = strtoupper('GET') . "\n" . urlencode($resourcePath) . "\n" . $urlencode_params . "\nx-api-nonce:" . $nonce . "\nx-api-timestamp:" . $timestamp . "\n";
        //密钥
        $seckey = $this->config->getAppSec();
        $headers['X-Api-Signature'] = base64_encode(hash_hmac('sha256', $data, $seckey, false));
        $headers['app-token'] = $this->config->getAppToken();

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation inventoryInvOccupy
     *
     * 库存占用;库存占用;1.0.8
     *
     * @param  \com_kingdee_service\data\entity\InvOccupyReq $body body (required)
     *
     * @throws \com_kingdee_service\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com_kingdee_service\data\entity\SaveReply
     */
    public function inventoryInvOccupy($body)
    {
        $response = $this->inventoryInvOccupyWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation inventoryInvOccupyWithHttpInfo
     *
     * 库存占用;库存占用;1.0.8
     *
     * @param  \com_kingdee_service\data\entity\InvOccupyReq $body (required)
     *
     * @throws \com_kingdee_service\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com_kingdee_service\data\entity\SaveReply, HTTP status code, HTTP response headers (array of strings)
     */
    public function inventoryInvOccupyWithHttpInfo($body)
    {
        $returnType = '\com_kingdee_service\data\entity\SaveReply';
        $request = $this->inventoryInvOccupyRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return $content;

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com_kingdee_service\data\entity\SaveReply',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com_kingdee_service\data\entity\Status',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation inventoryInvOccupyAsync
     *
     * 库存占用;库存占用;1.0.8
     *
     * @param  \com_kingdee_service\data\entity\InvOccupyReq $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inventoryInvOccupyAsync($body)
    {
        return $this->inventoryInvOccupyAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation inventoryInvOccupyAsyncWithHttpInfo
     *
     * 库存占用;库存占用;1.0.8
     *
     * @param  \com_kingdee_service\data\entity\InvOccupyReq $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inventoryInvOccupyAsyncWithHttpInfo($body)
    {
        $returnType = '\com_kingdee_service\data\entity\SaveReply';
        $request = $this->inventoryInvOccupyRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return $content;
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'inventoryInvOccupy'
     *
     * @param  \com_kingdee_service\data\entity\InvOccupyReq $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function inventoryInvOccupyRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling inventoryInvOccupy'
            );
        }

        $resourcePath = '/jdy/v2/scm/inv_occupy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        // 增加头部签名
        $headers['Content-Type'] = 'application/json; charset=UTF-8';
        //固定字符串
        $headers['X-Api-SignHeaders'] = 'X-Api-TimeStamp,X-Api-Nonce';
        $headers['X-Api-Auth-Version'] = '2.0';
        $headers['X-Api-ClientID'] = $this->config->getAppID();
        //当前时间戳
        list($msec, $sec) = explode(' ', microtime());
        $timestamp = (float)sprintf('%.0f', (floatval($msec) + floatval($sec)) * 1000);
        //随机数
        $nonce = rand(1000000, 9999999);
        $headers['X-Api-TimeStamp'] = $timestamp;
        $headers['X-Api-Nonce'] = $nonce;

        //参数处理
        $urlencode_params = '';
        if (!empty($queryParams)) {
            $values = array();
            foreach ($queryParams as $key => $val) {
                $values[] = rawurlencode(rawurlencode($key)) . "=" . rawurlencode(rawurlencode($val));
            }
            $urlencode_params = implode("&", $values);
            unset($values);
        }
        $data = strtoupper('POST') . "\n" . urlencode($resourcePath) . "\n" . $urlencode_params . "\nx-api-nonce:" . $nonce . "\nx-api-timestamp:" . $timestamp . "\n";
        //密钥
        $seckey = $this->config->getAppSec();
        $headers['X-Api-Signature'] = base64_encode(hash_hmac('sha256', $data, $seckey, false));
        $headers['app-token'] = $this->config->getAppToken();

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation inventoryInvReleaseOccupy
     *
     * 库存占用释放;库存占用释放;1.0.7
     *
     * @param  \com_kingdee_service\data\entity\InvReleaseOccupyReq $body body (required)
     *
     * @throws \com_kingdee_service\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com_kingdee_service\data\entity\SaveReply
     */
    public function inventoryInvReleaseOccupy($body)
    {
        $response = $this->inventoryInvReleaseOccupyWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation inventoryInvReleaseOccupyWithHttpInfo
     *
     * 库存占用释放;库存占用释放;1.0.7
     *
     * @param  \com_kingdee_service\data\entity\InvReleaseOccupyReq $body (required)
     *
     * @throws \com_kingdee_service\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com_kingdee_service\data\entity\SaveReply, HTTP status code, HTTP response headers (array of strings)
     */
    public function inventoryInvReleaseOccupyWithHttpInfo($body)
    {
        $returnType = '\com_kingdee_service\data\entity\SaveReply';
        $request = $this->inventoryInvReleaseOccupyRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return $content;

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com_kingdee_service\data\entity\SaveReply',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com_kingdee_service\data\entity\Status',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation inventoryInvReleaseOccupyAsync
     *
     * 库存占用释放;库存占用释放;1.0.7
     *
     * @param  \com_kingdee_service\data\entity\InvReleaseOccupyReq $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inventoryInvReleaseOccupyAsync($body)
    {
        return $this->inventoryInvReleaseOccupyAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation inventoryInvReleaseOccupyAsyncWithHttpInfo
     *
     * 库存占用释放;库存占用释放;1.0.7
     *
     * @param  \com_kingdee_service\data\entity\InvReleaseOccupyReq $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inventoryInvReleaseOccupyAsyncWithHttpInfo($body)
    {
        $returnType = '\com_kingdee_service\data\entity\SaveReply';
        $request = $this->inventoryInvReleaseOccupyRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return $content;
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'inventoryInvReleaseOccupy'
     *
     * @param  \com_kingdee_service\data\entity\InvReleaseOccupyReq $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function inventoryInvReleaseOccupyRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling inventoryInvReleaseOccupy'
            );
        }

        $resourcePath = '/jdy/v2/scm/inv_release_occupy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        // 增加头部签名
        $headers['Content-Type'] = 'application/json; charset=UTF-8';
        //固定字符串
        $headers['X-Api-SignHeaders'] = 'X-Api-TimeStamp,X-Api-Nonce';
        $headers['X-Api-Auth-Version'] = '2.0';
        $headers['X-Api-ClientID'] = $this->config->getAppID();
        //当前时间戳
        list($msec, $sec) = explode(' ', microtime());
        $timestamp = (float)sprintf('%.0f', (floatval($msec) + floatval($sec)) * 1000);
        //随机数
        $nonce = rand(1000000, 9999999);
        $headers['X-Api-TimeStamp'] = $timestamp;
        $headers['X-Api-Nonce'] = $nonce;

        //参数处理
        $urlencode_params = '';
        if (!empty($queryParams)) {
            $values = array();
            foreach ($queryParams as $key => $val) {
                $values[] = rawurlencode(rawurlencode($key)) . "=" . rawurlencode(rawurlencode($val));
            }
            $urlencode_params = implode("&", $values);
            unset($values);
        }
        $data = strtoupper('POST') . "\n" . urlencode($resourcePath) . "\n" . $urlencode_params . "\nx-api-nonce:" . $nonce . "\nx-api-timestamp:" . $timestamp . "\n";
        //密钥
        $seckey = $this->config->getAppSec();
        $headers['X-Api-Signature'] = base64_encode(hash_hmac('sha256', $data, $seckey, false));
        $headers['app-token'] = $this->config->getAppToken();

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation inventoryInvSerialStatusList
     *
     * 序列号状态表列表;序列号状态表列表;1.0.7
     *
     * @param  \com_kingdee_service\data\entity\InventoryInvSerialStatusListReq $body body (optional)
     *
     * @throws \com_kingdee_service\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com_kingdee_service\data\entity\InvSerialStatusListRes
     */
    public function inventoryInvSerialStatusList($body = null)
    {
        $response = $this->inventoryInvSerialStatusListWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation inventoryInvSerialStatusListWithHttpInfo
     *
     * 序列号状态表列表;序列号状态表列表;1.0.7
     *
     * @param  \com_kingdee_service\data\entity\InventoryInvSerialStatusListReq $body (optional)
     *
     * @throws \com_kingdee_service\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com_kingdee_service\data\entity\InvSerialStatusListRes, HTTP status code, HTTP response headers (array of strings)
     */
    public function inventoryInvSerialStatusListWithHttpInfo($body = null)
    {
        $returnType = '\com_kingdee_service\data\entity\InvSerialStatusListRes';
        $request = $this->inventoryInvSerialStatusListRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return $content;

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com_kingdee_service\data\entity\InvSerialStatusListRes',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com_kingdee_service\data\entity\Status',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation inventoryInvSerialStatusListAsync
     *
     * 序列号状态表列表;序列号状态表列表;1.0.7
     *
     * @param  \com_kingdee_service\data\entity\InventoryInvSerialStatusListReq $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inventoryInvSerialStatusListAsync($body = null)
    {
        return $this->inventoryInvSerialStatusListAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation inventoryInvSerialStatusListAsyncWithHttpInfo
     *
     * 序列号状态表列表;序列号状态表列表;1.0.7
     *
     * @param  \com_kingdee_service\data\entity\InventoryInvSerialStatusListReq $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inventoryInvSerialStatusListAsyncWithHttpInfo($body = null)
    {
        $returnType = '\com_kingdee_service\data\entity\InvSerialStatusListRes';
        $request = $this->inventoryInvSerialStatusListRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return $content;
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'inventoryInvSerialStatusList'
     *
     * @param  \com_kingdee_service\data\entity\InventoryInvSerialStatusListReq $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function inventoryInvSerialStatusListRequest($body = null)
    {

        $resourcePath = '/jdy/v2/scm/inventory_serial_status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        // 增加头部签名
        $headers['Content-Type'] = 'application/json; charset=UTF-8';
        //固定字符串
        $headers['X-Api-SignHeaders'] = 'X-Api-TimeStamp,X-Api-Nonce';
        $headers['X-Api-Auth-Version'] = '2.0';
        $headers['X-Api-ClientID'] = $this->config->getAppID();
        //当前时间戳
        list($msec, $sec) = explode(' ', microtime());
        $timestamp = (float)sprintf('%.0f', (floatval($msec) + floatval($sec)) * 1000);
        //随机数
        $nonce = rand(1000000, 9999999);
        $headers['X-Api-TimeStamp'] = $timestamp;
        $headers['X-Api-Nonce'] = $nonce;

        //参数处理
        $urlencode_params = '';
        if (!empty($queryParams)) {
            $values = array();
            foreach ($queryParams as $key => $val) {
                $values[] = rawurlencode(rawurlencode($key)) . "=" . rawurlencode(rawurlencode($val));
            }
            $urlencode_params = implode("&", $values);
            unset($values);
        }
        $data = strtoupper('GET') . "\n" . urlencode($resourcePath) . "\n" . $urlencode_params . "\nx-api-nonce:" . $nonce . "\nx-api-timestamp:" . $timestamp . "\n";
        //密钥
        $seckey = $this->config->getAppSec();
        $headers['X-Api-Signature'] = base64_encode(hash_hmac('sha256', $data, $seckey, false));
        $headers['app-token'] = $this->config->getAppToken();

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation inventoryMaterialStock
     *
     * 商品仓库库存查询;商品仓库库存查询;1.0.7
     *
     * @param  \com_kingdee_service\data\entity\InventoryMaterialStockReq $body body (optional)
     *
     * @throws \com_kingdee_service\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com_kingdee_service\data\entity\MaterialStockRes
     */
    public function inventoryMaterialStock($body = null)
    {
        $response = $this->inventoryMaterialStockWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation inventoryMaterialStockWithHttpInfo
     *
     * 商品仓库库存查询;商品仓库库存查询;1.0.7
     *
     * @param  \com_kingdee_service\data\entity\InventoryMaterialStockReq $body (optional)
     *
     * @throws \com_kingdee_service\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com_kingdee_service\data\entity\MaterialStockRes, HTTP status code, HTTP response headers (array of strings)
     */
    public function inventoryMaterialStockWithHttpInfo($body = null)
    {
        $returnType = '\com_kingdee_service\data\entity\MaterialStockRes';
        $request = $this->inventoryMaterialStockRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return $content;

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com_kingdee_service\data\entity\MaterialStockRes',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com_kingdee_service\data\entity\Status',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation inventoryMaterialStockAsync
     *
     * 商品仓库库存查询;商品仓库库存查询;1.0.7
     *
     * @param  \com_kingdee_service\data\entity\InventoryMaterialStockReq $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inventoryMaterialStockAsync($body = null)
    {
        return $this->inventoryMaterialStockAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation inventoryMaterialStockAsyncWithHttpInfo
     *
     * 商品仓库库存查询;商品仓库库存查询;1.0.7
     *
     * @param  \com_kingdee_service\data\entity\InventoryMaterialStockReq $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inventoryMaterialStockAsyncWithHttpInfo($body = null)
    {
        $returnType = '\com_kingdee_service\data\entity\MaterialStockRes';
        $request = $this->inventoryMaterialStockRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return $content;
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'inventoryMaterialStock'
     *
     * @param  \com_kingdee_service\data\entity\InventoryMaterialStockReq $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function inventoryMaterialStockRequest($body = null)
    {

        $resourcePath = '/jdy/v2/scm/inventory_stock';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        // 增加头部签名
        $headers['Content-Type'] = 'application/json; charset=UTF-8';
        //固定字符串
        $headers['X-Api-SignHeaders'] = 'X-Api-TimeStamp,X-Api-Nonce';
        $headers['X-Api-Auth-Version'] = '2.0';
        $headers['X-Api-ClientID'] = $this->config->getAppID();
        //当前时间戳
        list($msec, $sec) = explode(' ', microtime());
        $timestamp = (float)sprintf('%.0f', (floatval($msec) + floatval($sec)) * 1000);
        //随机数
        $nonce = rand(1000000, 9999999);
        $headers['X-Api-TimeStamp'] = $timestamp;
        $headers['X-Api-Nonce'] = $nonce;

        //参数处理
        $urlencode_params = '';
        if (!empty($queryParams)) {
            $values = array();
            foreach ($queryParams as $key => $val) {
                $values[] = rawurlencode(rawurlencode($key)) . "=" . rawurlencode(rawurlencode($val));
            }
            $urlencode_params = implode("&", $values);
            unset($values);
        }
        $data = strtoupper('GET') . "\n" . urlencode($resourcePath) . "\n" . $urlencode_params . "\nx-api-nonce:" . $nonce . "\nx-api-timestamp:" . $timestamp . "\n";
        //密钥
        $seckey = $this->config->getAppSec();
        $headers['X-Api-Signature'] = base64_encode(hash_hmac('sha256', $data, $seckey, false));
        $headers['app-token'] = $this->config->getAppToken();

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
