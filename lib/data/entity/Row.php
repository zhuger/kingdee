<?php
/**
 * Row
 *
 * PHP version 5
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 星辰
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com_kingdee_service\data\entity;

use \ArrayAccess;
use \com_kingdee_service\ObjectSerializer;

/**
 * Row Class Doc Comment
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Row implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Row';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'rule_id' => 'string',
        'recharge_amount' => 'string',
        'donate_amount' => 'string',
        'to_member_point' => 'string',
        'to_coupon' => 'bool',
        'to_material' => 'bool',
        'to_amount' => 'bool',
        'to_point' => 'bool',
        'material_list' => '\com_kingdee_service\data\entity\Material[]',
        'coupon_list' => '\com_kingdee_service\data\entity\Coupon[]',
        'material_value' => 'string',
        'material_set' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'rule_id' => null,
        'recharge_amount' => null,
        'donate_amount' => null,
        'to_member_point' => null,
        'to_coupon' => null,
        'to_material' => null,
        'to_amount' => null,
        'to_point' => null,
        'material_list' => null,
        'coupon_list' => null,
        'material_value' => null,
        'material_set' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'rule_id' => 'rule_id',
        'recharge_amount' => 'recharge_amount',
        'donate_amount' => 'donate_amount',
        'to_member_point' => 'to_member_point',
        'to_coupon' => 'to_coupon',
        'to_material' => 'to_material',
        'to_amount' => 'to_amount',
        'to_point' => 'to_point',
        'material_list' => 'material_list',
        'coupon_list' => 'coupon_list',
        'material_value' => 'material_value',
        'material_set' => 'material_set'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'rule_id' => 'setRuleId',
        'recharge_amount' => 'setRechargeAmount',
        'donate_amount' => 'setDonateAmount',
        'to_member_point' => 'setToMemberPoint',
        'to_coupon' => 'setToCoupon',
        'to_material' => 'setToMaterial',
        'to_amount' => 'setToAmount',
        'to_point' => 'setToPoint',
        'material_list' => 'setMaterialList',
        'coupon_list' => 'setCouponList',
        'material_value' => 'setMaterialValue',
        'material_set' => 'setMaterialSet'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'rule_id' => 'getRuleId',
        'recharge_amount' => 'getRechargeAmount',
        'donate_amount' => 'getDonateAmount',
        'to_member_point' => 'getToMemberPoint',
        'to_coupon' => 'getToCoupon',
        'to_material' => 'getToMaterial',
        'to_amount' => 'getToAmount',
        'to_point' => 'getToPoint',
        'material_list' => 'getMaterialList',
        'coupon_list' => 'getCouponList',
        'material_value' => 'getMaterialValue',
        'material_set' => 'getMaterialSet'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['rule_id'] = isset($data['rule_id']) ? $data['rule_id'] : null;
        $this->container['recharge_amount'] = isset($data['recharge_amount']) ? $data['recharge_amount'] : null;
        $this->container['donate_amount'] = isset($data['donate_amount']) ? $data['donate_amount'] : null;
        $this->container['to_member_point'] = isset($data['to_member_point']) ? $data['to_member_point'] : null;
        $this->container['to_coupon'] = isset($data['to_coupon']) ? $data['to_coupon'] : null;
        $this->container['to_material'] = isset($data['to_material']) ? $data['to_material'] : null;
        $this->container['to_amount'] = isset($data['to_amount']) ? $data['to_amount'] : null;
        $this->container['to_point'] = isset($data['to_point']) ? $data['to_point'] : null;
        $this->container['material_list'] = isset($data['material_list']) ? $data['material_list'] : null;
        $this->container['coupon_list'] = isset($data['coupon_list']) ? $data['coupon_list'] : null;
        $this->container['material_value'] = isset($data['material_value']) ? $data['material_value'] : null;
        $this->container['material_set'] = isset($data['material_set']) ? $data['material_set'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets rule_id
     *
     * @return string
     */
    public function getRuleId()
    {
        return $this->container['rule_id'];
    }

    /**
     * Sets rule_id
     *
     * @param string $rule_id rule_id
     *
     * @return $this
     */
    public function setRuleId($rule_id)
    {
        $this->container['rule_id'] = $rule_id;

        return $this;
    }

    /**
     * Gets recharge_amount
     *
     * @return string
     */
    public function getRechargeAmount()
    {
        return $this->container['recharge_amount'];
    }

    /**
     * Sets recharge_amount
     *
     * @param string $recharge_amount recharge_amount
     *
     * @return $this
     */
    public function setRechargeAmount($recharge_amount)
    {
        $this->container['recharge_amount'] = $recharge_amount;

        return $this;
    }

    /**
     * Gets donate_amount
     *
     * @return string
     */
    public function getDonateAmount()
    {
        return $this->container['donate_amount'];
    }

    /**
     * Sets donate_amount
     *
     * @param string $donate_amount donate_amount
     *
     * @return $this
     */
    public function setDonateAmount($donate_amount)
    {
        $this->container['donate_amount'] = $donate_amount;

        return $this;
    }

    /**
     * Gets to_member_point
     *
     * @return string
     */
    public function getToMemberPoint()
    {
        return $this->container['to_member_point'];
    }

    /**
     * Sets to_member_point
     *
     * @param string $to_member_point to_member_point
     *
     * @return $this
     */
    public function setToMemberPoint($to_member_point)
    {
        $this->container['to_member_point'] = $to_member_point;

        return $this;
    }

    /**
     * Gets to_coupon
     *
     * @return bool
     */
    public function getToCoupon()
    {
        return $this->container['to_coupon'];
    }

    /**
     * Sets to_coupon
     *
     * @param bool $to_coupon to_coupon
     *
     * @return $this
     */
    public function setToCoupon($to_coupon)
    {
        $this->container['to_coupon'] = $to_coupon;

        return $this;
    }

    /**
     * Gets to_material
     *
     * @return bool
     */
    public function getToMaterial()
    {
        return $this->container['to_material'];
    }

    /**
     * Sets to_material
     *
     * @param bool $to_material to_material
     *
     * @return $this
     */
    public function setToMaterial($to_material)
    {
        $this->container['to_material'] = $to_material;

        return $this;
    }

    /**
     * Gets to_amount
     *
     * @return bool
     */
    public function getToAmount()
    {
        return $this->container['to_amount'];
    }

    /**
     * Sets to_amount
     *
     * @param bool $to_amount to_amount
     *
     * @return $this
     */
    public function setToAmount($to_amount)
    {
        $this->container['to_amount'] = $to_amount;

        return $this;
    }

    /**
     * Gets to_point
     *
     * @return bool
     */
    public function getToPoint()
    {
        return $this->container['to_point'];
    }

    /**
     * Sets to_point
     *
     * @param bool $to_point to_point
     *
     * @return $this
     */
    public function setToPoint($to_point)
    {
        $this->container['to_point'] = $to_point;

        return $this;
    }

    /**
     * Gets material_list
     *
     * @return \com_kingdee_service\data\entity\Material[]
     */
    public function getMaterialList()
    {
        return $this->container['material_list'];
    }

    /**
     * Sets material_list
     *
     * @param \com_kingdee_service\data\entity\Material[] $material_list material_list
     *
     * @return $this
     */
    public function setMaterialList($material_list)
    {
        $this->container['material_list'] = $material_list;

        return $this;
    }

    /**
     * Gets coupon_list
     *
     * @return \com_kingdee_service\data\entity\Coupon[]
     */
    public function getCouponList()
    {
        return $this->container['coupon_list'];
    }

    /**
     * Sets coupon_list
     *
     * @param \com_kingdee_service\data\entity\Coupon[] $coupon_list coupon_list
     *
     * @return $this
     */
    public function setCouponList($coupon_list)
    {
        $this->container['coupon_list'] = $coupon_list;

        return $this;
    }

    /**
     * Gets material_value
     *
     * @return string
     */
    public function getMaterialValue()
    {
        return $this->container['material_value'];
    }

    /**
     * Sets material_value
     *
     * @param string $material_value material_value
     *
     * @return $this
     */
    public function setMaterialValue($material_value)
    {
        $this->container['material_value'] = $material_value;

        return $this;
    }

    /**
     * Gets material_set
     *
     * @return bool
     */
    public function getMaterialSet()
    {
        return $this->container['material_set'];
    }

    /**
     * Sets material_set
     *
     * @param bool $material_set material_set
     *
     * @return $this
     */
    public function setMaterialSet($material_set)
    {
        $this->container['material_set'] = $material_set;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


