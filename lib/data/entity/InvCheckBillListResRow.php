<?php
/**
 * InvCheckBillListResRow
 *
 * PHP version 5
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * æ˜Ÿè¾°
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com_kingdee_service\data\entity;

use \ArrayAccess;
use \com_kingdee_service\ObjectSerializer;

/**
 * InvCheckBillListResRow Class Doc Comment
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InvCheckBillListResRow implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InvCheckBillListRes.Row';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'create_time' => 'string',
        'bill_date' => 'string',
        'id' => 'string',
        'bill_no' => 'string',
        'bill_status' => 'string',
        'check_status' => 'string',
        'remark' => 'string',
        'stock_id' => 'string',
        'stock_name' => 'string',
        'stock_number' => 'string',
        'check_date' => 'string',
        'check_model' => 'string',
        'check_scope' => 'string',
        'material_source' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'create_time' => null,
        'bill_date' => null,
        'id' => null,
        'bill_no' => null,
        'bill_status' => null,
        'check_status' => null,
        'remark' => null,
        'stock_id' => null,
        'stock_name' => null,
        'stock_number' => null,
        'check_date' => null,
        'check_model' => null,
        'check_scope' => null,
        'material_source' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'create_time' => 'create_time',
        'bill_date' => 'bill_date',
        'id' => 'id',
        'bill_no' => 'bill_no',
        'bill_status' => 'bill_status',
        'check_status' => 'check_status',
        'remark' => 'remark',
        'stock_id' => 'stock_id',
        'stock_name' => 'stock_name',
        'stock_number' => 'stock_number',
        'check_date' => 'check_date',
        'check_model' => 'check_model',
        'check_scope' => 'check_scope',
        'material_source' => 'material_source'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'create_time' => 'setCreateTime',
        'bill_date' => 'setBillDate',
        'id' => 'setId',
        'bill_no' => 'setBillNo',
        'bill_status' => 'setBillStatus',
        'check_status' => 'setCheckStatus',
        'remark' => 'setRemark',
        'stock_id' => 'setStockId',
        'stock_name' => 'setStockName',
        'stock_number' => 'setStockNumber',
        'check_date' => 'setCheckDate',
        'check_model' => 'setCheckModel',
        'check_scope' => 'setCheckScope',
        'material_source' => 'setMaterialSource'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'create_time' => 'getCreateTime',
        'bill_date' => 'getBillDate',
        'id' => 'getId',
        'bill_no' => 'getBillNo',
        'bill_status' => 'getBillStatus',
        'check_status' => 'getCheckStatus',
        'remark' => 'getRemark',
        'stock_id' => 'getStockId',
        'stock_name' => 'getStockName',
        'stock_number' => 'getStockNumber',
        'check_date' => 'getCheckDate',
        'check_model' => 'getCheckModel',
        'check_scope' => 'getCheckScope',
        'material_source' => 'getMaterialSource'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['create_time'] = isset($data['create_time']) ? $data['create_time'] : null;
        $this->container['bill_date'] = isset($data['bill_date']) ? $data['bill_date'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['bill_no'] = isset($data['bill_no']) ? $data['bill_no'] : null;
        $this->container['bill_status'] = isset($data['bill_status']) ? $data['bill_status'] : null;
        $this->container['check_status'] = isset($data['check_status']) ? $data['check_status'] : null;
        $this->container['remark'] = isset($data['remark']) ? $data['remark'] : null;
        $this->container['stock_id'] = isset($data['stock_id']) ? $data['stock_id'] : null;
        $this->container['stock_name'] = isset($data['stock_name']) ? $data['stock_name'] : null;
        $this->container['stock_number'] = isset($data['stock_number']) ? $data['stock_number'] : null;
        $this->container['check_date'] = isset($data['check_date']) ? $data['check_date'] : null;
        $this->container['check_model'] = isset($data['check_model']) ? $data['check_model'] : null;
        $this->container['check_scope'] = isset($data['check_scope']) ? $data['check_scope'] : null;
        $this->container['material_source'] = isset($data['material_source']) ? $data['material_source'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets create_time
     *
     * @return string
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param string $create_time create_time
     *
     * @return $this
     */
    public function setCreateTime($create_time)
    {
        $this->container['create_time'] = $create_time;

        return $this;
    }

    /**
     * Gets bill_date
     *
     * @return string
     */
    public function getBillDate()
    {
        return $this->container['bill_date'];
    }

    /**
     * Sets bill_date
     *
     * @param string $bill_date bill_date
     *
     * @return $this
     */
    public function setBillDate($bill_date)
    {
        $this->container['bill_date'] = $bill_date;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets bill_no
     *
     * @return string
     */
    public function getBillNo()
    {
        return $this->container['bill_no'];
    }

    /**
     * Sets bill_no
     *
     * @param string $bill_no bill_no
     *
     * @return $this
     */
    public function setBillNo($bill_no)
    {
        $this->container['bill_no'] = $bill_no;

        return $this;
    }

    /**
     * Gets bill_status
     *
     * @return string
     */
    public function getBillStatus()
    {
        return $this->container['bill_status'];
    }

    /**
     * Sets bill_status
     *
     * @param string $bill_status bill_status
     *
     * @return $this
     */
    public function setBillStatus($bill_status)
    {
        $this->container['bill_status'] = $bill_status;

        return $this;
    }

    /**
     * Gets check_status
     *
     * @return string
     */
    public function getCheckStatus()
    {
        return $this->container['check_status'];
    }

    /**
     * Sets check_status
     *
     * @param string $check_status check_status
     *
     * @return $this
     */
    public function setCheckStatus($check_status)
    {
        $this->container['check_status'] = $check_status;

        return $this;
    }

    /**
     * Gets remark
     *
     * @return string
     */
    public function getRemark()
    {
        return $this->container['remark'];
    }

    /**
     * Sets remark
     *
     * @param string $remark remark
     *
     * @return $this
     */
    public function setRemark($remark)
    {
        $this->container['remark'] = $remark;

        return $this;
    }

    /**
     * Gets stock_id
     *
     * @return string
     */
    public function getStockId()
    {
        return $this->container['stock_id'];
    }

    /**
     * Sets stock_id
     *
     * @param string $stock_id stock_id
     *
     * @return $this
     */
    public function setStockId($stock_id)
    {
        $this->container['stock_id'] = $stock_id;

        return $this;
    }

    /**
     * Gets stock_name
     *
     * @return string
     */
    public function getStockName()
    {
        return $this->container['stock_name'];
    }

    /**
     * Sets stock_name
     *
     * @param string $stock_name stock_name
     *
     * @return $this
     */
    public function setStockName($stock_name)
    {
        $this->container['stock_name'] = $stock_name;

        return $this;
    }

    /**
     * Gets stock_number
     *
     * @return string
     */
    public function getStockNumber()
    {
        return $this->container['stock_number'];
    }

    /**
     * Sets stock_number
     *
     * @param string $stock_number stock_number
     *
     * @return $this
     */
    public function setStockNumber($stock_number)
    {
        $this->container['stock_number'] = $stock_number;

        return $this;
    }

    /**
     * Gets check_date
     *
     * @return string
     */
    public function getCheckDate()
    {
        return $this->container['check_date'];
    }

    /**
     * Sets check_date
     *
     * @param string $check_date check_date
     *
     * @return $this
     */
    public function setCheckDate($check_date)
    {
        $this->container['check_date'] = $check_date;

        return $this;
    }

    /**
     * Gets check_model
     *
     * @return string
     */
    public function getCheckModel()
    {
        return $this->container['check_model'];
    }

    /**
     * Sets check_model
     *
     * @param string $check_model check_model
     *
     * @return $this
     */
    public function setCheckModel($check_model)
    {
        $this->container['check_model'] = $check_model;

        return $this;
    }

    /**
     * Gets check_scope
     *
     * @return string
     */
    public function getCheckScope()
    {
        return $this->container['check_scope'];
    }

    /**
     * Sets check_scope
     *
     * @param string $check_scope check_scope
     *
     * @return $this
     */
    public function setCheckScope($check_scope)
    {
        $this->container['check_scope'] = $check_scope;

        return $this;
    }

    /**
     * Gets material_source
     *
     * @return string
     */
    public function getMaterialSource()
    {
        return $this->container['material_source'];
    }

    /**
     * Sets material_source
     *
     * @param string $material_source material_source
     *
     * @return $this
     */
    public function setMaterialSource($material_source)
    {
        $this->container['material_source'] = $material_source;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


