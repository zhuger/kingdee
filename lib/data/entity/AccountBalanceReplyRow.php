<?php
/**
 * AccountBalanceReplyRow
 *
 * PHP version 5
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 星辰
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com_kingdee_service\data\entity;

use \ArrayAccess;
use \com_kingdee_service\ObjectSerializer;

/**
 * AccountBalanceReplyRow Class Doc Comment
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AccountBalanceReplyRow implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AccountBalanceReply.Row';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_id' => 'string',
        'account_no' => 'string',
        'account_name' => 'string',
        'currency_name' => 'string',
        'detail_id' => 'string',
        'begin_bal' => 'string',
        'begin_bal_for' => 'string',
        'begin_dc' => 'string',
        'debit' => 'string',
        'debit_for' => 'string',
        'credit' => 'string',
        'credit_for' => 'string',
        'ytd_debit' => 'string',
        'ytd_debit_for' => 'string',
        'ytd_credit' => 'string',
        'ytd_credit_for' => 'string',
        'end_bal' => 'string',
        'end_bal_for' => 'string',
        'end_dc' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_id' => null,
        'account_no' => null,
        'account_name' => null,
        'currency_name' => null,
        'detail_id' => null,
        'begin_bal' => null,
        'begin_bal_for' => null,
        'begin_dc' => null,
        'debit' => null,
        'debit_for' => null,
        'credit' => null,
        'credit_for' => null,
        'ytd_debit' => null,
        'ytd_debit_for' => null,
        'ytd_credit' => null,
        'ytd_credit_for' => null,
        'end_bal' => null,
        'end_bal_for' => null,
        'end_dc' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'account_id',
        'account_no' => 'account_no',
        'account_name' => 'account_name',
        'currency_name' => 'currency_name',
        'detail_id' => 'detail_id',
        'begin_bal' => 'begin_bal',
        'begin_bal_for' => 'begin_bal_for',
        'begin_dc' => 'begin_dc',
        'debit' => 'debit',
        'debit_for' => 'debit_for',
        'credit' => 'credit',
        'credit_for' => 'credit_for',
        'ytd_debit' => 'ytd_debit',
        'ytd_debit_for' => 'ytd_debit_for',
        'ytd_credit' => 'ytd_credit',
        'ytd_credit_for' => 'ytd_credit_for',
        'end_bal' => 'endBal',
        'end_bal_for' => 'end_bal_for',
        'end_dc' => 'end_dc'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'account_no' => 'setAccountNo',
        'account_name' => 'setAccountName',
        'currency_name' => 'setCurrencyName',
        'detail_id' => 'setDetailId',
        'begin_bal' => 'setBeginBal',
        'begin_bal_for' => 'setBeginBalFor',
        'begin_dc' => 'setBeginDc',
        'debit' => 'setDebit',
        'debit_for' => 'setDebitFor',
        'credit' => 'setCredit',
        'credit_for' => 'setCreditFor',
        'ytd_debit' => 'setYtdDebit',
        'ytd_debit_for' => 'setYtdDebitFor',
        'ytd_credit' => 'setYtdCredit',
        'ytd_credit_for' => 'setYtdCreditFor',
        'end_bal' => 'setEndBal',
        'end_bal_for' => 'setEndBalFor',
        'end_dc' => 'setEndDc'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'account_no' => 'getAccountNo',
        'account_name' => 'getAccountName',
        'currency_name' => 'getCurrencyName',
        'detail_id' => 'getDetailId',
        'begin_bal' => 'getBeginBal',
        'begin_bal_for' => 'getBeginBalFor',
        'begin_dc' => 'getBeginDc',
        'debit' => 'getDebit',
        'debit_for' => 'getDebitFor',
        'credit' => 'getCredit',
        'credit_for' => 'getCreditFor',
        'ytd_debit' => 'getYtdDebit',
        'ytd_debit_for' => 'getYtdDebitFor',
        'ytd_credit' => 'getYtdCredit',
        'ytd_credit_for' => 'getYtdCreditFor',
        'end_bal' => 'getEndBal',
        'end_bal_for' => 'getEndBalFor',
        'end_dc' => 'getEndDc'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['account_no'] = isset($data['account_no']) ? $data['account_no'] : null;
        $this->container['account_name'] = isset($data['account_name']) ? $data['account_name'] : null;
        $this->container['currency_name'] = isset($data['currency_name']) ? $data['currency_name'] : null;
        $this->container['detail_id'] = isset($data['detail_id']) ? $data['detail_id'] : null;
        $this->container['begin_bal'] = isset($data['begin_bal']) ? $data['begin_bal'] : null;
        $this->container['begin_bal_for'] = isset($data['begin_bal_for']) ? $data['begin_bal_for'] : null;
        $this->container['begin_dc'] = isset($data['begin_dc']) ? $data['begin_dc'] : null;
        $this->container['debit'] = isset($data['debit']) ? $data['debit'] : null;
        $this->container['debit_for'] = isset($data['debit_for']) ? $data['debit_for'] : null;
        $this->container['credit'] = isset($data['credit']) ? $data['credit'] : null;
        $this->container['credit_for'] = isset($data['credit_for']) ? $data['credit_for'] : null;
        $this->container['ytd_debit'] = isset($data['ytd_debit']) ? $data['ytd_debit'] : null;
        $this->container['ytd_debit_for'] = isset($data['ytd_debit_for']) ? $data['ytd_debit_for'] : null;
        $this->container['ytd_credit'] = isset($data['ytd_credit']) ? $data['ytd_credit'] : null;
        $this->container['ytd_credit_for'] = isset($data['ytd_credit_for']) ? $data['ytd_credit_for'] : null;
        $this->container['end_bal'] = isset($data['end_bal']) ? $data['end_bal'] : null;
        $this->container['end_bal_for'] = isset($data['end_bal_for']) ? $data['end_bal_for'] : null;
        $this->container['end_dc'] = isset($data['end_dc']) ? $data['end_dc'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets account_no
     *
     * @return string
     */
    public function getAccountNo()
    {
        return $this->container['account_no'];
    }

    /**
     * Sets account_no
     *
     * @param string $account_no account_no
     *
     * @return $this
     */
    public function setAccountNo($account_no)
    {
        $this->container['account_no'] = $account_no;

        return $this;
    }

    /**
     * Gets account_name
     *
     * @return string
     */
    public function getAccountName()
    {
        return $this->container['account_name'];
    }

    /**
     * Sets account_name
     *
     * @param string $account_name account_name
     *
     * @return $this
     */
    public function setAccountName($account_name)
    {
        $this->container['account_name'] = $account_name;

        return $this;
    }

    /**
     * Gets currency_name
     *
     * @return string
     */
    public function getCurrencyName()
    {
        return $this->container['currency_name'];
    }

    /**
     * Sets currency_name
     *
     * @param string $currency_name currency_name
     *
     * @return $this
     */
    public function setCurrencyName($currency_name)
    {
        $this->container['currency_name'] = $currency_name;

        return $this;
    }

    /**
     * Gets detail_id
     *
     * @return string
     */
    public function getDetailId()
    {
        return $this->container['detail_id'];
    }

    /**
     * Sets detail_id
     *
     * @param string $detail_id detail_id
     *
     * @return $this
     */
    public function setDetailId($detail_id)
    {
        $this->container['detail_id'] = $detail_id;

        return $this;
    }

    /**
     * Gets begin_bal
     *
     * @return string
     */
    public function getBeginBal()
    {
        return $this->container['begin_bal'];
    }

    /**
     * Sets begin_bal
     *
     * @param string $begin_bal begin_bal
     *
     * @return $this
     */
    public function setBeginBal($begin_bal)
    {
        $this->container['begin_bal'] = $begin_bal;

        return $this;
    }

    /**
     * Gets begin_bal_for
     *
     * @return string
     */
    public function getBeginBalFor()
    {
        return $this->container['begin_bal_for'];
    }

    /**
     * Sets begin_bal_for
     *
     * @param string $begin_bal_for begin_bal_for
     *
     * @return $this
     */
    public function setBeginBalFor($begin_bal_for)
    {
        $this->container['begin_bal_for'] = $begin_bal_for;

        return $this;
    }

    /**
     * Gets begin_dc
     *
     * @return string
     */
    public function getBeginDc()
    {
        return $this->container['begin_dc'];
    }

    /**
     * Sets begin_dc
     *
     * @param string $begin_dc begin_dc
     *
     * @return $this
     */
    public function setBeginDc($begin_dc)
    {
        $this->container['begin_dc'] = $begin_dc;

        return $this;
    }

    /**
     * Gets debit
     *
     * @return string
     */
    public function getDebit()
    {
        return $this->container['debit'];
    }

    /**
     * Sets debit
     *
     * @param string $debit debit
     *
     * @return $this
     */
    public function setDebit($debit)
    {
        $this->container['debit'] = $debit;

        return $this;
    }

    /**
     * Gets debit_for
     *
     * @return string
     */
    public function getDebitFor()
    {
        return $this->container['debit_for'];
    }

    /**
     * Sets debit_for
     *
     * @param string $debit_for debit_for
     *
     * @return $this
     */
    public function setDebitFor($debit_for)
    {
        $this->container['debit_for'] = $debit_for;

        return $this;
    }

    /**
     * Gets credit
     *
     * @return string
     */
    public function getCredit()
    {
        return $this->container['credit'];
    }

    /**
     * Sets credit
     *
     * @param string $credit credit
     *
     * @return $this
     */
    public function setCredit($credit)
    {
        $this->container['credit'] = $credit;

        return $this;
    }

    /**
     * Gets credit_for
     *
     * @return string
     */
    public function getCreditFor()
    {
        return $this->container['credit_for'];
    }

    /**
     * Sets credit_for
     *
     * @param string $credit_for credit_for
     *
     * @return $this
     */
    public function setCreditFor($credit_for)
    {
        $this->container['credit_for'] = $credit_for;

        return $this;
    }

    /**
     * Gets ytd_debit
     *
     * @return string
     */
    public function getYtdDebit()
    {
        return $this->container['ytd_debit'];
    }

    /**
     * Sets ytd_debit
     *
     * @param string $ytd_debit ytd_debit
     *
     * @return $this
     */
    public function setYtdDebit($ytd_debit)
    {
        $this->container['ytd_debit'] = $ytd_debit;

        return $this;
    }

    /**
     * Gets ytd_debit_for
     *
     * @return string
     */
    public function getYtdDebitFor()
    {
        return $this->container['ytd_debit_for'];
    }

    /**
     * Sets ytd_debit_for
     *
     * @param string $ytd_debit_for ytd_debit_for
     *
     * @return $this
     */
    public function setYtdDebitFor($ytd_debit_for)
    {
        $this->container['ytd_debit_for'] = $ytd_debit_for;

        return $this;
    }

    /**
     * Gets ytd_credit
     *
     * @return string
     */
    public function getYtdCredit()
    {
        return $this->container['ytd_credit'];
    }

    /**
     * Sets ytd_credit
     *
     * @param string $ytd_credit ytd_credit
     *
     * @return $this
     */
    public function setYtdCredit($ytd_credit)
    {
        $this->container['ytd_credit'] = $ytd_credit;

        return $this;
    }

    /**
     * Gets ytd_credit_for
     *
     * @return string
     */
    public function getYtdCreditFor()
    {
        return $this->container['ytd_credit_for'];
    }

    /**
     * Sets ytd_credit_for
     *
     * @param string $ytd_credit_for ytd_credit_for
     *
     * @return $this
     */
    public function setYtdCreditFor($ytd_credit_for)
    {
        $this->container['ytd_credit_for'] = $ytd_credit_for;

        return $this;
    }

    /**
     * Gets end_bal
     *
     * @return string
     */
    public function getEndBal()
    {
        return $this->container['end_bal'];
    }

    /**
     * Sets end_bal
     *
     * @param string $end_bal end_bal
     *
     * @return $this
     */
    public function setEndBal($end_bal)
    {
        $this->container['end_bal'] = $end_bal;

        return $this;
    }

    /**
     * Gets end_bal_for
     *
     * @return string
     */
    public function getEndBalFor()
    {
        return $this->container['end_bal_for'];
    }

    /**
     * Sets end_bal_for
     *
     * @param string $end_bal_for end_bal_for
     *
     * @return $this
     */
    public function setEndBalFor($end_bal_for)
    {
        $this->container['end_bal_for'] = $end_bal_for;

        return $this;
    }

    /**
     * Gets end_dc
     *
     * @return string
     */
    public function getEndDc()
    {
        return $this->container['end_dc'];
    }

    /**
     * Sets end_dc
     *
     * @param string $end_dc end_dc
     *
     * @return $this
     */
    public function setEndDc($end_dc)
    {
        $this->container['end_dc'] = $end_dc;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


