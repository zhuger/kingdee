<?php
/**
 * MaterialUnitDetailRes
 *
 * PHP version 5
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 星辰
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com_kingdee_service\data\entity;

use \ArrayAccess;
use \com_kingdee_service\ObjectSerializer;

/**
 * MaterialUnitDetailRes Class Doc Comment
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MaterialUnitDetailRes implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MaterialUnitDetailRes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'material_id' => 'string',
        'index' => 'int',
        'is_default' => 'bool',
        'is_float' => 'bool',
        'coefficient' => 'double',
        'unit_id' => 'string',
        'unit_name' => 'string',
        'conversion_unit_id' => 'string',
        'conversion_unit_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'material_id' => null,
        'index' => 'int32',
        'is_default' => null,
        'is_float' => null,
        'coefficient' => 'double',
        'unit_id' => null,
        'unit_name' => null,
        'conversion_unit_id' => null,
        'conversion_unit_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'material_id' => 'material_id',
        'index' => 'index',
        'is_default' => 'is_default',
        'is_float' => 'is_float',
        'coefficient' => 'coefficient',
        'unit_id' => 'unit_id',
        'unit_name' => 'unit_name',
        'conversion_unit_id' => 'conversion_unit_id',
        'conversion_unit_name' => 'conversion_unit_name'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'material_id' => 'setMaterialId',
        'index' => 'setIndex',
        'is_default' => 'setIsDefault',
        'is_float' => 'setIsFloat',
        'coefficient' => 'setCoefficient',
        'unit_id' => 'setUnitId',
        'unit_name' => 'setUnitName',
        'conversion_unit_id' => 'setConversionUnitId',
        'conversion_unit_name' => 'setConversionUnitName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'material_id' => 'getMaterialId',
        'index' => 'getIndex',
        'is_default' => 'getIsDefault',
        'is_float' => 'getIsFloat',
        'coefficient' => 'getCoefficient',
        'unit_id' => 'getUnitId',
        'unit_name' => 'getUnitName',
        'conversion_unit_id' => 'getConversionUnitId',
        'conversion_unit_name' => 'getConversionUnitName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['material_id'] = isset($data['material_id']) ? $data['material_id'] : null;
        $this->container['index'] = isset($data['index']) ? $data['index'] : null;
        $this->container['is_default'] = isset($data['is_default']) ? $data['is_default'] : null;
        $this->container['is_float'] = isset($data['is_float']) ? $data['is_float'] : null;
        $this->container['coefficient'] = isset($data['coefficient']) ? $data['coefficient'] : null;
        $this->container['unit_id'] = isset($data['unit_id']) ? $data['unit_id'] : null;
        $this->container['unit_name'] = isset($data['unit_name']) ? $data['unit_name'] : null;
        $this->container['conversion_unit_id'] = isset($data['conversion_unit_id']) ? $data['conversion_unit_id'] : null;
        $this->container['conversion_unit_name'] = isset($data['conversion_unit_name']) ? $data['conversion_unit_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets material_id
     *
     * @return string
     */
    public function getMaterialId()
    {
        return $this->container['material_id'];
    }

    /**
     * Sets material_id
     *
     * @param string $material_id material_id
     *
     * @return $this
     */
    public function setMaterialId($material_id)
    {
        $this->container['material_id'] = $material_id;

        return $this;
    }

    /**
     * Gets index
     *
     * @return int
     */
    public function getIndex()
    {
        return $this->container['index'];
    }

    /**
     * Sets index
     *
     * @param int $index index
     *
     * @return $this
     */
    public function setIndex($index)
    {
        $this->container['index'] = $index;

        return $this;
    }

    /**
     * Gets is_default
     *
     * @return bool
     */
    public function getIsDefault()
    {
        return $this->container['is_default'];
    }

    /**
     * Sets is_default
     *
     * @param bool $is_default is_default
     *
     * @return $this
     */
    public function setIsDefault($is_default)
    {
        $this->container['is_default'] = $is_default;

        return $this;
    }

    /**
     * Gets is_float
     *
     * @return bool
     */
    public function getIsFloat()
    {
        return $this->container['is_float'];
    }

    /**
     * Sets is_float
     *
     * @param bool $is_float is_float
     *
     * @return $this
     */
    public function setIsFloat($is_float)
    {
        $this->container['is_float'] = $is_float;

        return $this;
    }

    /**
     * Gets coefficient
     *
     * @return double
     */
    public function getCoefficient()
    {
        return $this->container['coefficient'];
    }

    /**
     * Sets coefficient
     *
     * @param double $coefficient coefficient
     *
     * @return $this
     */
    public function setCoefficient($coefficient)
    {
        $this->container['coefficient'] = $coefficient;

        return $this;
    }

    /**
     * Gets unit_id
     *
     * @return string
     */
    public function getUnitId()
    {
        return $this->container['unit_id'];
    }

    /**
     * Sets unit_id
     *
     * @param string $unit_id unit_id
     *
     * @return $this
     */
    public function setUnitId($unit_id)
    {
        $this->container['unit_id'] = $unit_id;

        return $this;
    }

    /**
     * Gets unit_name
     *
     * @return string
     */
    public function getUnitName()
    {
        return $this->container['unit_name'];
    }

    /**
     * Sets unit_name
     *
     * @param string $unit_name unit_name
     *
     * @return $this
     */
    public function setUnitName($unit_name)
    {
        $this->container['unit_name'] = $unit_name;

        return $this;
    }

    /**
     * Gets conversion_unit_id
     *
     * @return string
     */
    public function getConversionUnitId()
    {
        return $this->container['conversion_unit_id'];
    }

    /**
     * Sets conversion_unit_id
     *
     * @param string $conversion_unit_id conversion_unit_id
     *
     * @return $this
     */
    public function setConversionUnitId($conversion_unit_id)
    {
        $this->container['conversion_unit_id'] = $conversion_unit_id;

        return $this;
    }

    /**
     * Gets conversion_unit_name
     *
     * @return string
     */
    public function getConversionUnitName()
    {
        return $this->container['conversion_unit_name'];
    }

    /**
     * Sets conversion_unit_name
     *
     * @param string $conversion_unit_name conversion_unit_name
     *
     * @return $this
     */
    public function setConversionUnitName($conversion_unit_name)
    {
        $this->container['conversion_unit_name'] = $conversion_unit_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


