<?php
/**
 * DeliveryListReq
 *
 * PHP version 5
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * æ˜Ÿè¾°
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com_kingdee_service\data\entity;

use \ArrayAccess;
use \com_kingdee_service\ObjectSerializer;

/**
 * DeliveryListReq Class Doc Comment
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DeliveryListReq implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Delivery_listReq';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'request_material_flag' => 'string',
        'request_source_number' => 'string',
        'request_store_id' => 'string',
        'page_data_page' => 'string',
        'request_bill_no' => 'string',
        'request_id' => 'string',
        'page_data_page_size' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'request_material_flag' => null,
        'request_source_number' => null,
        'request_store_id' => null,
        'page_data_page' => null,
        'request_bill_no' => null,
        'request_id' => null,
        'page_data_page_size' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'request_material_flag' => 'request.material_flag',
        'request_source_number' => 'request.source_number',
        'request_store_id' => 'request.store_id',
        'page_data_page' => 'page_data.page',
        'request_bill_no' => 'request.bill_no',
        'request_id' => 'request.id',
        'page_data_page_size' => 'page_data.page_size'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'request_material_flag' => 'setRequestMaterialFlag',
        'request_source_number' => 'setRequestSourceNumber',
        'request_store_id' => 'setRequestStoreId',
        'page_data_page' => 'setPageDataPage',
        'request_bill_no' => 'setRequestBillNo',
        'request_id' => 'setRequestId',
        'page_data_page_size' => 'setPageDataPageSize'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'request_material_flag' => 'getRequestMaterialFlag',
        'request_source_number' => 'getRequestSourceNumber',
        'request_store_id' => 'getRequestStoreId',
        'page_data_page' => 'getPageDataPage',
        'request_bill_no' => 'getRequestBillNo',
        'request_id' => 'getRequestId',
        'page_data_page_size' => 'getPageDataPageSize'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['request_material_flag'] = isset($data['request_material_flag']) ? $data['request_material_flag'] : null;
        $this->container['request_source_number'] = isset($data['request_source_number']) ? $data['request_source_number'] : null;
        $this->container['request_store_id'] = isset($data['request_store_id']) ? $data['request_store_id'] : null;
        $this->container['page_data_page'] = isset($data['page_data_page']) ? $data['page_data_page'] : null;
        $this->container['request_bill_no'] = isset($data['request_bill_no']) ? $data['request_bill_no'] : null;
        $this->container['request_id'] = isset($data['request_id']) ? $data['request_id'] : null;
        $this->container['page_data_page_size'] = isset($data['page_data_page_size']) ? $data['page_data_page_size'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets request_material_flag
     *
     * @return string
     */
    public function getRequestMaterialFlag()
    {
        return $this->container['request_material_flag'];
    }

    /**
     * Sets request_material_flag
     *
     * @param string $request_material_flag request_material_flag
     *
     * @return $this
     */
    public function setRequestMaterialFlag($request_material_flag)
    {
        $this->container['request_material_flag'] = $request_material_flag;

        return $this;
    }

    /**
     * Gets request_source_number
     *
     * @return string
     */
    public function getRequestSourceNumber()
    {
        return $this->container['request_source_number'];
    }

    /**
     * Sets request_source_number
     *
     * @param string $request_source_number request_source_number
     *
     * @return $this
     */
    public function setRequestSourceNumber($request_source_number)
    {
        $this->container['request_source_number'] = $request_source_number;

        return $this;
    }

    /**
     * Gets request_store_id
     *
     * @return string
     */
    public function getRequestStoreId()
    {
        return $this->container['request_store_id'];
    }

    /**
     * Sets request_store_id
     *
     * @param string $request_store_id request_store_id
     *
     * @return $this
     */
    public function setRequestStoreId($request_store_id)
    {
        $this->container['request_store_id'] = $request_store_id;

        return $this;
    }

    /**
     * Gets page_data_page
     *
     * @return string
     */
    public function getPageDataPage()
    {
        return $this->container['page_data_page'];
    }

    /**
     * Sets page_data_page
     *
     * @param string $page_data_page page_data_page
     *
     * @return $this
     */
    public function setPageDataPage($page_data_page)
    {
        $this->container['page_data_page'] = $page_data_page;

        return $this;
    }

    /**
     * Gets request_bill_no
     *
     * @return string
     */
    public function getRequestBillNo()
    {
        return $this->container['request_bill_no'];
    }

    /**
     * Sets request_bill_no
     *
     * @param string $request_bill_no request_bill_no
     *
     * @return $this
     */
    public function setRequestBillNo($request_bill_no)
    {
        $this->container['request_bill_no'] = $request_bill_no;

        return $this;
    }

    /**
     * Gets request_id
     *
     * @return string
     */
    public function getRequestId()
    {
        return $this->container['request_id'];
    }

    /**
     * Sets request_id
     *
     * @param string $request_id request_id
     *
     * @return $this
     */
    public function setRequestId($request_id)
    {
        $this->container['request_id'] = $request_id;

        return $this;
    }

    /**
     * Gets page_data_page_size
     *
     * @return string
     */
    public function getPageDataPageSize()
    {
        return $this->container['page_data_page_size'];
    }

    /**
     * Sets page_data_page_size
     *
     * @param string $page_data_page_size page_data_page_size
     *
     * @return $this
     */
    public function setPageDataPageSize($page_data_page_size)
    {
        $this->container['page_data_page_size'] = $page_data_page_size;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


