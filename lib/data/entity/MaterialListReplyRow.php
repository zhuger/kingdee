<?php
/**
 * MaterialListReplyRow
 *
 * PHP version 5
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 星辰
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com_kingdee_service\data\entity;

use \ArrayAccess;
use \com_kingdee_service\ObjectSerializer;

/**
 * MaterialListReplyRow Class Doc Comment
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MaterialListReplyRow implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MaterialListReply.Row';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'parent_name' => 'string',
        'number' => 'string',
        'parent_number' => 'string',
        'parent_id' => 'string',
        'name' => 'string',
        'id' => 'string',
        'is_multi_unit' => 'bool',
        'is_serial' => 'bool',
        'is_asst_attr' => 'bool',
        'is_weight' => 'bool',
        'is_kf_period' => 'bool',
        'is_batch' => 'bool',
        'url' => 'string',
        'model' => 'string',
        'barcode' => 'string',
        'is_show_aux_barcode' => 'bool',
        'mul_label' => '\com_kingdee_service\data\entity\Mullabel[]',
        'check_type' => 'string',
        'brand_id' => 'string',
        'brand_name' => 'string',
        'brand_number' => 'string',
        'producing_pace' => 'string',
        'help_code' => 'string',
        'base_unit_id' => 'string',
        'base_unit_number' => 'string',
        'base_unit_name' => 'string',
        'remark' => 'string',
        'units' => '\com_kingdee_service\data\entity\Unit[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'parent_name' => null,
        'number' => null,
        'parent_number' => null,
        'parent_id' => null,
        'name' => null,
        'id' => null,
        'is_multi_unit' => null,
        'is_serial' => null,
        'is_asst_attr' => null,
        'is_weight' => null,
        'is_kf_period' => null,
        'is_batch' => null,
        'url' => null,
        'model' => null,
        'barcode' => null,
        'is_show_aux_barcode' => null,
        'mul_label' => null,
        'check_type' => null,
        'brand_id' => null,
        'brand_name' => null,
        'brand_number' => null,
        'producing_pace' => null,
        'help_code' => null,
        'base_unit_id' => null,
        'base_unit_number' => null,
        'base_unit_name' => null,
        'remark' => null,
        'units' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'parent_name' => 'parent_name',
        'number' => 'number',
        'parent_number' => 'parent_number',
        'parent_id' => 'parent_id',
        'name' => 'name',
        'id' => 'id',
        'is_multi_unit' => 'is_multi_unit',
        'is_serial' => 'is_serial',
        'is_asst_attr' => 'is_asst_attr',
        'is_weight' => 'is_weight',
        'is_kf_period' => 'is_kf_period',
        'is_batch' => 'is_batch',
        'url' => 'url',
        'model' => 'model',
        'barcode' => 'barcode',
        'is_show_aux_barcode' => 'is_show_aux_barcode',
        'mul_label' => 'mul_label',
        'check_type' => 'check_type',
        'brand_id' => 'brand_id',
        'brand_name' => 'brand_name',
        'brand_number' => 'brand_number',
        'producing_pace' => 'producing_pace',
        'help_code' => 'help_code',
        'base_unit_id' => 'base_unit_id',
        'base_unit_number' => 'base_unit_number',
        'base_unit_name' => 'base_unit_name',
        'remark' => 'remark',
        'units' => 'units'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'parent_name' => 'setParentName',
        'number' => 'setNumber',
        'parent_number' => 'setParentNumber',
        'parent_id' => 'setParentId',
        'name' => 'setName',
        'id' => 'setId',
        'is_multi_unit' => 'setIsMultiUnit',
        'is_serial' => 'setIsSerial',
        'is_asst_attr' => 'setIsAsstAttr',
        'is_weight' => 'setIsWeight',
        'is_kf_period' => 'setIsKfPeriod',
        'is_batch' => 'setIsBatch',
        'url' => 'setUrl',
        'model' => 'setModel',
        'barcode' => 'setBarcode',
        'is_show_aux_barcode' => 'setIsShowAuxBarcode',
        'mul_label' => 'setMulLabel',
        'check_type' => 'setCheckType',
        'brand_id' => 'setBrandId',
        'brand_name' => 'setBrandName',
        'brand_number' => 'setBrandNumber',
        'producing_pace' => 'setProducingPace',
        'help_code' => 'setHelpCode',
        'base_unit_id' => 'setBaseUnitId',
        'base_unit_number' => 'setBaseUnitNumber',
        'base_unit_name' => 'setBaseUnitName',
        'remark' => 'setRemark',
        'units' => 'setUnits'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'parent_name' => 'getParentName',
        'number' => 'getNumber',
        'parent_number' => 'getParentNumber',
        'parent_id' => 'getParentId',
        'name' => 'getName',
        'id' => 'getId',
        'is_multi_unit' => 'getIsMultiUnit',
        'is_serial' => 'getIsSerial',
        'is_asst_attr' => 'getIsAsstAttr',
        'is_weight' => 'getIsWeight',
        'is_kf_period' => 'getIsKfPeriod',
        'is_batch' => 'getIsBatch',
        'url' => 'getUrl',
        'model' => 'getModel',
        'barcode' => 'getBarcode',
        'is_show_aux_barcode' => 'getIsShowAuxBarcode',
        'mul_label' => 'getMulLabel',
        'check_type' => 'getCheckType',
        'brand_id' => 'getBrandId',
        'brand_name' => 'getBrandName',
        'brand_number' => 'getBrandNumber',
        'producing_pace' => 'getProducingPace',
        'help_code' => 'getHelpCode',
        'base_unit_id' => 'getBaseUnitId',
        'base_unit_number' => 'getBaseUnitNumber',
        'base_unit_name' => 'getBaseUnitName',
        'remark' => 'getRemark',
        'units' => 'getUnits'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['parent_name'] = isset($data['parent_name']) ? $data['parent_name'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['parent_number'] = isset($data['parent_number']) ? $data['parent_number'] : null;
        $this->container['parent_id'] = isset($data['parent_id']) ? $data['parent_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['is_multi_unit'] = isset($data['is_multi_unit']) ? $data['is_multi_unit'] : null;
        $this->container['is_serial'] = isset($data['is_serial']) ? $data['is_serial'] : null;
        $this->container['is_asst_attr'] = isset($data['is_asst_attr']) ? $data['is_asst_attr'] : null;
        $this->container['is_weight'] = isset($data['is_weight']) ? $data['is_weight'] : null;
        $this->container['is_kf_period'] = isset($data['is_kf_period']) ? $data['is_kf_period'] : null;
        $this->container['is_batch'] = isset($data['is_batch']) ? $data['is_batch'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['model'] = isset($data['model']) ? $data['model'] : null;
        $this->container['barcode'] = isset($data['barcode']) ? $data['barcode'] : null;
        $this->container['is_show_aux_barcode'] = isset($data['is_show_aux_barcode']) ? $data['is_show_aux_barcode'] : null;
        $this->container['mul_label'] = isset($data['mul_label']) ? $data['mul_label'] : null;
        $this->container['check_type'] = isset($data['check_type']) ? $data['check_type'] : null;
        $this->container['brand_id'] = isset($data['brand_id']) ? $data['brand_id'] : null;
        $this->container['brand_name'] = isset($data['brand_name']) ? $data['brand_name'] : null;
        $this->container['brand_number'] = isset($data['brand_number']) ? $data['brand_number'] : null;
        $this->container['producing_pace'] = isset($data['producing_pace']) ? $data['producing_pace'] : null;
        $this->container['help_code'] = isset($data['help_code']) ? $data['help_code'] : null;
        $this->container['base_unit_id'] = isset($data['base_unit_id']) ? $data['base_unit_id'] : null;
        $this->container['base_unit_number'] = isset($data['base_unit_number']) ? $data['base_unit_number'] : null;
        $this->container['base_unit_name'] = isset($data['base_unit_name']) ? $data['base_unit_name'] : null;
        $this->container['remark'] = isset($data['remark']) ? $data['remark'] : null;
        $this->container['units'] = isset($data['units']) ? $data['units'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets parent_name
     *
     * @return string
     */
    public function getParentName()
    {
        return $this->container['parent_name'];
    }

    /**
     * Sets parent_name
     *
     * @param string $parent_name parent_name
     *
     * @return $this
     */
    public function setParentName($parent_name)
    {
        $this->container['parent_name'] = $parent_name;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number number
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets parent_number
     *
     * @return string
     */
    public function getParentNumber()
    {
        return $this->container['parent_number'];
    }

    /**
     * Sets parent_number
     *
     * @param string $parent_number parent_number
     *
     * @return $this
     */
    public function setParentNumber($parent_number)
    {
        $this->container['parent_number'] = $parent_number;

        return $this;
    }

    /**
     * Gets parent_id
     *
     * @return string
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     *
     * @param string $parent_id parent_id
     *
     * @return $this
     */
    public function setParentId($parent_id)
    {
        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_multi_unit
     *
     * @return bool
     */
    public function getIsMultiUnit()
    {
        return $this->container['is_multi_unit'];
    }

    /**
     * Sets is_multi_unit
     *
     * @param bool $is_multi_unit is_multi_unit
     *
     * @return $this
     */
    public function setIsMultiUnit($is_multi_unit)
    {
        $this->container['is_multi_unit'] = $is_multi_unit;

        return $this;
    }

    /**
     * Gets is_serial
     *
     * @return bool
     */
    public function getIsSerial()
    {
        return $this->container['is_serial'];
    }

    /**
     * Sets is_serial
     *
     * @param bool $is_serial is_serial
     *
     * @return $this
     */
    public function setIsSerial($is_serial)
    {
        $this->container['is_serial'] = $is_serial;

        return $this;
    }

    /**
     * Gets is_asst_attr
     *
     * @return bool
     */
    public function getIsAsstAttr()
    {
        return $this->container['is_asst_attr'];
    }

    /**
     * Sets is_asst_attr
     *
     * @param bool $is_asst_attr is_asst_attr
     *
     * @return $this
     */
    public function setIsAsstAttr($is_asst_attr)
    {
        $this->container['is_asst_attr'] = $is_asst_attr;

        return $this;
    }

    /**
     * Gets is_weight
     *
     * @return bool
     */
    public function getIsWeight()
    {
        return $this->container['is_weight'];
    }

    /**
     * Sets is_weight
     *
     * @param bool $is_weight is_weight
     *
     * @return $this
     */
    public function setIsWeight($is_weight)
    {
        $this->container['is_weight'] = $is_weight;

        return $this;
    }

    /**
     * Gets is_kf_period
     *
     * @return bool
     */
    public function getIsKfPeriod()
    {
        return $this->container['is_kf_period'];
    }

    /**
     * Sets is_kf_period
     *
     * @param bool $is_kf_period is_kf_period
     *
     * @return $this
     */
    public function setIsKfPeriod($is_kf_period)
    {
        $this->container['is_kf_period'] = $is_kf_period;

        return $this;
    }

    /**
     * Gets is_batch
     *
     * @return bool
     */
    public function getIsBatch()
    {
        return $this->container['is_batch'];
    }

    /**
     * Sets is_batch
     *
     * @param bool $is_batch is_batch
     *
     * @return $this
     */
    public function setIsBatch($is_batch)
    {
        $this->container['is_batch'] = $is_batch;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets model
     *
     * @return string
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param string $model model
     *
     * @return $this
     */
    public function setModel($model)
    {
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets barcode
     *
     * @return string
     */
    public function getBarcode()
    {
        return $this->container['barcode'];
    }

    /**
     * Sets barcode
     *
     * @param string $barcode barcode
     *
     * @return $this
     */
    public function setBarcode($barcode)
    {
        $this->container['barcode'] = $barcode;

        return $this;
    }

    /**
     * Gets is_show_aux_barcode
     *
     * @return bool
     */
    public function getIsShowAuxBarcode()
    {
        return $this->container['is_show_aux_barcode'];
    }

    /**
     * Sets is_show_aux_barcode
     *
     * @param bool $is_show_aux_barcode is_show_aux_barcode
     *
     * @return $this
     */
    public function setIsShowAuxBarcode($is_show_aux_barcode)
    {
        $this->container['is_show_aux_barcode'] = $is_show_aux_barcode;

        return $this;
    }

    /**
     * Gets mul_label
     *
     * @return \com_kingdee_service\data\entity\Mullabel[]
     */
    public function getMulLabel()
    {
        return $this->container['mul_label'];
    }

    /**
     * Sets mul_label
     *
     * @param \com_kingdee_service\data\entity\Mullabel[] $mul_label mul_label
     *
     * @return $this
     */
    public function setMulLabel($mul_label)
    {
        $this->container['mul_label'] = $mul_label;

        return $this;
    }

    /**
     * Gets check_type
     *
     * @return string
     */
    public function getCheckType()
    {
        return $this->container['check_type'];
    }

    /**
     * Sets check_type
     *
     * @param string $check_type check_type
     *
     * @return $this
     */
    public function setCheckType($check_type)
    {
        $this->container['check_type'] = $check_type;

        return $this;
    }

    /**
     * Gets brand_id
     *
     * @return string
     */
    public function getBrandId()
    {
        return $this->container['brand_id'];
    }

    /**
     * Sets brand_id
     *
     * @param string $brand_id brand_id
     *
     * @return $this
     */
    public function setBrandId($brand_id)
    {
        $this->container['brand_id'] = $brand_id;

        return $this;
    }

    /**
     * Gets brand_name
     *
     * @return string
     */
    public function getBrandName()
    {
        return $this->container['brand_name'];
    }

    /**
     * Sets brand_name
     *
     * @param string $brand_name brand_name
     *
     * @return $this
     */
    public function setBrandName($brand_name)
    {
        $this->container['brand_name'] = $brand_name;

        return $this;
    }

    /**
     * Gets brand_number
     *
     * @return string
     */
    public function getBrandNumber()
    {
        return $this->container['brand_number'];
    }

    /**
     * Sets brand_number
     *
     * @param string $brand_number brand_number
     *
     * @return $this
     */
    public function setBrandNumber($brand_number)
    {
        $this->container['brand_number'] = $brand_number;

        return $this;
    }

    /**
     * Gets producing_pace
     *
     * @return string
     */
    public function getProducingPace()
    {
        return $this->container['producing_pace'];
    }

    /**
     * Sets producing_pace
     *
     * @param string $producing_pace producing_pace
     *
     * @return $this
     */
    public function setProducingPace($producing_pace)
    {
        $this->container['producing_pace'] = $producing_pace;

        return $this;
    }

    /**
     * Gets help_code
     *
     * @return string
     */
    public function getHelpCode()
    {
        return $this->container['help_code'];
    }

    /**
     * Sets help_code
     *
     * @param string $help_code help_code
     *
     * @return $this
     */
    public function setHelpCode($help_code)
    {
        $this->container['help_code'] = $help_code;

        return $this;
    }

    /**
     * Gets base_unit_id
     *
     * @return string
     */
    public function getBaseUnitId()
    {
        return $this->container['base_unit_id'];
    }

    /**
     * Sets base_unit_id
     *
     * @param string $base_unit_id base_unit_id
     *
     * @return $this
     */
    public function setBaseUnitId($base_unit_id)
    {
        $this->container['base_unit_id'] = $base_unit_id;

        return $this;
    }

    /**
     * Gets base_unit_number
     *
     * @return string
     */
    public function getBaseUnitNumber()
    {
        return $this->container['base_unit_number'];
    }

    /**
     * Sets base_unit_number
     *
     * @param string $base_unit_number base_unit_number
     *
     * @return $this
     */
    public function setBaseUnitNumber($base_unit_number)
    {
        $this->container['base_unit_number'] = $base_unit_number;

        return $this;
    }

    /**
     * Gets base_unit_name
     *
     * @return string
     */
    public function getBaseUnitName()
    {
        return $this->container['base_unit_name'];
    }

    /**
     * Sets base_unit_name
     *
     * @param string $base_unit_name base_unit_name
     *
     * @return $this
     */
    public function setBaseUnitName($base_unit_name)
    {
        $this->container['base_unit_name'] = $base_unit_name;

        return $this;
    }

    /**
     * Gets remark
     *
     * @return string
     */
    public function getRemark()
    {
        return $this->container['remark'];
    }

    /**
     * Sets remark
     *
     * @param string $remark remark
     *
     * @return $this
     */
    public function setRemark($remark)
    {
        $this->container['remark'] = $remark;

        return $this;
    }

    /**
     * Gets units
     *
     * @return \com_kingdee_service\data\entity\Unit[]
     */
    public function getUnits()
    {
        return $this->container['units'];
    }

    /**
     * Sets units
     *
     * @param \com_kingdee_service\data\entity\Unit[] $units units
     *
     * @return $this
     */
    public function setUnits($units)
    {
        $this->container['units'] = $units;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


