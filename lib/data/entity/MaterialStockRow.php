<?php
/**
 * MaterialStockRow
 *
 * PHP version 5
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 星辰
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com_kingdee_service\data\entity;

use \ArrayAccess;
use \com_kingdee_service\ObjectSerializer;

/**
 * MaterialStockRow Class Doc Comment
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MaterialStockRow implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MaterialStockRow';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'inv_stock_id' => 'string',
        'inv_stock' => 'string',
        'inv_im_qty' => 'string',
        'inv_qty' => 'string',
        'inv_base_unit' => 'string',
        'inv_stock_position' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'inv_stock_id' => null,
        'inv_stock' => null,
        'inv_im_qty' => null,
        'inv_qty' => null,
        'inv_base_unit' => null,
        'inv_stock_position' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'inv_stock_id' => 'inv_stock_id',
        'inv_stock' => 'inv_stock',
        'inv_im_qty' => 'inv_im_qty',
        'inv_qty' => 'inv_qty',
        'inv_base_unit' => 'inv_base_unit',
        'inv_stock_position' => 'inv_stock_position'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'inv_stock_id' => 'setInvStockId',
        'inv_stock' => 'setInvStock',
        'inv_im_qty' => 'setInvImQty',
        'inv_qty' => 'setInvQty',
        'inv_base_unit' => 'setInvBaseUnit',
        'inv_stock_position' => 'setInvStockPosition'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'inv_stock_id' => 'getInvStockId',
        'inv_stock' => 'getInvStock',
        'inv_im_qty' => 'getInvImQty',
        'inv_qty' => 'getInvQty',
        'inv_base_unit' => 'getInvBaseUnit',
        'inv_stock_position' => 'getInvStockPosition'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['inv_stock_id'] = isset($data['inv_stock_id']) ? $data['inv_stock_id'] : null;
        $this->container['inv_stock'] = isset($data['inv_stock']) ? $data['inv_stock'] : null;
        $this->container['inv_im_qty'] = isset($data['inv_im_qty']) ? $data['inv_im_qty'] : null;
        $this->container['inv_qty'] = isset($data['inv_qty']) ? $data['inv_qty'] : null;
        $this->container['inv_base_unit'] = isset($data['inv_base_unit']) ? $data['inv_base_unit'] : null;
        $this->container['inv_stock_position'] = isset($data['inv_stock_position']) ? $data['inv_stock_position'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets inv_stock_id
     *
     * @return string
     */
    public function getInvStockId()
    {
        return $this->container['inv_stock_id'];
    }

    /**
     * Sets inv_stock_id
     *
     * @param string $inv_stock_id inv_stock_id
     *
     * @return $this
     */
    public function setInvStockId($inv_stock_id)
    {
        $this->container['inv_stock_id'] = $inv_stock_id;

        return $this;
    }

    /**
     * Gets inv_stock
     *
     * @return string
     */
    public function getInvStock()
    {
        return $this->container['inv_stock'];
    }

    /**
     * Sets inv_stock
     *
     * @param string $inv_stock inv_stock
     *
     * @return $this
     */
    public function setInvStock($inv_stock)
    {
        $this->container['inv_stock'] = $inv_stock;

        return $this;
    }

    /**
     * Gets inv_im_qty
     *
     * @return string
     */
    public function getInvImQty()
    {
        return $this->container['inv_im_qty'];
    }

    /**
     * Sets inv_im_qty
     *
     * @param string $inv_im_qty inv_im_qty
     *
     * @return $this
     */
    public function setInvImQty($inv_im_qty)
    {
        $this->container['inv_im_qty'] = $inv_im_qty;

        return $this;
    }

    /**
     * Gets inv_qty
     *
     * @return string
     */
    public function getInvQty()
    {
        return $this->container['inv_qty'];
    }

    /**
     * Sets inv_qty
     *
     * @param string $inv_qty inv_qty
     *
     * @return $this
     */
    public function setInvQty($inv_qty)
    {
        $this->container['inv_qty'] = $inv_qty;

        return $this;
    }

    /**
     * Gets inv_base_unit
     *
     * @return string
     */
    public function getInvBaseUnit()
    {
        return $this->container['inv_base_unit'];
    }

    /**
     * Sets inv_base_unit
     *
     * @param string $inv_base_unit inv_base_unit
     *
     * @return $this
     */
    public function setInvBaseUnit($inv_base_unit)
    {
        $this->container['inv_base_unit'] = $inv_base_unit;

        return $this;
    }

    /**
     * Gets inv_stock_position
     *
     * @return string
     */
    public function getInvStockPosition()
    {
        return $this->container['inv_stock_position'];
    }

    /**
     * Sets inv_stock_position
     *
     * @param string $inv_stock_position inv_stock_position
     *
     * @return $this
     */
    public function setInvStockPosition($inv_stock_position)
    {
        $this->container['inv_stock_position'] = $inv_stock_position;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


