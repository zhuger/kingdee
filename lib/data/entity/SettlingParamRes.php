<?php
/**
 * SettlingParamRes
 *
 * PHP version 5
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 星辰
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com_kingdee_service\data\entity;

use \ArrayAccess;
use \com_kingdee_service\ObjectSerializer;

/**
 * SettlingParamRes Class Doc Comment
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SettlingParamRes implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SettlingParamRes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'public' => '\com_kingdee_service\data\entity\ModelPublic',
        'arap' => '\com_kingdee_service\data\entity\Arap',
        'basedata' => '\com_kingdee_service\data\entity\Basedata',
        'pur' => '\com_kingdee_service\data\entity\Pur',
        'gl' => '\com_kingdee_service\data\entity\Gl',
        'chhs' => '\com_kingdee_service\data\entity\Chhs',
        'fa' => '\com_kingdee_service\data\entity\Fa'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'public' => null,
        'arap' => null,
        'basedata' => null,
        'pur' => null,
        'gl' => null,
        'chhs' => null,
        'fa' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'public' => 'public',
        'arap' => 'arap',
        'basedata' => 'basedata',
        'pur' => 'pur',
        'gl' => 'gl',
        'chhs' => 'chhs',
        'fa' => 'fa'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'public' => 'setPublic',
        'arap' => 'setArap',
        'basedata' => 'setBasedata',
        'pur' => 'setPur',
        'gl' => 'setGl',
        'chhs' => 'setChhs',
        'fa' => 'setFa'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'public' => 'getPublic',
        'arap' => 'getArap',
        'basedata' => 'getBasedata',
        'pur' => 'getPur',
        'gl' => 'getGl',
        'chhs' => 'getChhs',
        'fa' => 'getFa'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['public'] = isset($data['public']) ? $data['public'] : null;
        $this->container['arap'] = isset($data['arap']) ? $data['arap'] : null;
        $this->container['basedata'] = isset($data['basedata']) ? $data['basedata'] : null;
        $this->container['pur'] = isset($data['pur']) ? $data['pur'] : null;
        $this->container['gl'] = isset($data['gl']) ? $data['gl'] : null;
        $this->container['chhs'] = isset($data['chhs']) ? $data['chhs'] : null;
        $this->container['fa'] = isset($data['fa']) ? $data['fa'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets public
     *
     * @return \com_kingdee_service\data\entity\ModelPublic
     */
    public function getPublic()
    {
        return $this->container['public'];
    }

    /**
     * Sets public
     *
     * @param \com_kingdee_service\data\entity\ModelPublic $public public
     *
     * @return $this
     */
    public function setPublic($public)
    {
        $this->container['public'] = $public;

        return $this;
    }

    /**
     * Gets arap
     *
     * @return \com_kingdee_service\data\entity\Arap
     */
    public function getArap()
    {
        return $this->container['arap'];
    }

    /**
     * Sets arap
     *
     * @param \com_kingdee_service\data\entity\Arap $arap arap
     *
     * @return $this
     */
    public function setArap($arap)
    {
        $this->container['arap'] = $arap;

        return $this;
    }

    /**
     * Gets basedata
     *
     * @return \com_kingdee_service\data\entity\Basedata
     */
    public function getBasedata()
    {
        return $this->container['basedata'];
    }

    /**
     * Sets basedata
     *
     * @param \com_kingdee_service\data\entity\Basedata $basedata basedata
     *
     * @return $this
     */
    public function setBasedata($basedata)
    {
        $this->container['basedata'] = $basedata;

        return $this;
    }

    /**
     * Gets pur
     *
     * @return \com_kingdee_service\data\entity\Pur
     */
    public function getPur()
    {
        return $this->container['pur'];
    }

    /**
     * Sets pur
     *
     * @param \com_kingdee_service\data\entity\Pur $pur pur
     *
     * @return $this
     */
    public function setPur($pur)
    {
        $this->container['pur'] = $pur;

        return $this;
    }

    /**
     * Gets gl
     *
     * @return \com_kingdee_service\data\entity\Gl
     */
    public function getGl()
    {
        return $this->container['gl'];
    }

    /**
     * Sets gl
     *
     * @param \com_kingdee_service\data\entity\Gl $gl gl
     *
     * @return $this
     */
    public function setGl($gl)
    {
        $this->container['gl'] = $gl;

        return $this;
    }

    /**
     * Gets chhs
     *
     * @return \com_kingdee_service\data\entity\Chhs
     */
    public function getChhs()
    {
        return $this->container['chhs'];
    }

    /**
     * Sets chhs
     *
     * @param \com_kingdee_service\data\entity\Chhs $chhs chhs
     *
     * @return $this
     */
    public function setChhs($chhs)
    {
        $this->container['chhs'] = $chhs;

        return $this;
    }

    /**
     * Gets fa
     *
     * @return \com_kingdee_service\data\entity\Fa
     */
    public function getFa()
    {
        return $this->container['fa'];
    }

    /**
     * Sets fa
     *
     * @param \com_kingdee_service\data\entity\Fa $fa fa
     *
     * @return $this
     */
    public function setFa($fa)
    {
        $this->container['fa'] = $fa;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


