<?php
/**
 * CouponsListResRow
 *
 * PHP version 5
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 星辰
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com_kingdee_service\data\entity;

use \ArrayAccess;
use \com_kingdee_service\ObjectSerializer;

/**
 * CouponsListResRow Class Doc Comment
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CouponsListResRow implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CouponsListRes.Row';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'coupons_id' => 'string',
        'coupons_no' => 'string',
        'schema_id' => 'string',
        'schema_name' => 'string',
        'threshold' => 'string',
        'threshold_value' => 'string',
        'comment' => 'string',
        'coupon_type' => 'string',
        'member_card' => '\com_kingdee_service\data\entity\MemberCard',
        'member' => '\com_kingdee_service\data\entity\Member',
        'bill_no' => 'string',
        'coupons_type' => 'string',
        'value' => 'string',
        'suit_type_store' => 'string',
        'suit_material_entity' => 'string',
        'content_tip' => 'string',
        'total_amt' => 'string',
        'usable_amt' => 'string',
        'status' => 'string',
        'channel' => 'string',
        'write_off_stat' => 'string',
        'create_time' => 'string',
        'modify_time' => 'string',
        'effect_time' => 'string',
        'expire_time' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'coupons_id' => null,
        'coupons_no' => null,
        'schema_id' => null,
        'schema_name' => null,
        'threshold' => null,
        'threshold_value' => null,
        'comment' => null,
        'coupon_type' => null,
        'member_card' => null,
        'member' => null,
        'bill_no' => null,
        'coupons_type' => null,
        'value' => null,
        'suit_type_store' => null,
        'suit_material_entity' => null,
        'content_tip' => null,
        'total_amt' => null,
        'usable_amt' => null,
        'status' => null,
        'channel' => null,
        'write_off_stat' => null,
        'create_time' => null,
        'modify_time' => null,
        'effect_time' => null,
        'expire_time' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'coupons_id' => 'coupons_id',
        'coupons_no' => 'coupons_no',
        'schema_id' => 'schema_id',
        'schema_name' => 'schema_name',
        'threshold' => 'threshold',
        'threshold_value' => 'threshold_value',
        'comment' => 'comment',
        'coupon_type' => 'coupon_type',
        'member_card' => 'member_card',
        'member' => 'member',
        'bill_no' => 'bill_no',
        'coupons_type' => 'coupons_type',
        'value' => 'value',
        'suit_type_store' => 'suit_type_store',
        'suit_material_entity' => 'suit_material_entity',
        'content_tip' => 'content_tip',
        'total_amt' => 'total_amt',
        'usable_amt' => 'usable_amt',
        'status' => 'status',
        'channel' => 'channel',
        'write_off_stat' => 'write_off_stat',
        'create_time' => 'create_time',
        'modify_time' => 'modify_time',
        'effect_time' => 'effect_time',
        'expire_time' => 'expire_time'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'coupons_id' => 'setCouponsId',
        'coupons_no' => 'setCouponsNo',
        'schema_id' => 'setSchemaId',
        'schema_name' => 'setSchemaName',
        'threshold' => 'setThreshold',
        'threshold_value' => 'setThresholdValue',
        'comment' => 'setComment',
        'coupon_type' => 'setCouponType',
        'member_card' => 'setMemberCard',
        'member' => 'setMember',
        'bill_no' => 'setBillNo',
        'coupons_type' => 'setCouponsType',
        'value' => 'setValue',
        'suit_type_store' => 'setSuitTypeStore',
        'suit_material_entity' => 'setSuitMaterialEntity',
        'content_tip' => 'setContentTip',
        'total_amt' => 'setTotalAmt',
        'usable_amt' => 'setUsableAmt',
        'status' => 'setStatus',
        'channel' => 'setChannel',
        'write_off_stat' => 'setWriteOffStat',
        'create_time' => 'setCreateTime',
        'modify_time' => 'setModifyTime',
        'effect_time' => 'setEffectTime',
        'expire_time' => 'setExpireTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'coupons_id' => 'getCouponsId',
        'coupons_no' => 'getCouponsNo',
        'schema_id' => 'getSchemaId',
        'schema_name' => 'getSchemaName',
        'threshold' => 'getThreshold',
        'threshold_value' => 'getThresholdValue',
        'comment' => 'getComment',
        'coupon_type' => 'getCouponType',
        'member_card' => 'getMemberCard',
        'member' => 'getMember',
        'bill_no' => 'getBillNo',
        'coupons_type' => 'getCouponsType',
        'value' => 'getValue',
        'suit_type_store' => 'getSuitTypeStore',
        'suit_material_entity' => 'getSuitMaterialEntity',
        'content_tip' => 'getContentTip',
        'total_amt' => 'getTotalAmt',
        'usable_amt' => 'getUsableAmt',
        'status' => 'getStatus',
        'channel' => 'getChannel',
        'write_off_stat' => 'getWriteOffStat',
        'create_time' => 'getCreateTime',
        'modify_time' => 'getModifyTime',
        'effect_time' => 'getEffectTime',
        'expire_time' => 'getExpireTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['coupons_id'] = isset($data['coupons_id']) ? $data['coupons_id'] : null;
        $this->container['coupons_no'] = isset($data['coupons_no']) ? $data['coupons_no'] : null;
        $this->container['schema_id'] = isset($data['schema_id']) ? $data['schema_id'] : null;
        $this->container['schema_name'] = isset($data['schema_name']) ? $data['schema_name'] : null;
        $this->container['threshold'] = isset($data['threshold']) ? $data['threshold'] : null;
        $this->container['threshold_value'] = isset($data['threshold_value']) ? $data['threshold_value'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['coupon_type'] = isset($data['coupon_type']) ? $data['coupon_type'] : null;
        $this->container['member_card'] = isset($data['member_card']) ? $data['member_card'] : null;
        $this->container['member'] = isset($data['member']) ? $data['member'] : null;
        $this->container['bill_no'] = isset($data['bill_no']) ? $data['bill_no'] : null;
        $this->container['coupons_type'] = isset($data['coupons_type']) ? $data['coupons_type'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
        $this->container['suit_type_store'] = isset($data['suit_type_store']) ? $data['suit_type_store'] : null;
        $this->container['suit_material_entity'] = isset($data['suit_material_entity']) ? $data['suit_material_entity'] : null;
        $this->container['content_tip'] = isset($data['content_tip']) ? $data['content_tip'] : null;
        $this->container['total_amt'] = isset($data['total_amt']) ? $data['total_amt'] : null;
        $this->container['usable_amt'] = isset($data['usable_amt']) ? $data['usable_amt'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['channel'] = isset($data['channel']) ? $data['channel'] : null;
        $this->container['write_off_stat'] = isset($data['write_off_stat']) ? $data['write_off_stat'] : null;
        $this->container['create_time'] = isset($data['create_time']) ? $data['create_time'] : null;
        $this->container['modify_time'] = isset($data['modify_time']) ? $data['modify_time'] : null;
        $this->container['effect_time'] = isset($data['effect_time']) ? $data['effect_time'] : null;
        $this->container['expire_time'] = isset($data['expire_time']) ? $data['expire_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets coupons_id
     *
     * @return string
     */
    public function getCouponsId()
    {
        return $this->container['coupons_id'];
    }

    /**
     * Sets coupons_id
     *
     * @param string $coupons_id coupons_id
     *
     * @return $this
     */
    public function setCouponsId($coupons_id)
    {
        $this->container['coupons_id'] = $coupons_id;

        return $this;
    }

    /**
     * Gets coupons_no
     *
     * @return string
     */
    public function getCouponsNo()
    {
        return $this->container['coupons_no'];
    }

    /**
     * Sets coupons_no
     *
     * @param string $coupons_no coupons_no
     *
     * @return $this
     */
    public function setCouponsNo($coupons_no)
    {
        $this->container['coupons_no'] = $coupons_no;

        return $this;
    }

    /**
     * Gets schema_id
     *
     * @return string
     */
    public function getSchemaId()
    {
        return $this->container['schema_id'];
    }

    /**
     * Sets schema_id
     *
     * @param string $schema_id schema_id
     *
     * @return $this
     */
    public function setSchemaId($schema_id)
    {
        $this->container['schema_id'] = $schema_id;

        return $this;
    }

    /**
     * Gets schema_name
     *
     * @return string
     */
    public function getSchemaName()
    {
        return $this->container['schema_name'];
    }

    /**
     * Sets schema_name
     *
     * @param string $schema_name schema_name
     *
     * @return $this
     */
    public function setSchemaName($schema_name)
    {
        $this->container['schema_name'] = $schema_name;

        return $this;
    }

    /**
     * Gets threshold
     *
     * @return string
     */
    public function getThreshold()
    {
        return $this->container['threshold'];
    }

    /**
     * Sets threshold
     *
     * @param string $threshold threshold
     *
     * @return $this
     */
    public function setThreshold($threshold)
    {
        $this->container['threshold'] = $threshold;

        return $this;
    }

    /**
     * Gets threshold_value
     *
     * @return string
     */
    public function getThresholdValue()
    {
        return $this->container['threshold_value'];
    }

    /**
     * Sets threshold_value
     *
     * @param string $threshold_value threshold_value
     *
     * @return $this
     */
    public function setThresholdValue($threshold_value)
    {
        $this->container['threshold_value'] = $threshold_value;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment comment
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets coupon_type
     *
     * @return string
     */
    public function getCouponType()
    {
        return $this->container['coupon_type'];
    }

    /**
     * Sets coupon_type
     *
     * @param string $coupon_type coupon_type
     *
     * @return $this
     */
    public function setCouponType($coupon_type)
    {
        $this->container['coupon_type'] = $coupon_type;

        return $this;
    }

    /**
     * Gets member_card
     *
     * @return \com_kingdee_service\data\entity\MemberCard
     */
    public function getMemberCard()
    {
        return $this->container['member_card'];
    }

    /**
     * Sets member_card
     *
     * @param \com_kingdee_service\data\entity\MemberCard $member_card member_card
     *
     * @return $this
     */
    public function setMemberCard($member_card)
    {
        $this->container['member_card'] = $member_card;

        return $this;
    }

    /**
     * Gets member
     *
     * @return \com_kingdee_service\data\entity\Member
     */
    public function getMember()
    {
        return $this->container['member'];
    }

    /**
     * Sets member
     *
     * @param \com_kingdee_service\data\entity\Member $member member
     *
     * @return $this
     */
    public function setMember($member)
    {
        $this->container['member'] = $member;

        return $this;
    }

    /**
     * Gets bill_no
     *
     * @return string
     */
    public function getBillNo()
    {
        return $this->container['bill_no'];
    }

    /**
     * Sets bill_no
     *
     * @param string $bill_no bill_no
     *
     * @return $this
     */
    public function setBillNo($bill_no)
    {
        $this->container['bill_no'] = $bill_no;

        return $this;
    }

    /**
     * Gets coupons_type
     *
     * @return string
     */
    public function getCouponsType()
    {
        return $this->container['coupons_type'];
    }

    /**
     * Sets coupons_type
     *
     * @param string $coupons_type coupons_type
     *
     * @return $this
     */
    public function setCouponsType($coupons_type)
    {
        $this->container['coupons_type'] = $coupons_type;

        return $this;
    }

    /**
     * Gets value
     *
     * @return string
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param string $value value
     *
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets suit_type_store
     *
     * @return string
     */
    public function getSuitTypeStore()
    {
        return $this->container['suit_type_store'];
    }

    /**
     * Sets suit_type_store
     *
     * @param string $suit_type_store suit_type_store
     *
     * @return $this
     */
    public function setSuitTypeStore($suit_type_store)
    {
        $this->container['suit_type_store'] = $suit_type_store;

        return $this;
    }

    /**
     * Gets suit_material_entity
     *
     * @return string
     */
    public function getSuitMaterialEntity()
    {
        return $this->container['suit_material_entity'];
    }

    /**
     * Sets suit_material_entity
     *
     * @param string $suit_material_entity suit_material_entity
     *
     * @return $this
     */
    public function setSuitMaterialEntity($suit_material_entity)
    {
        $this->container['suit_material_entity'] = $suit_material_entity;

        return $this;
    }

    /**
     * Gets content_tip
     *
     * @return string
     */
    public function getContentTip()
    {
        return $this->container['content_tip'];
    }

    /**
     * Sets content_tip
     *
     * @param string $content_tip content_tip
     *
     * @return $this
     */
    public function setContentTip($content_tip)
    {
        $this->container['content_tip'] = $content_tip;

        return $this;
    }

    /**
     * Gets total_amt
     *
     * @return string
     */
    public function getTotalAmt()
    {
        return $this->container['total_amt'];
    }

    /**
     * Sets total_amt
     *
     * @param string $total_amt total_amt
     *
     * @return $this
     */
    public function setTotalAmt($total_amt)
    {
        $this->container['total_amt'] = $total_amt;

        return $this;
    }

    /**
     * Gets usable_amt
     *
     * @return string
     */
    public function getUsableAmt()
    {
        return $this->container['usable_amt'];
    }

    /**
     * Sets usable_amt
     *
     * @param string $usable_amt usable_amt
     *
     * @return $this
     */
    public function setUsableAmt($usable_amt)
    {
        $this->container['usable_amt'] = $usable_amt;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets channel
     *
     * @return string
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param string $channel channel
     *
     * @return $this
     */
    public function setChannel($channel)
    {
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets write_off_stat
     *
     * @return string
     */
    public function getWriteOffStat()
    {
        return $this->container['write_off_stat'];
    }

    /**
     * Sets write_off_stat
     *
     * @param string $write_off_stat write_off_stat
     *
     * @return $this
     */
    public function setWriteOffStat($write_off_stat)
    {
        $this->container['write_off_stat'] = $write_off_stat;

        return $this;
    }

    /**
     * Gets create_time
     *
     * @return string
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param string $create_time create_time
     *
     * @return $this
     */
    public function setCreateTime($create_time)
    {
        $this->container['create_time'] = $create_time;

        return $this;
    }

    /**
     * Gets modify_time
     *
     * @return string
     */
    public function getModifyTime()
    {
        return $this->container['modify_time'];
    }

    /**
     * Sets modify_time
     *
     * @param string $modify_time modify_time
     *
     * @return $this
     */
    public function setModifyTime($modify_time)
    {
        $this->container['modify_time'] = $modify_time;

        return $this;
    }

    /**
     * Gets effect_time
     *
     * @return string
     */
    public function getEffectTime()
    {
        return $this->container['effect_time'];
    }

    /**
     * Sets effect_time
     *
     * @param string $effect_time effect_time
     *
     * @return $this
     */
    public function setEffectTime($effect_time)
    {
        $this->container['effect_time'] = $effect_time;

        return $this;
    }

    /**
     * Gets expire_time
     *
     * @return string
     */
    public function getExpireTime()
    {
        return $this->container['expire_time'];
    }

    /**
     * Sets expire_time
     *
     * @param string $expire_time expire_time
     *
     * @return $this
     */
    public function setExpireTime($expire_time)
    {
        $this->container['expire_time'] = $expire_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


