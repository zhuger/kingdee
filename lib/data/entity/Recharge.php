<?php
/**
 * Recharge
 *
 * PHP version 5
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * æ˜Ÿè¾°
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com_kingdee_service\data\entity;

use \ArrayAccess;
use \com_kingdee_service\ObjectSerializer;

/**
 * Recharge Class Doc Comment
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Recharge implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Recharge';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'member' => '\com_kingdee_service\data\entity\RechargeMemberInfo',
        'mb_card' => '\com_kingdee_service\data\entity\RechargeMemberCardInfo',
        'accu_recharge' => 'string',
        'accu_gift' => 'string',
        're_charge_amt' => 'string',
        'gift_amt' => 'string',
        'pre_ver_recharge' => 'string',
        'pre_ver_gift' => 'string',
        'available_recharge' => 'string',
        'available_gift' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'member' => null,
        'mb_card' => null,
        'accu_recharge' => null,
        'accu_gift' => null,
        're_charge_amt' => null,
        'gift_amt' => null,
        'pre_ver_recharge' => null,
        'pre_ver_gift' => null,
        'available_recharge' => null,
        'available_gift' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'member' => 'member',
        'mb_card' => 'mb_card',
        'accu_recharge' => 'accu_recharge',
        'accu_gift' => 'accu_gift',
        're_charge_amt' => 're_charge_amt',
        'gift_amt' => 'gift_amt',
        'pre_ver_recharge' => 'pre_ver_recharge',
        'pre_ver_gift' => 'pre_ver_gift',
        'available_recharge' => 'available_recharge',
        'available_gift' => 'available_gift'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'member' => 'setMember',
        'mb_card' => 'setMbCard',
        'accu_recharge' => 'setAccuRecharge',
        'accu_gift' => 'setAccuGift',
        're_charge_amt' => 'setReChargeAmt',
        'gift_amt' => 'setGiftAmt',
        'pre_ver_recharge' => 'setPreVerRecharge',
        'pre_ver_gift' => 'setPreVerGift',
        'available_recharge' => 'setAvailableRecharge',
        'available_gift' => 'setAvailableGift'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'member' => 'getMember',
        'mb_card' => 'getMbCard',
        'accu_recharge' => 'getAccuRecharge',
        'accu_gift' => 'getAccuGift',
        're_charge_amt' => 'getReChargeAmt',
        'gift_amt' => 'getGiftAmt',
        'pre_ver_recharge' => 'getPreVerRecharge',
        'pre_ver_gift' => 'getPreVerGift',
        'available_recharge' => 'getAvailableRecharge',
        'available_gift' => 'getAvailableGift'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['member'] = isset($data['member']) ? $data['member'] : null;
        $this->container['mb_card'] = isset($data['mb_card']) ? $data['mb_card'] : null;
        $this->container['accu_recharge'] = isset($data['accu_recharge']) ? $data['accu_recharge'] : null;
        $this->container['accu_gift'] = isset($data['accu_gift']) ? $data['accu_gift'] : null;
        $this->container['re_charge_amt'] = isset($data['re_charge_amt']) ? $data['re_charge_amt'] : null;
        $this->container['gift_amt'] = isset($data['gift_amt']) ? $data['gift_amt'] : null;
        $this->container['pre_ver_recharge'] = isset($data['pre_ver_recharge']) ? $data['pre_ver_recharge'] : null;
        $this->container['pre_ver_gift'] = isset($data['pre_ver_gift']) ? $data['pre_ver_gift'] : null;
        $this->container['available_recharge'] = isset($data['available_recharge']) ? $data['available_recharge'] : null;
        $this->container['available_gift'] = isset($data['available_gift']) ? $data['available_gift'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets member
     *
     * @return \com_kingdee_service\data\entity\RechargeMemberInfo
     */
    public function getMember()
    {
        return $this->container['member'];
    }

    /**
     * Sets member
     *
     * @param \com_kingdee_service\data\entity\RechargeMemberInfo $member member
     *
     * @return $this
     */
    public function setMember($member)
    {
        $this->container['member'] = $member;

        return $this;
    }

    /**
     * Gets mb_card
     *
     * @return \com_kingdee_service\data\entity\RechargeMemberCardInfo
     */
    public function getMbCard()
    {
        return $this->container['mb_card'];
    }

    /**
     * Sets mb_card
     *
     * @param \com_kingdee_service\data\entity\RechargeMemberCardInfo $mb_card mb_card
     *
     * @return $this
     */
    public function setMbCard($mb_card)
    {
        $this->container['mb_card'] = $mb_card;

        return $this;
    }

    /**
     * Gets accu_recharge
     *
     * @return string
     */
    public function getAccuRecharge()
    {
        return $this->container['accu_recharge'];
    }

    /**
     * Sets accu_recharge
     *
     * @param string $accu_recharge accu_recharge
     *
     * @return $this
     */
    public function setAccuRecharge($accu_recharge)
    {
        $this->container['accu_recharge'] = $accu_recharge;

        return $this;
    }

    /**
     * Gets accu_gift
     *
     * @return string
     */
    public function getAccuGift()
    {
        return $this->container['accu_gift'];
    }

    /**
     * Sets accu_gift
     *
     * @param string $accu_gift accu_gift
     *
     * @return $this
     */
    public function setAccuGift($accu_gift)
    {
        $this->container['accu_gift'] = $accu_gift;

        return $this;
    }

    /**
     * Gets re_charge_amt
     *
     * @return string
     */
    public function getReChargeAmt()
    {
        return $this->container['re_charge_amt'];
    }

    /**
     * Sets re_charge_amt
     *
     * @param string $re_charge_amt re_charge_amt
     *
     * @return $this
     */
    public function setReChargeAmt($re_charge_amt)
    {
        $this->container['re_charge_amt'] = $re_charge_amt;

        return $this;
    }

    /**
     * Gets gift_amt
     *
     * @return string
     */
    public function getGiftAmt()
    {
        return $this->container['gift_amt'];
    }

    /**
     * Sets gift_amt
     *
     * @param string $gift_amt gift_amt
     *
     * @return $this
     */
    public function setGiftAmt($gift_amt)
    {
        $this->container['gift_amt'] = $gift_amt;

        return $this;
    }

    /**
     * Gets pre_ver_recharge
     *
     * @return string
     */
    public function getPreVerRecharge()
    {
        return $this->container['pre_ver_recharge'];
    }

    /**
     * Sets pre_ver_recharge
     *
     * @param string $pre_ver_recharge pre_ver_recharge
     *
     * @return $this
     */
    public function setPreVerRecharge($pre_ver_recharge)
    {
        $this->container['pre_ver_recharge'] = $pre_ver_recharge;

        return $this;
    }

    /**
     * Gets pre_ver_gift
     *
     * @return string
     */
    public function getPreVerGift()
    {
        return $this->container['pre_ver_gift'];
    }

    /**
     * Sets pre_ver_gift
     *
     * @param string $pre_ver_gift pre_ver_gift
     *
     * @return $this
     */
    public function setPreVerGift($pre_ver_gift)
    {
        $this->container['pre_ver_gift'] = $pre_ver_gift;

        return $this;
    }

    /**
     * Gets available_recharge
     *
     * @return string
     */
    public function getAvailableRecharge()
    {
        return $this->container['available_recharge'];
    }

    /**
     * Sets available_recharge
     *
     * @param string $available_recharge available_recharge
     *
     * @return $this
     */
    public function setAvailableRecharge($available_recharge)
    {
        $this->container['available_recharge'] = $available_recharge;

        return $this;
    }

    /**
     * Gets available_gift
     *
     * @return string
     */
    public function getAvailableGift()
    {
        return $this->container['available_gift'];
    }

    /**
     * Sets available_gift
     *
     * @param string $available_gift available_gift
     *
     * @return $this
     */
    public function setAvailableGift($available_gift)
    {
        $this->container['available_gift'] = $available_gift;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


