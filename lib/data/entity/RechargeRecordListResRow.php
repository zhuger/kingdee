<?php
/**
 * RechargeRecordListResRow
 *
 * PHP version 5
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 星辰
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com_kingdee_service\data\entity;

use \ArrayAccess;
use \com_kingdee_service\ObjectSerializer;

/**
 * RechargeRecordListResRow Class Doc Comment
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RechargeRecordListResRow implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RechargeRecordListRes.Row';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'member_id' => 'string',
        'member_name' => 'string',
        'create_time' => 'string',
        'modify_time' => 'string',
        'store_id' => 'string',
        'store_name' => 'string',
        'amount' => 'string',
        'last_amount' => 'string',
        'last_gift_amount' => 'string',
        'gift_amount' => 'string',
        'consume_amount' => 'string',
        'consume_gift_amount' => 'string',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'member_id' => null,
        'member_name' => null,
        'create_time' => null,
        'modify_time' => null,
        'store_id' => null,
        'store_name' => null,
        'amount' => null,
        'last_amount' => null,
        'last_gift_amount' => null,
        'gift_amount' => null,
        'consume_amount' => null,
        'consume_gift_amount' => null,
        'type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'member_id' => 'member_id',
        'member_name' => 'member_name',
        'create_time' => 'create_time',
        'modify_time' => 'modify_time',
        'store_id' => 'store_id',
        'store_name' => 'store_name',
        'amount' => 'amount',
        'last_amount' => 'last_amount',
        'last_gift_amount' => 'last_gift_amount',
        'gift_amount' => 'gift_amount',
        'consume_amount' => 'consume_amount',
        'consume_gift_amount' => 'consume_gift_amount',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'member_id' => 'setMemberId',
        'member_name' => 'setMemberName',
        'create_time' => 'setCreateTime',
        'modify_time' => 'setModifyTime',
        'store_id' => 'setStoreId',
        'store_name' => 'setStoreName',
        'amount' => 'setAmount',
        'last_amount' => 'setLastAmount',
        'last_gift_amount' => 'setLastGiftAmount',
        'gift_amount' => 'setGiftAmount',
        'consume_amount' => 'setConsumeAmount',
        'consume_gift_amount' => 'setConsumeGiftAmount',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'member_id' => 'getMemberId',
        'member_name' => 'getMemberName',
        'create_time' => 'getCreateTime',
        'modify_time' => 'getModifyTime',
        'store_id' => 'getStoreId',
        'store_name' => 'getStoreName',
        'amount' => 'getAmount',
        'last_amount' => 'getLastAmount',
        'last_gift_amount' => 'getLastGiftAmount',
        'gift_amount' => 'getGiftAmount',
        'consume_amount' => 'getConsumeAmount',
        'consume_gift_amount' => 'getConsumeGiftAmount',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['member_id'] = isset($data['member_id']) ? $data['member_id'] : null;
        $this->container['member_name'] = isset($data['member_name']) ? $data['member_name'] : null;
        $this->container['create_time'] = isset($data['create_time']) ? $data['create_time'] : null;
        $this->container['modify_time'] = isset($data['modify_time']) ? $data['modify_time'] : null;
        $this->container['store_id'] = isset($data['store_id']) ? $data['store_id'] : null;
        $this->container['store_name'] = isset($data['store_name']) ? $data['store_name'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['last_amount'] = isset($data['last_amount']) ? $data['last_amount'] : null;
        $this->container['last_gift_amount'] = isset($data['last_gift_amount']) ? $data['last_gift_amount'] : null;
        $this->container['gift_amount'] = isset($data['gift_amount']) ? $data['gift_amount'] : null;
        $this->container['consume_amount'] = isset($data['consume_amount']) ? $data['consume_amount'] : null;
        $this->container['consume_gift_amount'] = isset($data['consume_gift_amount']) ? $data['consume_gift_amount'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets member_id
     *
     * @return string
     */
    public function getMemberId()
    {
        return $this->container['member_id'];
    }

    /**
     * Sets member_id
     *
     * @param string $member_id member_id
     *
     * @return $this
     */
    public function setMemberId($member_id)
    {
        $this->container['member_id'] = $member_id;

        return $this;
    }

    /**
     * Gets member_name
     *
     * @return string
     */
    public function getMemberName()
    {
        return $this->container['member_name'];
    }

    /**
     * Sets member_name
     *
     * @param string $member_name member_name
     *
     * @return $this
     */
    public function setMemberName($member_name)
    {
        $this->container['member_name'] = $member_name;

        return $this;
    }

    /**
     * Gets create_time
     *
     * @return string
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param string $create_time create_time
     *
     * @return $this
     */
    public function setCreateTime($create_time)
    {
        $this->container['create_time'] = $create_time;

        return $this;
    }

    /**
     * Gets modify_time
     *
     * @return string
     */
    public function getModifyTime()
    {
        return $this->container['modify_time'];
    }

    /**
     * Sets modify_time
     *
     * @param string $modify_time modify_time
     *
     * @return $this
     */
    public function setModifyTime($modify_time)
    {
        $this->container['modify_time'] = $modify_time;

        return $this;
    }

    /**
     * Gets store_id
     *
     * @return string
     */
    public function getStoreId()
    {
        return $this->container['store_id'];
    }

    /**
     * Sets store_id
     *
     * @param string $store_id store_id
     *
     * @return $this
     */
    public function setStoreId($store_id)
    {
        $this->container['store_id'] = $store_id;

        return $this;
    }

    /**
     * Gets store_name
     *
     * @return string
     */
    public function getStoreName()
    {
        return $this->container['store_name'];
    }

    /**
     * Sets store_name
     *
     * @param string $store_name store_name
     *
     * @return $this
     */
    public function setStoreName($store_name)
    {
        $this->container['store_name'] = $store_name;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return string
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param string $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets last_amount
     *
     * @return string
     */
    public function getLastAmount()
    {
        return $this->container['last_amount'];
    }

    /**
     * Sets last_amount
     *
     * @param string $last_amount last_amount
     *
     * @return $this
     */
    public function setLastAmount($last_amount)
    {
        $this->container['last_amount'] = $last_amount;

        return $this;
    }

    /**
     * Gets last_gift_amount
     *
     * @return string
     */
    public function getLastGiftAmount()
    {
        return $this->container['last_gift_amount'];
    }

    /**
     * Sets last_gift_amount
     *
     * @param string $last_gift_amount last_gift_amount
     *
     * @return $this
     */
    public function setLastGiftAmount($last_gift_amount)
    {
        $this->container['last_gift_amount'] = $last_gift_amount;

        return $this;
    }

    /**
     * Gets gift_amount
     *
     * @return string
     */
    public function getGiftAmount()
    {
        return $this->container['gift_amount'];
    }

    /**
     * Sets gift_amount
     *
     * @param string $gift_amount gift_amount
     *
     * @return $this
     */
    public function setGiftAmount($gift_amount)
    {
        $this->container['gift_amount'] = $gift_amount;

        return $this;
    }

    /**
     * Gets consume_amount
     *
     * @return string
     */
    public function getConsumeAmount()
    {
        return $this->container['consume_amount'];
    }

    /**
     * Sets consume_amount
     *
     * @param string $consume_amount consume_amount
     *
     * @return $this
     */
    public function setConsumeAmount($consume_amount)
    {
        $this->container['consume_amount'] = $consume_amount;

        return $this;
    }

    /**
     * Gets consume_gift_amount
     *
     * @return string
     */
    public function getConsumeGiftAmount()
    {
        return $this->container['consume_gift_amount'];
    }

    /**
     * Sets consume_gift_amount
     *
     * @param string $consume_gift_amount consume_gift_amount
     *
     * @return $this
     */
    public function setConsumeGiftAmount($consume_gift_amount)
    {
        $this->container['consume_gift_amount'] = $consume_gift_amount;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


