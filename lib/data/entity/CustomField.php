<?php
/**
 * CustomField
 *
 * PHP version 5
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 星辰
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com_kingdee_service\data\entity;

use \ArrayAccess;
use \com_kingdee_service\ObjectSerializer;

/**
 * CustomField Class Doc Comment
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomField implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CustomField';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'number' => 'string',
        'display_name' => 'string',
        'field_type' => 'int',
        'must_input' => 'bool',
        'def_value' => 'string',
        'base_entity_number' => 'string',
        'combo_items' => '\com_kingdee_service\data\entity\Item[]',
        'id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'number' => null,
        'display_name' => null,
        'field_type' => 'int32',
        'must_input' => null,
        'def_value' => null,
        'base_entity_number' => null,
        'combo_items' => null,
        'id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'number' => 'number',
        'display_name' => 'display_name',
        'field_type' => 'field_type',
        'must_input' => 'must_input',
        'def_value' => 'def_value',
        'base_entity_number' => 'base_entity_number',
        'combo_items' => 'combo_items',
        'id' => 'id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'number' => 'setNumber',
        'display_name' => 'setDisplayName',
        'field_type' => 'setFieldType',
        'must_input' => 'setMustInput',
        'def_value' => 'setDefValue',
        'base_entity_number' => 'setBaseEntityNumber',
        'combo_items' => 'setComboItems',
        'id' => 'setId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'number' => 'getNumber',
        'display_name' => 'getDisplayName',
        'field_type' => 'getFieldType',
        'must_input' => 'getMustInput',
        'def_value' => 'getDefValue',
        'base_entity_number' => 'getBaseEntityNumber',
        'combo_items' => 'getComboItems',
        'id' => 'getId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['field_type'] = isset($data['field_type']) ? $data['field_type'] : null;
        $this->container['must_input'] = isset($data['must_input']) ? $data['must_input'] : null;
        $this->container['def_value'] = isset($data['def_value']) ? $data['def_value'] : null;
        $this->container['base_entity_number'] = isset($data['base_entity_number']) ? $data['base_entity_number'] : null;
        $this->container['combo_items'] = isset($data['combo_items']) ? $data['combo_items'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number number
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string $display_name display_name
     *
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets field_type
     *
     * @return int
     */
    public function getFieldType()
    {
        return $this->container['field_type'];
    }

    /**
     * Sets field_type
     *
     * @param int $field_type field_type
     *
     * @return $this
     */
    public function setFieldType($field_type)
    {
        $this->container['field_type'] = $field_type;

        return $this;
    }

    /**
     * Gets must_input
     *
     * @return bool
     */
    public function getMustInput()
    {
        return $this->container['must_input'];
    }

    /**
     * Sets must_input
     *
     * @param bool $must_input must_input
     *
     * @return $this
     */
    public function setMustInput($must_input)
    {
        $this->container['must_input'] = $must_input;

        return $this;
    }

    /**
     * Gets def_value
     *
     * @return string
     */
    public function getDefValue()
    {
        return $this->container['def_value'];
    }

    /**
     * Sets def_value
     *
     * @param string $def_value def_value
     *
     * @return $this
     */
    public function setDefValue($def_value)
    {
        $this->container['def_value'] = $def_value;

        return $this;
    }

    /**
     * Gets base_entity_number
     *
     * @return string
     */
    public function getBaseEntityNumber()
    {
        return $this->container['base_entity_number'];
    }

    /**
     * Sets base_entity_number
     *
     * @param string $base_entity_number base_entity_number
     *
     * @return $this
     */
    public function setBaseEntityNumber($base_entity_number)
    {
        $this->container['base_entity_number'] = $base_entity_number;

        return $this;
    }

    /**
     * Gets combo_items
     *
     * @return \com_kingdee_service\data\entity\Item[]
     */
    public function getComboItems()
    {
        return $this->container['combo_items'];
    }

    /**
     * Sets combo_items
     *
     * @param \com_kingdee_service\data\entity\Item[] $combo_items combo_items
     *
     * @return $this
     */
    public function setComboItems($combo_items)
    {
        $this->container['combo_items'] = $combo_items;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


