<?php
/**
 * Unit
 *
 * PHP version 5
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 星辰
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com_kingdee_service\data\entity;

use \ArrayAccess;
use \com_kingdee_service\ObjectSerializer;

/**
 * Unit Class Doc Comment
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Unit implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Unit';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'unitid_name' => 'string',
        'conversion_unit_name' => 'string',
        'is_float' => 'bool',
        'unit_precision_account' => 'int',
        'conversion_unit_number' => 'string',
        'conversion_unit_long_number' => 'string',
        'material_id' => 'string',
        'unit_create_time' => 'string',
        'conversion_unit_level' => 'int',
        'unit_long_number' => 'string',
        'conversion_unit_enable' => 'string',
        'conversion_unit_precision' => 'string',
        'id' => 'string',
        'unit_disable_date' => 'string',
        'is_default' => 'bool',
        'unit_is_leaf' => 'bool',
        'conversion_unit_createtime' => 'string',
        'unit_id' => 'string',
        'conversion_unit_id' => 'string',
        'conversion_unit_is_leaf' => 'bool',
        'index' => 'int',
        'unit_precision' => 'string',
        'unit_number' => 'string',
        'conversion_unit_modify_time' => 'string',
        'unit_enable' => 'string',
        'conversion_unit_conversion_type' => 'string',
        'unit_modify_time' => 'string',
        'coefficient' => 'float',
        'conversion_unit_disable_date' => 'string',
        'unit_level' => 'int',
        'conversion_unit_precision_account' => 'string',
        'unit_conversion_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'unitid_name' => null,
        'conversion_unit_name' => null,
        'is_float' => null,
        'unit_precision_account' => 'int32',
        'conversion_unit_number' => null,
        'conversion_unit_long_number' => null,
        'material_id' => null,
        'unit_create_time' => null,
        'conversion_unit_level' => 'int32',
        'unit_long_number' => null,
        'conversion_unit_enable' => null,
        'conversion_unit_precision' => null,
        'id' => null,
        'unit_disable_date' => null,
        'is_default' => null,
        'unit_is_leaf' => null,
        'conversion_unit_createtime' => null,
        'unit_id' => null,
        'conversion_unit_id' => null,
        'conversion_unit_is_leaf' => null,
        'index' => 'int32',
        'unit_precision' => null,
        'unit_number' => null,
        'conversion_unit_modify_time' => null,
        'unit_enable' => null,
        'conversion_unit_conversion_type' => null,
        'unit_modify_time' => null,
        'coefficient' => 'float',
        'conversion_unit_disable_date' => null,
        'unit_level' => 'int32',
        'conversion_unit_precision_account' => null,
        'unit_conversion_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'unitid_name' => 'unitid_name',
        'conversion_unit_name' => 'conversion_unit_name',
        'is_float' => 'is_float',
        'unit_precision_account' => 'unit_precision_account',
        'conversion_unit_number' => 'conversion_unit_number',
        'conversion_unit_long_number' => 'conversion_unit_long_number',
        'material_id' => 'material_id',
        'unit_create_time' => 'unit_create_time',
        'conversion_unit_level' => 'conversion_unit_level',
        'unit_long_number' => 'unit_long_number',
        'conversion_unit_enable' => 'conversion_unit_enable',
        'conversion_unit_precision' => 'conversion_unit_precision',
        'id' => 'id',
        'unit_disable_date' => 'unit_disable_date',
        'is_default' => 'is_default',
        'unit_is_leaf' => 'unit_is_leaf',
        'conversion_unit_createtime' => 'conversion_unit_createtime',
        'unit_id' => 'unit_id',
        'conversion_unit_id' => 'conversion_unit_id',
        'conversion_unit_is_leaf' => 'conversion_unit_is_leaf',
        'index' => 'index',
        'unit_precision' => 'unit_precision',
        'unit_number' => 'unit_number',
        'conversion_unit_modify_time' => 'conversion_unit_modify_time',
        'unit_enable' => 'unit_enable',
        'conversion_unit_conversion_type' => 'conversion_unit_conversion_type',
        'unit_modify_time' => 'unit_modify_time',
        'coefficient' => 'coefficient',
        'conversion_unit_disable_date' => 'conversion_unit_disable_date',
        'unit_level' => 'unit_level',
        'conversion_unit_precision_account' => 'conversion_unit_precision_account',
        'unit_conversion_type' => 'unit_conversion_type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'unitid_name' => 'setUnitidName',
        'conversion_unit_name' => 'setConversionUnitName',
        'is_float' => 'setIsFloat',
        'unit_precision_account' => 'setUnitPrecisionAccount',
        'conversion_unit_number' => 'setConversionUnitNumber',
        'conversion_unit_long_number' => 'setConversionUnitLongNumber',
        'material_id' => 'setMaterialId',
        'unit_create_time' => 'setUnitCreateTime',
        'conversion_unit_level' => 'setConversionUnitLevel',
        'unit_long_number' => 'setUnitLongNumber',
        'conversion_unit_enable' => 'setConversionUnitEnable',
        'conversion_unit_precision' => 'setConversionUnitPrecision',
        'id' => 'setId',
        'unit_disable_date' => 'setUnitDisableDate',
        'is_default' => 'setIsDefault',
        'unit_is_leaf' => 'setUnitIsLeaf',
        'conversion_unit_createtime' => 'setConversionUnitCreatetime',
        'unit_id' => 'setUnitId',
        'conversion_unit_id' => 'setConversionUnitId',
        'conversion_unit_is_leaf' => 'setConversionUnitIsLeaf',
        'index' => 'setIndex',
        'unit_precision' => 'setUnitPrecision',
        'unit_number' => 'setUnitNumber',
        'conversion_unit_modify_time' => 'setConversionUnitModifyTime',
        'unit_enable' => 'setUnitEnable',
        'conversion_unit_conversion_type' => 'setConversionUnitConversionType',
        'unit_modify_time' => 'setUnitModifyTime',
        'coefficient' => 'setCoefficient',
        'conversion_unit_disable_date' => 'setConversionUnitDisableDate',
        'unit_level' => 'setUnitLevel',
        'conversion_unit_precision_account' => 'setConversionUnitPrecisionAccount',
        'unit_conversion_type' => 'setUnitConversionType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'unitid_name' => 'getUnitidName',
        'conversion_unit_name' => 'getConversionUnitName',
        'is_float' => 'getIsFloat',
        'unit_precision_account' => 'getUnitPrecisionAccount',
        'conversion_unit_number' => 'getConversionUnitNumber',
        'conversion_unit_long_number' => 'getConversionUnitLongNumber',
        'material_id' => 'getMaterialId',
        'unit_create_time' => 'getUnitCreateTime',
        'conversion_unit_level' => 'getConversionUnitLevel',
        'unit_long_number' => 'getUnitLongNumber',
        'conversion_unit_enable' => 'getConversionUnitEnable',
        'conversion_unit_precision' => 'getConversionUnitPrecision',
        'id' => 'getId',
        'unit_disable_date' => 'getUnitDisableDate',
        'is_default' => 'getIsDefault',
        'unit_is_leaf' => 'getUnitIsLeaf',
        'conversion_unit_createtime' => 'getConversionUnitCreatetime',
        'unit_id' => 'getUnitId',
        'conversion_unit_id' => 'getConversionUnitId',
        'conversion_unit_is_leaf' => 'getConversionUnitIsLeaf',
        'index' => 'getIndex',
        'unit_precision' => 'getUnitPrecision',
        'unit_number' => 'getUnitNumber',
        'conversion_unit_modify_time' => 'getConversionUnitModifyTime',
        'unit_enable' => 'getUnitEnable',
        'conversion_unit_conversion_type' => 'getConversionUnitConversionType',
        'unit_modify_time' => 'getUnitModifyTime',
        'coefficient' => 'getCoefficient',
        'conversion_unit_disable_date' => 'getConversionUnitDisableDate',
        'unit_level' => 'getUnitLevel',
        'conversion_unit_precision_account' => 'getConversionUnitPrecisionAccount',
        'unit_conversion_type' => 'getUnitConversionType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['unitid_name'] = isset($data['unitid_name']) ? $data['unitid_name'] : null;
        $this->container['conversion_unit_name'] = isset($data['conversion_unit_name']) ? $data['conversion_unit_name'] : null;
        $this->container['is_float'] = isset($data['is_float']) ? $data['is_float'] : null;
        $this->container['unit_precision_account'] = isset($data['unit_precision_account']) ? $data['unit_precision_account'] : null;
        $this->container['conversion_unit_number'] = isset($data['conversion_unit_number']) ? $data['conversion_unit_number'] : null;
        $this->container['conversion_unit_long_number'] = isset($data['conversion_unit_long_number']) ? $data['conversion_unit_long_number'] : null;
        $this->container['material_id'] = isset($data['material_id']) ? $data['material_id'] : null;
        $this->container['unit_create_time'] = isset($data['unit_create_time']) ? $data['unit_create_time'] : null;
        $this->container['conversion_unit_level'] = isset($data['conversion_unit_level']) ? $data['conversion_unit_level'] : null;
        $this->container['unit_long_number'] = isset($data['unit_long_number']) ? $data['unit_long_number'] : null;
        $this->container['conversion_unit_enable'] = isset($data['conversion_unit_enable']) ? $data['conversion_unit_enable'] : null;
        $this->container['conversion_unit_precision'] = isset($data['conversion_unit_precision']) ? $data['conversion_unit_precision'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['unit_disable_date'] = isset($data['unit_disable_date']) ? $data['unit_disable_date'] : null;
        $this->container['is_default'] = isset($data['is_default']) ? $data['is_default'] : null;
        $this->container['unit_is_leaf'] = isset($data['unit_is_leaf']) ? $data['unit_is_leaf'] : null;
        $this->container['conversion_unit_createtime'] = isset($data['conversion_unit_createtime']) ? $data['conversion_unit_createtime'] : null;
        $this->container['unit_id'] = isset($data['unit_id']) ? $data['unit_id'] : null;
        $this->container['conversion_unit_id'] = isset($data['conversion_unit_id']) ? $data['conversion_unit_id'] : null;
        $this->container['conversion_unit_is_leaf'] = isset($data['conversion_unit_is_leaf']) ? $data['conversion_unit_is_leaf'] : null;
        $this->container['index'] = isset($data['index']) ? $data['index'] : null;
        $this->container['unit_precision'] = isset($data['unit_precision']) ? $data['unit_precision'] : null;
        $this->container['unit_number'] = isset($data['unit_number']) ? $data['unit_number'] : null;
        $this->container['conversion_unit_modify_time'] = isset($data['conversion_unit_modify_time']) ? $data['conversion_unit_modify_time'] : null;
        $this->container['unit_enable'] = isset($data['unit_enable']) ? $data['unit_enable'] : null;
        $this->container['conversion_unit_conversion_type'] = isset($data['conversion_unit_conversion_type']) ? $data['conversion_unit_conversion_type'] : null;
        $this->container['unit_modify_time'] = isset($data['unit_modify_time']) ? $data['unit_modify_time'] : null;
        $this->container['coefficient'] = isset($data['coefficient']) ? $data['coefficient'] : null;
        $this->container['conversion_unit_disable_date'] = isset($data['conversion_unit_disable_date']) ? $data['conversion_unit_disable_date'] : null;
        $this->container['unit_level'] = isset($data['unit_level']) ? $data['unit_level'] : null;
        $this->container['conversion_unit_precision_account'] = isset($data['conversion_unit_precision_account']) ? $data['conversion_unit_precision_account'] : null;
        $this->container['unit_conversion_type'] = isset($data['unit_conversion_type']) ? $data['unit_conversion_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets unitid_name
     *
     * @return string
     */
    public function getUnitidName()
    {
        return $this->container['unitid_name'];
    }

    /**
     * Sets unitid_name
     *
     * @param string $unitid_name unitid_name
     *
     * @return $this
     */
    public function setUnitidName($unitid_name)
    {
        $this->container['unitid_name'] = $unitid_name;

        return $this;
    }

    /**
     * Gets conversion_unit_name
     *
     * @return string
     */
    public function getConversionUnitName()
    {
        return $this->container['conversion_unit_name'];
    }

    /**
     * Sets conversion_unit_name
     *
     * @param string $conversion_unit_name conversion_unit_name
     *
     * @return $this
     */
    public function setConversionUnitName($conversion_unit_name)
    {
        $this->container['conversion_unit_name'] = $conversion_unit_name;

        return $this;
    }

    /**
     * Gets is_float
     *
     * @return bool
     */
    public function getIsFloat()
    {
        return $this->container['is_float'];
    }

    /**
     * Sets is_float
     *
     * @param bool $is_float is_float
     *
     * @return $this
     */
    public function setIsFloat($is_float)
    {
        $this->container['is_float'] = $is_float;

        return $this;
    }

    /**
     * Gets unit_precision_account
     *
     * @return int
     */
    public function getUnitPrecisionAccount()
    {
        return $this->container['unit_precision_account'];
    }

    /**
     * Sets unit_precision_account
     *
     * @param int $unit_precision_account unit_precision_account
     *
     * @return $this
     */
    public function setUnitPrecisionAccount($unit_precision_account)
    {
        $this->container['unit_precision_account'] = $unit_precision_account;

        return $this;
    }

    /**
     * Gets conversion_unit_number
     *
     * @return string
     */
    public function getConversionUnitNumber()
    {
        return $this->container['conversion_unit_number'];
    }

    /**
     * Sets conversion_unit_number
     *
     * @param string $conversion_unit_number conversion_unit_number
     *
     * @return $this
     */
    public function setConversionUnitNumber($conversion_unit_number)
    {
        $this->container['conversion_unit_number'] = $conversion_unit_number;

        return $this;
    }

    /**
     * Gets conversion_unit_long_number
     *
     * @return string
     */
    public function getConversionUnitLongNumber()
    {
        return $this->container['conversion_unit_long_number'];
    }

    /**
     * Sets conversion_unit_long_number
     *
     * @param string $conversion_unit_long_number conversion_unit_long_number
     *
     * @return $this
     */
    public function setConversionUnitLongNumber($conversion_unit_long_number)
    {
        $this->container['conversion_unit_long_number'] = $conversion_unit_long_number;

        return $this;
    }

    /**
     * Gets material_id
     *
     * @return string
     */
    public function getMaterialId()
    {
        return $this->container['material_id'];
    }

    /**
     * Sets material_id
     *
     * @param string $material_id material_id
     *
     * @return $this
     */
    public function setMaterialId($material_id)
    {
        $this->container['material_id'] = $material_id;

        return $this;
    }

    /**
     * Gets unit_create_time
     *
     * @return string
     */
    public function getUnitCreateTime()
    {
        return $this->container['unit_create_time'];
    }

    /**
     * Sets unit_create_time
     *
     * @param string $unit_create_time unit_create_time
     *
     * @return $this
     */
    public function setUnitCreateTime($unit_create_time)
    {
        $this->container['unit_create_time'] = $unit_create_time;

        return $this;
    }

    /**
     * Gets conversion_unit_level
     *
     * @return int
     */
    public function getConversionUnitLevel()
    {
        return $this->container['conversion_unit_level'];
    }

    /**
     * Sets conversion_unit_level
     *
     * @param int $conversion_unit_level conversion_unit_level
     *
     * @return $this
     */
    public function setConversionUnitLevel($conversion_unit_level)
    {
        $this->container['conversion_unit_level'] = $conversion_unit_level;

        return $this;
    }

    /**
     * Gets unit_long_number
     *
     * @return string
     */
    public function getUnitLongNumber()
    {
        return $this->container['unit_long_number'];
    }

    /**
     * Sets unit_long_number
     *
     * @param string $unit_long_number unit_long_number
     *
     * @return $this
     */
    public function setUnitLongNumber($unit_long_number)
    {
        $this->container['unit_long_number'] = $unit_long_number;

        return $this;
    }

    /**
     * Gets conversion_unit_enable
     *
     * @return string
     */
    public function getConversionUnitEnable()
    {
        return $this->container['conversion_unit_enable'];
    }

    /**
     * Sets conversion_unit_enable
     *
     * @param string $conversion_unit_enable conversion_unit_enable
     *
     * @return $this
     */
    public function setConversionUnitEnable($conversion_unit_enable)
    {
        $this->container['conversion_unit_enable'] = $conversion_unit_enable;

        return $this;
    }

    /**
     * Gets conversion_unit_precision
     *
     * @return string
     */
    public function getConversionUnitPrecision()
    {
        return $this->container['conversion_unit_precision'];
    }

    /**
     * Sets conversion_unit_precision
     *
     * @param string $conversion_unit_precision conversion_unit_precision
     *
     * @return $this
     */
    public function setConversionUnitPrecision($conversion_unit_precision)
    {
        $this->container['conversion_unit_precision'] = $conversion_unit_precision;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets unit_disable_date
     *
     * @return string
     */
    public function getUnitDisableDate()
    {
        return $this->container['unit_disable_date'];
    }

    /**
     * Sets unit_disable_date
     *
     * @param string $unit_disable_date unit_disable_date
     *
     * @return $this
     */
    public function setUnitDisableDate($unit_disable_date)
    {
        $this->container['unit_disable_date'] = $unit_disable_date;

        return $this;
    }

    /**
     * Gets is_default
     *
     * @return bool
     */
    public function getIsDefault()
    {
        return $this->container['is_default'];
    }

    /**
     * Sets is_default
     *
     * @param bool $is_default is_default
     *
     * @return $this
     */
    public function setIsDefault($is_default)
    {
        $this->container['is_default'] = $is_default;

        return $this;
    }

    /**
     * Gets unit_is_leaf
     *
     * @return bool
     */
    public function getUnitIsLeaf()
    {
        return $this->container['unit_is_leaf'];
    }

    /**
     * Sets unit_is_leaf
     *
     * @param bool $unit_is_leaf unit_is_leaf
     *
     * @return $this
     */
    public function setUnitIsLeaf($unit_is_leaf)
    {
        $this->container['unit_is_leaf'] = $unit_is_leaf;

        return $this;
    }

    /**
     * Gets conversion_unit_createtime
     *
     * @return string
     */
    public function getConversionUnitCreatetime()
    {
        return $this->container['conversion_unit_createtime'];
    }

    /**
     * Sets conversion_unit_createtime
     *
     * @param string $conversion_unit_createtime conversion_unit_createtime
     *
     * @return $this
     */
    public function setConversionUnitCreatetime($conversion_unit_createtime)
    {
        $this->container['conversion_unit_createtime'] = $conversion_unit_createtime;

        return $this;
    }

    /**
     * Gets unit_id
     *
     * @return string
     */
    public function getUnitId()
    {
        return $this->container['unit_id'];
    }

    /**
     * Sets unit_id
     *
     * @param string $unit_id unit_id
     *
     * @return $this
     */
    public function setUnitId($unit_id)
    {
        $this->container['unit_id'] = $unit_id;

        return $this;
    }

    /**
     * Gets conversion_unit_id
     *
     * @return string
     */
    public function getConversionUnitId()
    {
        return $this->container['conversion_unit_id'];
    }

    /**
     * Sets conversion_unit_id
     *
     * @param string $conversion_unit_id conversion_unit_id
     *
     * @return $this
     */
    public function setConversionUnitId($conversion_unit_id)
    {
        $this->container['conversion_unit_id'] = $conversion_unit_id;

        return $this;
    }

    /**
     * Gets conversion_unit_is_leaf
     *
     * @return bool
     */
    public function getConversionUnitIsLeaf()
    {
        return $this->container['conversion_unit_is_leaf'];
    }

    /**
     * Sets conversion_unit_is_leaf
     *
     * @param bool $conversion_unit_is_leaf conversion_unit_is_leaf
     *
     * @return $this
     */
    public function setConversionUnitIsLeaf($conversion_unit_is_leaf)
    {
        $this->container['conversion_unit_is_leaf'] = $conversion_unit_is_leaf;

        return $this;
    }

    /**
     * Gets index
     *
     * @return int
     */
    public function getIndex()
    {
        return $this->container['index'];
    }

    /**
     * Sets index
     *
     * @param int $index index
     *
     * @return $this
     */
    public function setIndex($index)
    {
        $this->container['index'] = $index;

        return $this;
    }

    /**
     * Gets unit_precision
     *
     * @return string
     */
    public function getUnitPrecision()
    {
        return $this->container['unit_precision'];
    }

    /**
     * Sets unit_precision
     *
     * @param string $unit_precision unit_precision
     *
     * @return $this
     */
    public function setUnitPrecision($unit_precision)
    {
        $this->container['unit_precision'] = $unit_precision;

        return $this;
    }

    /**
     * Gets unit_number
     *
     * @return string
     */
    public function getUnitNumber()
    {
        return $this->container['unit_number'];
    }

    /**
     * Sets unit_number
     *
     * @param string $unit_number unit_number
     *
     * @return $this
     */
    public function setUnitNumber($unit_number)
    {
        $this->container['unit_number'] = $unit_number;

        return $this;
    }

    /**
     * Gets conversion_unit_modify_time
     *
     * @return string
     */
    public function getConversionUnitModifyTime()
    {
        return $this->container['conversion_unit_modify_time'];
    }

    /**
     * Sets conversion_unit_modify_time
     *
     * @param string $conversion_unit_modify_time conversion_unit_modify_time
     *
     * @return $this
     */
    public function setConversionUnitModifyTime($conversion_unit_modify_time)
    {
        $this->container['conversion_unit_modify_time'] = $conversion_unit_modify_time;

        return $this;
    }

    /**
     * Gets unit_enable
     *
     * @return string
     */
    public function getUnitEnable()
    {
        return $this->container['unit_enable'];
    }

    /**
     * Sets unit_enable
     *
     * @param string $unit_enable unit_enable
     *
     * @return $this
     */
    public function setUnitEnable($unit_enable)
    {
        $this->container['unit_enable'] = $unit_enable;

        return $this;
    }

    /**
     * Gets conversion_unit_conversion_type
     *
     * @return string
     */
    public function getConversionUnitConversionType()
    {
        return $this->container['conversion_unit_conversion_type'];
    }

    /**
     * Sets conversion_unit_conversion_type
     *
     * @param string $conversion_unit_conversion_type conversion_unit_conversion_type
     *
     * @return $this
     */
    public function setConversionUnitConversionType($conversion_unit_conversion_type)
    {
        $this->container['conversion_unit_conversion_type'] = $conversion_unit_conversion_type;

        return $this;
    }

    /**
     * Gets unit_modify_time
     *
     * @return string
     */
    public function getUnitModifyTime()
    {
        return $this->container['unit_modify_time'];
    }

    /**
     * Sets unit_modify_time
     *
     * @param string $unit_modify_time unit_modify_time
     *
     * @return $this
     */
    public function setUnitModifyTime($unit_modify_time)
    {
        $this->container['unit_modify_time'] = $unit_modify_time;

        return $this;
    }

    /**
     * Gets coefficient
     *
     * @return float
     */
    public function getCoefficient()
    {
        return $this->container['coefficient'];
    }

    /**
     * Sets coefficient
     *
     * @param float $coefficient coefficient
     *
     * @return $this
     */
    public function setCoefficient($coefficient)
    {
        $this->container['coefficient'] = $coefficient;

        return $this;
    }

    /**
     * Gets conversion_unit_disable_date
     *
     * @return string
     */
    public function getConversionUnitDisableDate()
    {
        return $this->container['conversion_unit_disable_date'];
    }

    /**
     * Sets conversion_unit_disable_date
     *
     * @param string $conversion_unit_disable_date conversion_unit_disable_date
     *
     * @return $this
     */
    public function setConversionUnitDisableDate($conversion_unit_disable_date)
    {
        $this->container['conversion_unit_disable_date'] = $conversion_unit_disable_date;

        return $this;
    }

    /**
     * Gets unit_level
     *
     * @return int
     */
    public function getUnitLevel()
    {
        return $this->container['unit_level'];
    }

    /**
     * Sets unit_level
     *
     * @param int $unit_level unit_level
     *
     * @return $this
     */
    public function setUnitLevel($unit_level)
    {
        $this->container['unit_level'] = $unit_level;

        return $this;
    }

    /**
     * Gets conversion_unit_precision_account
     *
     * @return string
     */
    public function getConversionUnitPrecisionAccount()
    {
        return $this->container['conversion_unit_precision_account'];
    }

    /**
     * Sets conversion_unit_precision_account
     *
     * @param string $conversion_unit_precision_account conversion_unit_precision_account
     *
     * @return $this
     */
    public function setConversionUnitPrecisionAccount($conversion_unit_precision_account)
    {
        $this->container['conversion_unit_precision_account'] = $conversion_unit_precision_account;

        return $this;
    }

    /**
     * Gets unit_conversion_type
     *
     * @return string
     */
    public function getUnitConversionType()
    {
        return $this->container['unit_conversion_type'];
    }

    /**
     * Sets unit_conversion_type
     *
     * @param string $unit_conversion_type unit_conversion_type
     *
     * @return $this
     */
    public function setUnitConversionType($unit_conversion_type)
    {
        $this->container['unit_conversion_type'] = $unit_conversion_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


