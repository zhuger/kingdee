<?php
/**
 * InvCheckBillGainLossDealRes
 *
 * PHP version 5
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 星辰
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com_kingdee_service\data\entity;

use \ArrayAccess;
use \com_kingdee_service\ObjectSerializer;

/**
 * InvCheckBillGainLossDealRes Class Doc Comment
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InvCheckBillGainLossDealRes implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InvCheckBillGainLossDealRes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'success' => 'bool',
        'gain_loss_type' => 'string',
        'gain_id' => 'string',
        'gain_no' => 'string',
        'loss_id' => 'string',
        'loss_no' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'success' => null,
        'gain_loss_type' => null,
        'gain_id' => null,
        'gain_no' => null,
        'loss_id' => null,
        'loss_no' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'success' => 'success',
        'gain_loss_type' => 'gain_loss_type',
        'gain_id' => 'gain_id',
        'gain_no' => 'gain_no',
        'loss_id' => 'loss_id',
        'loss_no' => 'loss_no'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'success' => 'setSuccess',
        'gain_loss_type' => 'setGainLossType',
        'gain_id' => 'setGainId',
        'gain_no' => 'setGainNo',
        'loss_id' => 'setLossId',
        'loss_no' => 'setLossNo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'success' => 'getSuccess',
        'gain_loss_type' => 'getGainLossType',
        'gain_id' => 'getGainId',
        'gain_no' => 'getGainNo',
        'loss_id' => 'getLossId',
        'loss_no' => 'getLossNo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['success'] = isset($data['success']) ? $data['success'] : null;
        $this->container['gain_loss_type'] = isset($data['gain_loss_type']) ? $data['gain_loss_type'] : null;
        $this->container['gain_id'] = isset($data['gain_id']) ? $data['gain_id'] : null;
        $this->container['gain_no'] = isset($data['gain_no']) ? $data['gain_no'] : null;
        $this->container['loss_id'] = isset($data['loss_id']) ? $data['loss_id'] : null;
        $this->container['loss_no'] = isset($data['loss_no']) ? $data['loss_no'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets success
     *
     * @return bool
     */
    public function getSuccess()
    {
        return $this->container['success'];
    }

    /**
     * Sets success
     *
     * @param bool $success success
     *
     * @return $this
     */
    public function setSuccess($success)
    {
        $this->container['success'] = $success;

        return $this;
    }

    /**
     * Gets gain_loss_type
     *
     * @return string
     */
    public function getGainLossType()
    {
        return $this->container['gain_loss_type'];
    }

    /**
     * Sets gain_loss_type
     *
     * @param string $gain_loss_type gain_loss_type
     *
     * @return $this
     */
    public function setGainLossType($gain_loss_type)
    {
        $this->container['gain_loss_type'] = $gain_loss_type;

        return $this;
    }

    /**
     * Gets gain_id
     *
     * @return string
     */
    public function getGainId()
    {
        return $this->container['gain_id'];
    }

    /**
     * Sets gain_id
     *
     * @param string $gain_id gain_id
     *
     * @return $this
     */
    public function setGainId($gain_id)
    {
        $this->container['gain_id'] = $gain_id;

        return $this;
    }

    /**
     * Gets gain_no
     *
     * @return string
     */
    public function getGainNo()
    {
        return $this->container['gain_no'];
    }

    /**
     * Sets gain_no
     *
     * @param string $gain_no gain_no
     *
     * @return $this
     */
    public function setGainNo($gain_no)
    {
        $this->container['gain_no'] = $gain_no;

        return $this;
    }

    /**
     * Gets loss_id
     *
     * @return string
     */
    public function getLossId()
    {
        return $this->container['loss_id'];
    }

    /**
     * Sets loss_id
     *
     * @param string $loss_id loss_id
     *
     * @return $this
     */
    public function setLossId($loss_id)
    {
        $this->container['loss_id'] = $loss_id;

        return $this;
    }

    /**
     * Gets loss_no
     *
     * @return string
     */
    public function getLossNo()
    {
        return $this->container['loss_no'];
    }

    /**
     * Sets loss_no
     *
     * @param string $loss_no loss_no
     *
     * @return $this
     */
    public function setLossNo($loss_no)
    {
        $this->container['loss_no'] = $loss_no;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


