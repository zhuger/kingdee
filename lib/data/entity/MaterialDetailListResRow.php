<?php
/**
 * MaterialDetailListResRow
 *
 * PHP version 5
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * æ˜Ÿè¾°
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com_kingdee_service\data\entity;

use \ArrayAccess;
use \com_kingdee_service\ObjectSerializer;

/**
 * MaterialDetailListResRow Class Doc Comment
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MaterialDetailListResRow implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MaterialDetailListRes.Row';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'number' => 'string',
        'name' => 'string',
        'base_unit_id' => 'string',
        'base_unit_name' => 'string',
        'barcode' => 'string',
        'model' => 'string',
        'brand_id' => 'string',
        'brand_name' => 'string',
        'brand_number' => 'string',
        'is_multi_unit' => 'bool',
        'sale_unit_id' => 'string',
        'sale_unit_name' => 'string',
        'sale_unit_number' => 'string',
        'is_serial' => 'bool',
        'is_batch' => 'bool',
        'is_sale' => 'bool',
        'is_weight' => 'bool',
        'aux_entity' => '\com_kingdee_service\data\entity\Auxentity[]',
        'barcode_entity' => '\com_kingdee_service\data\entity\Barcodeentity[]',
        'price_entity' => '\com_kingdee_service\data\entity\Priceentity[]',
        'qty' => 'string',
        'images' => '\com_kingdee_service\data\entity\Image[]',
        'shelf_status' => 'string',
        'min_price' => 'string',
        'max_price' => 'string',
        'sale_unit_min_price' => 'string',
        'sale_unit_max_price' => 'string',
        'is_asst_attr' => 'bool',
        'aux_groups' => '\com_kingdee_service\data\entity\AuxGroup[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'number' => null,
        'name' => null,
        'base_unit_id' => null,
        'base_unit_name' => null,
        'barcode' => null,
        'model' => null,
        'brand_id' => null,
        'brand_name' => null,
        'brand_number' => null,
        'is_multi_unit' => null,
        'sale_unit_id' => null,
        'sale_unit_name' => null,
        'sale_unit_number' => null,
        'is_serial' => null,
        'is_batch' => null,
        'is_sale' => null,
        'is_weight' => null,
        'aux_entity' => null,
        'barcode_entity' => null,
        'price_entity' => null,
        'qty' => null,
        'images' => null,
        'shelf_status' => null,
        'min_price' => null,
        'max_price' => null,
        'sale_unit_min_price' => null,
        'sale_unit_max_price' => null,
        'is_asst_attr' => null,
        'aux_groups' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'number' => 'number',
        'name' => 'name',
        'base_unit_id' => 'base_unit_id',
        'base_unit_name' => 'base_unit_name',
        'barcode' => 'barcode',
        'model' => 'model',
        'brand_id' => 'brand_id',
        'brand_name' => 'brand_name',
        'brand_number' => 'brand_number',
        'is_multi_unit' => 'is_multi_unit',
        'sale_unit_id' => 'sale_unit_id',
        'sale_unit_name' => 'sale_unit_name',
        'sale_unit_number' => 'sale_unit_number',
        'is_serial' => 'is_serial',
        'is_batch' => 'is_batch',
        'is_sale' => 'is_sale',
        'is_weight' => 'is_weight',
        'aux_entity' => 'aux_entity',
        'barcode_entity' => 'barcode_entity',
        'price_entity' => 'price_entity',
        'qty' => 'qty',
        'images' => 'images',
        'shelf_status' => 'shelf_status',
        'min_price' => 'min_price',
        'max_price' => 'max_price',
        'sale_unit_min_price' => 'sale_unit_min_price',
        'sale_unit_max_price' => 'sale_unit_max_price',
        'is_asst_attr' => 'is_asst_attr',
        'aux_groups' => 'aux_groups'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'number' => 'setNumber',
        'name' => 'setName',
        'base_unit_id' => 'setBaseUnitId',
        'base_unit_name' => 'setBaseUnitName',
        'barcode' => 'setBarcode',
        'model' => 'setModel',
        'brand_id' => 'setBrandId',
        'brand_name' => 'setBrandName',
        'brand_number' => 'setBrandNumber',
        'is_multi_unit' => 'setIsMultiUnit',
        'sale_unit_id' => 'setSaleUnitId',
        'sale_unit_name' => 'setSaleUnitName',
        'sale_unit_number' => 'setSaleUnitNumber',
        'is_serial' => 'setIsSerial',
        'is_batch' => 'setIsBatch',
        'is_sale' => 'setIsSale',
        'is_weight' => 'setIsWeight',
        'aux_entity' => 'setAuxEntity',
        'barcode_entity' => 'setBarcodeEntity',
        'price_entity' => 'setPriceEntity',
        'qty' => 'setQty',
        'images' => 'setImages',
        'shelf_status' => 'setShelfStatus',
        'min_price' => 'setMinPrice',
        'max_price' => 'setMaxPrice',
        'sale_unit_min_price' => 'setSaleUnitMinPrice',
        'sale_unit_max_price' => 'setSaleUnitMaxPrice',
        'is_asst_attr' => 'setIsAsstAttr',
        'aux_groups' => 'setAuxGroups'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'number' => 'getNumber',
        'name' => 'getName',
        'base_unit_id' => 'getBaseUnitId',
        'base_unit_name' => 'getBaseUnitName',
        'barcode' => 'getBarcode',
        'model' => 'getModel',
        'brand_id' => 'getBrandId',
        'brand_name' => 'getBrandName',
        'brand_number' => 'getBrandNumber',
        'is_multi_unit' => 'getIsMultiUnit',
        'sale_unit_id' => 'getSaleUnitId',
        'sale_unit_name' => 'getSaleUnitName',
        'sale_unit_number' => 'getSaleUnitNumber',
        'is_serial' => 'getIsSerial',
        'is_batch' => 'getIsBatch',
        'is_sale' => 'getIsSale',
        'is_weight' => 'getIsWeight',
        'aux_entity' => 'getAuxEntity',
        'barcode_entity' => 'getBarcodeEntity',
        'price_entity' => 'getPriceEntity',
        'qty' => 'getQty',
        'images' => 'getImages',
        'shelf_status' => 'getShelfStatus',
        'min_price' => 'getMinPrice',
        'max_price' => 'getMaxPrice',
        'sale_unit_min_price' => 'getSaleUnitMinPrice',
        'sale_unit_max_price' => 'getSaleUnitMaxPrice',
        'is_asst_attr' => 'getIsAsstAttr',
        'aux_groups' => 'getAuxGroups'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['base_unit_id'] = isset($data['base_unit_id']) ? $data['base_unit_id'] : null;
        $this->container['base_unit_name'] = isset($data['base_unit_name']) ? $data['base_unit_name'] : null;
        $this->container['barcode'] = isset($data['barcode']) ? $data['barcode'] : null;
        $this->container['model'] = isset($data['model']) ? $data['model'] : null;
        $this->container['brand_id'] = isset($data['brand_id']) ? $data['brand_id'] : null;
        $this->container['brand_name'] = isset($data['brand_name']) ? $data['brand_name'] : null;
        $this->container['brand_number'] = isset($data['brand_number']) ? $data['brand_number'] : null;
        $this->container['is_multi_unit'] = isset($data['is_multi_unit']) ? $data['is_multi_unit'] : null;
        $this->container['sale_unit_id'] = isset($data['sale_unit_id']) ? $data['sale_unit_id'] : null;
        $this->container['sale_unit_name'] = isset($data['sale_unit_name']) ? $data['sale_unit_name'] : null;
        $this->container['sale_unit_number'] = isset($data['sale_unit_number']) ? $data['sale_unit_number'] : null;
        $this->container['is_serial'] = isset($data['is_serial']) ? $data['is_serial'] : null;
        $this->container['is_batch'] = isset($data['is_batch']) ? $data['is_batch'] : null;
        $this->container['is_sale'] = isset($data['is_sale']) ? $data['is_sale'] : null;
        $this->container['is_weight'] = isset($data['is_weight']) ? $data['is_weight'] : null;
        $this->container['aux_entity'] = isset($data['aux_entity']) ? $data['aux_entity'] : null;
        $this->container['barcode_entity'] = isset($data['barcode_entity']) ? $data['barcode_entity'] : null;
        $this->container['price_entity'] = isset($data['price_entity']) ? $data['price_entity'] : null;
        $this->container['qty'] = isset($data['qty']) ? $data['qty'] : null;
        $this->container['images'] = isset($data['images']) ? $data['images'] : null;
        $this->container['shelf_status'] = isset($data['shelf_status']) ? $data['shelf_status'] : null;
        $this->container['min_price'] = isset($data['min_price']) ? $data['min_price'] : null;
        $this->container['max_price'] = isset($data['max_price']) ? $data['max_price'] : null;
        $this->container['sale_unit_min_price'] = isset($data['sale_unit_min_price']) ? $data['sale_unit_min_price'] : null;
        $this->container['sale_unit_max_price'] = isset($data['sale_unit_max_price']) ? $data['sale_unit_max_price'] : null;
        $this->container['is_asst_attr'] = isset($data['is_asst_attr']) ? $data['is_asst_attr'] : null;
        $this->container['aux_groups'] = isset($data['aux_groups']) ? $data['aux_groups'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number number
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets base_unit_id
     *
     * @return string
     */
    public function getBaseUnitId()
    {
        return $this->container['base_unit_id'];
    }

    /**
     * Sets base_unit_id
     *
     * @param string $base_unit_id base_unit_id
     *
     * @return $this
     */
    public function setBaseUnitId($base_unit_id)
    {
        $this->container['base_unit_id'] = $base_unit_id;

        return $this;
    }

    /**
     * Gets base_unit_name
     *
     * @return string
     */
    public function getBaseUnitName()
    {
        return $this->container['base_unit_name'];
    }

    /**
     * Sets base_unit_name
     *
     * @param string $base_unit_name base_unit_name
     *
     * @return $this
     */
    public function setBaseUnitName($base_unit_name)
    {
        $this->container['base_unit_name'] = $base_unit_name;

        return $this;
    }

    /**
     * Gets barcode
     *
     * @return string
     */
    public function getBarcode()
    {
        return $this->container['barcode'];
    }

    /**
     * Sets barcode
     *
     * @param string $barcode barcode
     *
     * @return $this
     */
    public function setBarcode($barcode)
    {
        $this->container['barcode'] = $barcode;

        return $this;
    }

    /**
     * Gets model
     *
     * @return string
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param string $model model
     *
     * @return $this
     */
    public function setModel($model)
    {
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets brand_id
     *
     * @return string
     */
    public function getBrandId()
    {
        return $this->container['brand_id'];
    }

    /**
     * Sets brand_id
     *
     * @param string $brand_id brand_id
     *
     * @return $this
     */
    public function setBrandId($brand_id)
    {
        $this->container['brand_id'] = $brand_id;

        return $this;
    }

    /**
     * Gets brand_name
     *
     * @return string
     */
    public function getBrandName()
    {
        return $this->container['brand_name'];
    }

    /**
     * Sets brand_name
     *
     * @param string $brand_name brand_name
     *
     * @return $this
     */
    public function setBrandName($brand_name)
    {
        $this->container['brand_name'] = $brand_name;

        return $this;
    }

    /**
     * Gets brand_number
     *
     * @return string
     */
    public function getBrandNumber()
    {
        return $this->container['brand_number'];
    }

    /**
     * Sets brand_number
     *
     * @param string $brand_number brand_number
     *
     * @return $this
     */
    public function setBrandNumber($brand_number)
    {
        $this->container['brand_number'] = $brand_number;

        return $this;
    }

    /**
     * Gets is_multi_unit
     *
     * @return bool
     */
    public function getIsMultiUnit()
    {
        return $this->container['is_multi_unit'];
    }

    /**
     * Sets is_multi_unit
     *
     * @param bool $is_multi_unit is_multi_unit
     *
     * @return $this
     */
    public function setIsMultiUnit($is_multi_unit)
    {
        $this->container['is_multi_unit'] = $is_multi_unit;

        return $this;
    }

    /**
     * Gets sale_unit_id
     *
     * @return string
     */
    public function getSaleUnitId()
    {
        return $this->container['sale_unit_id'];
    }

    /**
     * Sets sale_unit_id
     *
     * @param string $sale_unit_id sale_unit_id
     *
     * @return $this
     */
    public function setSaleUnitId($sale_unit_id)
    {
        $this->container['sale_unit_id'] = $sale_unit_id;

        return $this;
    }

    /**
     * Gets sale_unit_name
     *
     * @return string
     */
    public function getSaleUnitName()
    {
        return $this->container['sale_unit_name'];
    }

    /**
     * Sets sale_unit_name
     *
     * @param string $sale_unit_name sale_unit_name
     *
     * @return $this
     */
    public function setSaleUnitName($sale_unit_name)
    {
        $this->container['sale_unit_name'] = $sale_unit_name;

        return $this;
    }

    /**
     * Gets sale_unit_number
     *
     * @return string
     */
    public function getSaleUnitNumber()
    {
        return $this->container['sale_unit_number'];
    }

    /**
     * Sets sale_unit_number
     *
     * @param string $sale_unit_number sale_unit_number
     *
     * @return $this
     */
    public function setSaleUnitNumber($sale_unit_number)
    {
        $this->container['sale_unit_number'] = $sale_unit_number;

        return $this;
    }

    /**
     * Gets is_serial
     *
     * @return bool
     */
    public function getIsSerial()
    {
        return $this->container['is_serial'];
    }

    /**
     * Sets is_serial
     *
     * @param bool $is_serial is_serial
     *
     * @return $this
     */
    public function setIsSerial($is_serial)
    {
        $this->container['is_serial'] = $is_serial;

        return $this;
    }

    /**
     * Gets is_batch
     *
     * @return bool
     */
    public function getIsBatch()
    {
        return $this->container['is_batch'];
    }

    /**
     * Sets is_batch
     *
     * @param bool $is_batch is_batch
     *
     * @return $this
     */
    public function setIsBatch($is_batch)
    {
        $this->container['is_batch'] = $is_batch;

        return $this;
    }

    /**
     * Gets is_sale
     *
     * @return bool
     */
    public function getIsSale()
    {
        return $this->container['is_sale'];
    }

    /**
     * Sets is_sale
     *
     * @param bool $is_sale is_sale
     *
     * @return $this
     */
    public function setIsSale($is_sale)
    {
        $this->container['is_sale'] = $is_sale;

        return $this;
    }

    /**
     * Gets is_weight
     *
     * @return bool
     */
    public function getIsWeight()
    {
        return $this->container['is_weight'];
    }

    /**
     * Sets is_weight
     *
     * @param bool $is_weight is_weight
     *
     * @return $this
     */
    public function setIsWeight($is_weight)
    {
        $this->container['is_weight'] = $is_weight;

        return $this;
    }

    /**
     * Gets aux_entity
     *
     * @return \com_kingdee_service\data\entity\Auxentity[]
     */
    public function getAuxEntity()
    {
        return $this->container['aux_entity'];
    }

    /**
     * Sets aux_entity
     *
     * @param \com_kingdee_service\data\entity\Auxentity[] $aux_entity aux_entity
     *
     * @return $this
     */
    public function setAuxEntity($aux_entity)
    {
        $this->container['aux_entity'] = $aux_entity;

        return $this;
    }

    /**
     * Gets barcode_entity
     *
     * @return \com_kingdee_service\data\entity\Barcodeentity[]
     */
    public function getBarcodeEntity()
    {
        return $this->container['barcode_entity'];
    }

    /**
     * Sets barcode_entity
     *
     * @param \com_kingdee_service\data\entity\Barcodeentity[] $barcode_entity barcode_entity
     *
     * @return $this
     */
    public function setBarcodeEntity($barcode_entity)
    {
        $this->container['barcode_entity'] = $barcode_entity;

        return $this;
    }

    /**
     * Gets price_entity
     *
     * @return \com_kingdee_service\data\entity\Priceentity[]
     */
    public function getPriceEntity()
    {
        return $this->container['price_entity'];
    }

    /**
     * Sets price_entity
     *
     * @param \com_kingdee_service\data\entity\Priceentity[] $price_entity price_entity
     *
     * @return $this
     */
    public function setPriceEntity($price_entity)
    {
        $this->container['price_entity'] = $price_entity;

        return $this;
    }

    /**
     * Gets qty
     *
     * @return string
     */
    public function getQty()
    {
        return $this->container['qty'];
    }

    /**
     * Sets qty
     *
     * @param string $qty qty
     *
     * @return $this
     */
    public function setQty($qty)
    {
        $this->container['qty'] = $qty;

        return $this;
    }

    /**
     * Gets images
     *
     * @return \com_kingdee_service\data\entity\Image[]
     */
    public function getImages()
    {
        return $this->container['images'];
    }

    /**
     * Sets images
     *
     * @param \com_kingdee_service\data\entity\Image[] $images images
     *
     * @return $this
     */
    public function setImages($images)
    {
        $this->container['images'] = $images;

        return $this;
    }

    /**
     * Gets shelf_status
     *
     * @return string
     */
    public function getShelfStatus()
    {
        return $this->container['shelf_status'];
    }

    /**
     * Sets shelf_status
     *
     * @param string $shelf_status shelf_status
     *
     * @return $this
     */
    public function setShelfStatus($shelf_status)
    {
        $this->container['shelf_status'] = $shelf_status;

        return $this;
    }

    /**
     * Gets min_price
     *
     * @return string
     */
    public function getMinPrice()
    {
        return $this->container['min_price'];
    }

    /**
     * Sets min_price
     *
     * @param string $min_price min_price
     *
     * @return $this
     */
    public function setMinPrice($min_price)
    {
        $this->container['min_price'] = $min_price;

        return $this;
    }

    /**
     * Gets max_price
     *
     * @return string
     */
    public function getMaxPrice()
    {
        return $this->container['max_price'];
    }

    /**
     * Sets max_price
     *
     * @param string $max_price max_price
     *
     * @return $this
     */
    public function setMaxPrice($max_price)
    {
        $this->container['max_price'] = $max_price;

        return $this;
    }

    /**
     * Gets sale_unit_min_price
     *
     * @return string
     */
    public function getSaleUnitMinPrice()
    {
        return $this->container['sale_unit_min_price'];
    }

    /**
     * Sets sale_unit_min_price
     *
     * @param string $sale_unit_min_price sale_unit_min_price
     *
     * @return $this
     */
    public function setSaleUnitMinPrice($sale_unit_min_price)
    {
        $this->container['sale_unit_min_price'] = $sale_unit_min_price;

        return $this;
    }

    /**
     * Gets sale_unit_max_price
     *
     * @return string
     */
    public function getSaleUnitMaxPrice()
    {
        return $this->container['sale_unit_max_price'];
    }

    /**
     * Sets sale_unit_max_price
     *
     * @param string $sale_unit_max_price sale_unit_max_price
     *
     * @return $this
     */
    public function setSaleUnitMaxPrice($sale_unit_max_price)
    {
        $this->container['sale_unit_max_price'] = $sale_unit_max_price;

        return $this;
    }

    /**
     * Gets is_asst_attr
     *
     * @return bool
     */
    public function getIsAsstAttr()
    {
        return $this->container['is_asst_attr'];
    }

    /**
     * Sets is_asst_attr
     *
     * @param bool $is_asst_attr is_asst_attr
     *
     * @return $this
     */
    public function setIsAsstAttr($is_asst_attr)
    {
        $this->container['is_asst_attr'] = $is_asst_attr;

        return $this;
    }

    /**
     * Gets aux_groups
     *
     * @return \com_kingdee_service\data\entity\AuxGroup[]
     */
    public function getAuxGroups()
    {
        return $this->container['aux_groups'];
    }

    /**
     * Sets aux_groups
     *
     * @param \com_kingdee_service\data\entity\AuxGroup[] $aux_groups aux_groups
     *
     * @return $this
     */
    public function setAuxGroups($aux_groups)
    {
        $this->container['aux_groups'] = $aux_groups;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


