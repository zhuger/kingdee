<?php
/**
 * PriceReply
 *
 * PHP version 5
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 星辰
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com_kingdee_service\data\entity;

use \ArrayAccess;
use \com_kingdee_service\ObjectSerializer;

/**
 * PriceReply Class Doc Comment
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PriceReply implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PriceReply';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'aux_prop_id' => 'string',
        'unit_id' => 'string',
        'qty' => 'string',
        'price' => 'double',
        'barcode' => 'string',
        'dis_rate' => 'double',
        'dis_count' => 'double',
        'dis_amount' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'aux_prop_id' => null,
        'unit_id' => null,
        'qty' => null,
        'price' => 'double',
        'barcode' => null,
        'dis_rate' => 'double',
        'dis_count' => 'double',
        'dis_amount' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'aux_prop_id' => 'aux_prop_id',
        'unit_id' => 'unit_id',
        'qty' => 'qty',
        'price' => 'price',
        'barcode' => 'barcode',
        'dis_rate' => 'dis_rate',
        'dis_count' => 'dis_count',
        'dis_amount' => 'dis_amount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'aux_prop_id' => 'setAuxPropId',
        'unit_id' => 'setUnitId',
        'qty' => 'setQty',
        'price' => 'setPrice',
        'barcode' => 'setBarcode',
        'dis_rate' => 'setDisRate',
        'dis_count' => 'setDisCount',
        'dis_amount' => 'setDisAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'aux_prop_id' => 'getAuxPropId',
        'unit_id' => 'getUnitId',
        'qty' => 'getQty',
        'price' => 'getPrice',
        'barcode' => 'getBarcode',
        'dis_rate' => 'getDisRate',
        'dis_count' => 'getDisCount',
        'dis_amount' => 'getDisAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['aux_prop_id'] = isset($data['aux_prop_id']) ? $data['aux_prop_id'] : null;
        $this->container['unit_id'] = isset($data['unit_id']) ? $data['unit_id'] : null;
        $this->container['qty'] = isset($data['qty']) ? $data['qty'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['barcode'] = isset($data['barcode']) ? $data['barcode'] : null;
        $this->container['dis_rate'] = isset($data['dis_rate']) ? $data['dis_rate'] : null;
        $this->container['dis_count'] = isset($data['dis_count']) ? $data['dis_count'] : null;
        $this->container['dis_amount'] = isset($data['dis_amount']) ? $data['dis_amount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets aux_prop_id
     *
     * @return string
     */
    public function getAuxPropId()
    {
        return $this->container['aux_prop_id'];
    }

    /**
     * Sets aux_prop_id
     *
     * @param string $aux_prop_id aux_prop_id
     *
     * @return $this
     */
    public function setAuxPropId($aux_prop_id)
    {
        $this->container['aux_prop_id'] = $aux_prop_id;

        return $this;
    }

    /**
     * Gets unit_id
     *
     * @return string
     */
    public function getUnitId()
    {
        return $this->container['unit_id'];
    }

    /**
     * Sets unit_id
     *
     * @param string $unit_id unit_id
     *
     * @return $this
     */
    public function setUnitId($unit_id)
    {
        $this->container['unit_id'] = $unit_id;

        return $this;
    }

    /**
     * Gets qty
     *
     * @return string
     */
    public function getQty()
    {
        return $this->container['qty'];
    }

    /**
     * Sets qty
     *
     * @param string $qty qty
     *
     * @return $this
     */
    public function setQty($qty)
    {
        $this->container['qty'] = $qty;

        return $this;
    }

    /**
     * Gets price
     *
     * @return double
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param double $price price
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets barcode
     *
     * @return string
     */
    public function getBarcode()
    {
        return $this->container['barcode'];
    }

    /**
     * Sets barcode
     *
     * @param string $barcode barcode
     *
     * @return $this
     */
    public function setBarcode($barcode)
    {
        $this->container['barcode'] = $barcode;

        return $this;
    }

    /**
     * Gets dis_rate
     *
     * @return double
     */
    public function getDisRate()
    {
        return $this->container['dis_rate'];
    }

    /**
     * Sets dis_rate
     *
     * @param double $dis_rate dis_rate
     *
     * @return $this
     */
    public function setDisRate($dis_rate)
    {
        $this->container['dis_rate'] = $dis_rate;

        return $this;
    }

    /**
     * Gets dis_count
     *
     * @return double
     */
    public function getDisCount()
    {
        return $this->container['dis_count'];
    }

    /**
     * Sets dis_count
     *
     * @param double $dis_count dis_count
     *
     * @return $this
     */
    public function setDisCount($dis_count)
    {
        $this->container['dis_count'] = $dis_count;

        return $this;
    }

    /**
     * Gets dis_amount
     *
     * @return double
     */
    public function getDisAmount()
    {
        return $this->container['dis_amount'];
    }

    /**
     * Sets dis_amount
     *
     * @param double $dis_amount dis_amount
     *
     * @return $this
     */
    public function setDisAmount($dis_amount)
    {
        $this->container['dis_amount'] = $dis_amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


