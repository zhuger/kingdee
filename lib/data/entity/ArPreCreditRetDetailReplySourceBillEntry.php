<?php
/**
 * ArPreCreditRetDetailReplySourceBillEntry
 *
 * PHP version 5
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 星辰
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com_kingdee_service\data\entity;

use \ArrayAccess;
use \com_kingdee_service\ObjectSerializer;

/**
 * ArPreCreditRetDetailReplySourceBillEntry Class Doc Comment
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ArPreCreditRetDetailReplySourceBillEntry implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ArPreCreditRetDetailReply.SourceBillEntry';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'src_bill_id' => 'string',
        'src_bill_type_id' => 'string',
        'src_bill_type_name' => 'string',
        'src_bill_no' => 'string',
        'src_bill_amount' => 'string',
        'settle_amount' => 'string',
        'un_settle_amount' => 'string',
        'src_bill_comment' => 'string',
        'src_comment' => 'string',
        'cur_settle_amount' => 'string',
        'cur_settle_amount_for' => 'string',
        'src_bill_currency_id' => 'string',
        'src_bill_currency_name' => 'string',
        'src_bill_currency_number' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'src_bill_id' => null,
        'src_bill_type_id' => null,
        'src_bill_type_name' => null,
        'src_bill_no' => null,
        'src_bill_amount' => null,
        'settle_amount' => null,
        'un_settle_amount' => null,
        'src_bill_comment' => null,
        'src_comment' => null,
        'cur_settle_amount' => null,
        'cur_settle_amount_for' => null,
        'src_bill_currency_id' => null,
        'src_bill_currency_name' => null,
        'src_bill_currency_number' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'src_bill_id' => 'src_bill_id',
        'src_bill_type_id' => 'src_bill_type_id',
        'src_bill_type_name' => 'src_bill_type_name',
        'src_bill_no' => 'src_bill_no',
        'src_bill_amount' => 'src_bill_amount',
        'settle_amount' => 'settle_amount',
        'un_settle_amount' => 'un_settle_amount',
        'src_bill_comment' => 'src_bill_comment',
        'src_comment' => 'src_comment',
        'cur_settle_amount' => 'cur_settle_amount',
        'cur_settle_amount_for' => 'cur_settle_amount_for',
        'src_bill_currency_id' => 'src_bill_currency_id',
        'src_bill_currency_name' => 'src_bill_currency_name',
        'src_bill_currency_number' => 'src_bill_currency_number'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'src_bill_id' => 'setSrcBillId',
        'src_bill_type_id' => 'setSrcBillTypeId',
        'src_bill_type_name' => 'setSrcBillTypeName',
        'src_bill_no' => 'setSrcBillNo',
        'src_bill_amount' => 'setSrcBillAmount',
        'settle_amount' => 'setSettleAmount',
        'un_settle_amount' => 'setUnSettleAmount',
        'src_bill_comment' => 'setSrcBillComment',
        'src_comment' => 'setSrcComment',
        'cur_settle_amount' => 'setCurSettleAmount',
        'cur_settle_amount_for' => 'setCurSettleAmountFor',
        'src_bill_currency_id' => 'setSrcBillCurrencyId',
        'src_bill_currency_name' => 'setSrcBillCurrencyName',
        'src_bill_currency_number' => 'setSrcBillCurrencyNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'src_bill_id' => 'getSrcBillId',
        'src_bill_type_id' => 'getSrcBillTypeId',
        'src_bill_type_name' => 'getSrcBillTypeName',
        'src_bill_no' => 'getSrcBillNo',
        'src_bill_amount' => 'getSrcBillAmount',
        'settle_amount' => 'getSettleAmount',
        'un_settle_amount' => 'getUnSettleAmount',
        'src_bill_comment' => 'getSrcBillComment',
        'src_comment' => 'getSrcComment',
        'cur_settle_amount' => 'getCurSettleAmount',
        'cur_settle_amount_for' => 'getCurSettleAmountFor',
        'src_bill_currency_id' => 'getSrcBillCurrencyId',
        'src_bill_currency_name' => 'getSrcBillCurrencyName',
        'src_bill_currency_number' => 'getSrcBillCurrencyNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['src_bill_id'] = isset($data['src_bill_id']) ? $data['src_bill_id'] : null;
        $this->container['src_bill_type_id'] = isset($data['src_bill_type_id']) ? $data['src_bill_type_id'] : null;
        $this->container['src_bill_type_name'] = isset($data['src_bill_type_name']) ? $data['src_bill_type_name'] : null;
        $this->container['src_bill_no'] = isset($data['src_bill_no']) ? $data['src_bill_no'] : null;
        $this->container['src_bill_amount'] = isset($data['src_bill_amount']) ? $data['src_bill_amount'] : null;
        $this->container['settle_amount'] = isset($data['settle_amount']) ? $data['settle_amount'] : null;
        $this->container['un_settle_amount'] = isset($data['un_settle_amount']) ? $data['un_settle_amount'] : null;
        $this->container['src_bill_comment'] = isset($data['src_bill_comment']) ? $data['src_bill_comment'] : null;
        $this->container['src_comment'] = isset($data['src_comment']) ? $data['src_comment'] : null;
        $this->container['cur_settle_amount'] = isset($data['cur_settle_amount']) ? $data['cur_settle_amount'] : null;
        $this->container['cur_settle_amount_for'] = isset($data['cur_settle_amount_for']) ? $data['cur_settle_amount_for'] : null;
        $this->container['src_bill_currency_id'] = isset($data['src_bill_currency_id']) ? $data['src_bill_currency_id'] : null;
        $this->container['src_bill_currency_name'] = isset($data['src_bill_currency_name']) ? $data['src_bill_currency_name'] : null;
        $this->container['src_bill_currency_number'] = isset($data['src_bill_currency_number']) ? $data['src_bill_currency_number'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets src_bill_id
     *
     * @return string
     */
    public function getSrcBillId()
    {
        return $this->container['src_bill_id'];
    }

    /**
     * Sets src_bill_id
     *
     * @param string $src_bill_id src_bill_id
     *
     * @return $this
     */
    public function setSrcBillId($src_bill_id)
    {
        $this->container['src_bill_id'] = $src_bill_id;

        return $this;
    }

    /**
     * Gets src_bill_type_id
     *
     * @return string
     */
    public function getSrcBillTypeId()
    {
        return $this->container['src_bill_type_id'];
    }

    /**
     * Sets src_bill_type_id
     *
     * @param string $src_bill_type_id src_bill_type_id
     *
     * @return $this
     */
    public function setSrcBillTypeId($src_bill_type_id)
    {
        $this->container['src_bill_type_id'] = $src_bill_type_id;

        return $this;
    }

    /**
     * Gets src_bill_type_name
     *
     * @return string
     */
    public function getSrcBillTypeName()
    {
        return $this->container['src_bill_type_name'];
    }

    /**
     * Sets src_bill_type_name
     *
     * @param string $src_bill_type_name src_bill_type_name
     *
     * @return $this
     */
    public function setSrcBillTypeName($src_bill_type_name)
    {
        $this->container['src_bill_type_name'] = $src_bill_type_name;

        return $this;
    }

    /**
     * Gets src_bill_no
     *
     * @return string
     */
    public function getSrcBillNo()
    {
        return $this->container['src_bill_no'];
    }

    /**
     * Sets src_bill_no
     *
     * @param string $src_bill_no src_bill_no
     *
     * @return $this
     */
    public function setSrcBillNo($src_bill_no)
    {
        $this->container['src_bill_no'] = $src_bill_no;

        return $this;
    }

    /**
     * Gets src_bill_amount
     *
     * @return string
     */
    public function getSrcBillAmount()
    {
        return $this->container['src_bill_amount'];
    }

    /**
     * Sets src_bill_amount
     *
     * @param string $src_bill_amount src_bill_amount
     *
     * @return $this
     */
    public function setSrcBillAmount($src_bill_amount)
    {
        $this->container['src_bill_amount'] = $src_bill_amount;

        return $this;
    }

    /**
     * Gets settle_amount
     *
     * @return string
     */
    public function getSettleAmount()
    {
        return $this->container['settle_amount'];
    }

    /**
     * Sets settle_amount
     *
     * @param string $settle_amount settle_amount
     *
     * @return $this
     */
    public function setSettleAmount($settle_amount)
    {
        $this->container['settle_amount'] = $settle_amount;

        return $this;
    }

    /**
     * Gets un_settle_amount
     *
     * @return string
     */
    public function getUnSettleAmount()
    {
        return $this->container['un_settle_amount'];
    }

    /**
     * Sets un_settle_amount
     *
     * @param string $un_settle_amount un_settle_amount
     *
     * @return $this
     */
    public function setUnSettleAmount($un_settle_amount)
    {
        $this->container['un_settle_amount'] = $un_settle_amount;

        return $this;
    }

    /**
     * Gets src_bill_comment
     *
     * @return string
     */
    public function getSrcBillComment()
    {
        return $this->container['src_bill_comment'];
    }

    /**
     * Sets src_bill_comment
     *
     * @param string $src_bill_comment src_bill_comment
     *
     * @return $this
     */
    public function setSrcBillComment($src_bill_comment)
    {
        $this->container['src_bill_comment'] = $src_bill_comment;

        return $this;
    }

    /**
     * Gets src_comment
     *
     * @return string
     */
    public function getSrcComment()
    {
        return $this->container['src_comment'];
    }

    /**
     * Sets src_comment
     *
     * @param string $src_comment src_comment
     *
     * @return $this
     */
    public function setSrcComment($src_comment)
    {
        $this->container['src_comment'] = $src_comment;

        return $this;
    }

    /**
     * Gets cur_settle_amount
     *
     * @return string
     */
    public function getCurSettleAmount()
    {
        return $this->container['cur_settle_amount'];
    }

    /**
     * Sets cur_settle_amount
     *
     * @param string $cur_settle_amount cur_settle_amount
     *
     * @return $this
     */
    public function setCurSettleAmount($cur_settle_amount)
    {
        $this->container['cur_settle_amount'] = $cur_settle_amount;

        return $this;
    }

    /**
     * Gets cur_settle_amount_for
     *
     * @return string
     */
    public function getCurSettleAmountFor()
    {
        return $this->container['cur_settle_amount_for'];
    }

    /**
     * Sets cur_settle_amount_for
     *
     * @param string $cur_settle_amount_for cur_settle_amount_for
     *
     * @return $this
     */
    public function setCurSettleAmountFor($cur_settle_amount_for)
    {
        $this->container['cur_settle_amount_for'] = $cur_settle_amount_for;

        return $this;
    }

    /**
     * Gets src_bill_currency_id
     *
     * @return string
     */
    public function getSrcBillCurrencyId()
    {
        return $this->container['src_bill_currency_id'];
    }

    /**
     * Sets src_bill_currency_id
     *
     * @param string $src_bill_currency_id src_bill_currency_id
     *
     * @return $this
     */
    public function setSrcBillCurrencyId($src_bill_currency_id)
    {
        $this->container['src_bill_currency_id'] = $src_bill_currency_id;

        return $this;
    }

    /**
     * Gets src_bill_currency_name
     *
     * @return string
     */
    public function getSrcBillCurrencyName()
    {
        return $this->container['src_bill_currency_name'];
    }

    /**
     * Sets src_bill_currency_name
     *
     * @param string $src_bill_currency_name src_bill_currency_name
     *
     * @return $this
     */
    public function setSrcBillCurrencyName($src_bill_currency_name)
    {
        $this->container['src_bill_currency_name'] = $src_bill_currency_name;

        return $this;
    }

    /**
     * Gets src_bill_currency_number
     *
     * @return string
     */
    public function getSrcBillCurrencyNumber()
    {
        return $this->container['src_bill_currency_number'];
    }

    /**
     * Sets src_bill_currency_number
     *
     * @param string $src_bill_currency_number src_bill_currency_number
     *
     * @return $this
     */
    public function setSrcBillCurrencyNumber($src_bill_currency_number)
    {
        $this->container['src_bill_currency_number'] = $src_bill_currency_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


