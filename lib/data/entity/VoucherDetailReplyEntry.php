<?php
/**
 * VoucherDetailReplyEntry
 *
 * PHP version 5
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * æ˜Ÿè¾°
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com_kingdee_service\data\entity;

use \ArrayAccess;
use \com_kingdee_service\ObjectSerializer;

/**
 * VoucherDetailReplyEntry Class Doc Comment
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VoucherDetailReplyEntry implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'VoucherDetailReply.Entry';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'seq' => 'string',
        'explanation' => 'string',
        'account_id' => 'string',
        'account_name' => 'string',
        'account_number' => 'string',
        'measure_unit_id' => 'string',
        'measure_unit_name' => 'string',
        'measure_unit_number' => 'string',
        'currency_id' => 'string',
        'currency_name' => 'string',
        'currency_number' => 'string',
        'debit_amount' => 'string',
        'credit_amount' => 'string',
        'amount_for' => 'string',
        'price' => 'string',
        'quantity' => 'string',
        'dc' => 'string',
        'assist' => '\com_kingdee_service\data\entity\VoucherDetailReplyAssist[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'seq' => null,
        'explanation' => null,
        'account_id' => null,
        'account_name' => null,
        'account_number' => null,
        'measure_unit_id' => null,
        'measure_unit_name' => null,
        'measure_unit_number' => null,
        'currency_id' => null,
        'currency_name' => null,
        'currency_number' => null,
        'debit_amount' => null,
        'credit_amount' => null,
        'amount_for' => null,
        'price' => null,
        'quantity' => null,
        'dc' => null,
        'assist' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'seq' => 'seq',
        'explanation' => 'explanation',
        'account_id' => 'account_id',
        'account_name' => 'account_name',
        'account_number' => 'account_number',
        'measure_unit_id' => 'measure_unit_id',
        'measure_unit_name' => 'measure_unit_name',
        'measure_unit_number' => 'measure_unit_number',
        'currency_id' => 'currency_id',
        'currency_name' => 'currency_name',
        'currency_number' => 'currency_number',
        'debit_amount' => 'debit_amount',
        'credit_amount' => 'credit_amount',
        'amount_for' => 'amount_for',
        'price' => 'price',
        'quantity' => 'quantity',
        'dc' => 'dc',
        'assist' => 'assist'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'seq' => 'setSeq',
        'explanation' => 'setExplanation',
        'account_id' => 'setAccountId',
        'account_name' => 'setAccountName',
        'account_number' => 'setAccountNumber',
        'measure_unit_id' => 'setMeasureUnitId',
        'measure_unit_name' => 'setMeasureUnitName',
        'measure_unit_number' => 'setMeasureUnitNumber',
        'currency_id' => 'setCurrencyId',
        'currency_name' => 'setCurrencyName',
        'currency_number' => 'setCurrencyNumber',
        'debit_amount' => 'setDebitAmount',
        'credit_amount' => 'setCreditAmount',
        'amount_for' => 'setAmountFor',
        'price' => 'setPrice',
        'quantity' => 'setQuantity',
        'dc' => 'setDc',
        'assist' => 'setAssist'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'seq' => 'getSeq',
        'explanation' => 'getExplanation',
        'account_id' => 'getAccountId',
        'account_name' => 'getAccountName',
        'account_number' => 'getAccountNumber',
        'measure_unit_id' => 'getMeasureUnitId',
        'measure_unit_name' => 'getMeasureUnitName',
        'measure_unit_number' => 'getMeasureUnitNumber',
        'currency_id' => 'getCurrencyId',
        'currency_name' => 'getCurrencyName',
        'currency_number' => 'getCurrencyNumber',
        'debit_amount' => 'getDebitAmount',
        'credit_amount' => 'getCreditAmount',
        'amount_for' => 'getAmountFor',
        'price' => 'getPrice',
        'quantity' => 'getQuantity',
        'dc' => 'getDc',
        'assist' => 'getAssist'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['seq'] = isset($data['seq']) ? $data['seq'] : null;
        $this->container['explanation'] = isset($data['explanation']) ? $data['explanation'] : null;
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['account_name'] = isset($data['account_name']) ? $data['account_name'] : null;
        $this->container['account_number'] = isset($data['account_number']) ? $data['account_number'] : null;
        $this->container['measure_unit_id'] = isset($data['measure_unit_id']) ? $data['measure_unit_id'] : null;
        $this->container['measure_unit_name'] = isset($data['measure_unit_name']) ? $data['measure_unit_name'] : null;
        $this->container['measure_unit_number'] = isset($data['measure_unit_number']) ? $data['measure_unit_number'] : null;
        $this->container['currency_id'] = isset($data['currency_id']) ? $data['currency_id'] : null;
        $this->container['currency_name'] = isset($data['currency_name']) ? $data['currency_name'] : null;
        $this->container['currency_number'] = isset($data['currency_number']) ? $data['currency_number'] : null;
        $this->container['debit_amount'] = isset($data['debit_amount']) ? $data['debit_amount'] : null;
        $this->container['credit_amount'] = isset($data['credit_amount']) ? $data['credit_amount'] : null;
        $this->container['amount_for'] = isset($data['amount_for']) ? $data['amount_for'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['dc'] = isset($data['dc']) ? $data['dc'] : null;
        $this->container['assist'] = isset($data['assist']) ? $data['assist'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets seq
     *
     * @return string
     */
    public function getSeq()
    {
        return $this->container['seq'];
    }

    /**
     * Sets seq
     *
     * @param string $seq seq
     *
     * @return $this
     */
    public function setSeq($seq)
    {
        $this->container['seq'] = $seq;

        return $this;
    }

    /**
     * Gets explanation
     *
     * @return string
     */
    public function getExplanation()
    {
        return $this->container['explanation'];
    }

    /**
     * Sets explanation
     *
     * @param string $explanation explanation
     *
     * @return $this
     */
    public function setExplanation($explanation)
    {
        $this->container['explanation'] = $explanation;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets account_name
     *
     * @return string
     */
    public function getAccountName()
    {
        return $this->container['account_name'];
    }

    /**
     * Sets account_name
     *
     * @param string $account_name account_name
     *
     * @return $this
     */
    public function setAccountName($account_name)
    {
        $this->container['account_name'] = $account_name;

        return $this;
    }

    /**
     * Gets account_number
     *
     * @return string
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string $account_number account_number
     *
     * @return $this
     */
    public function setAccountNumber($account_number)
    {
        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets measure_unit_id
     *
     * @return string
     */
    public function getMeasureUnitId()
    {
        return $this->container['measure_unit_id'];
    }

    /**
     * Sets measure_unit_id
     *
     * @param string $measure_unit_id measure_unit_id
     *
     * @return $this
     */
    public function setMeasureUnitId($measure_unit_id)
    {
        $this->container['measure_unit_id'] = $measure_unit_id;

        return $this;
    }

    /**
     * Gets measure_unit_name
     *
     * @return string
     */
    public function getMeasureUnitName()
    {
        return $this->container['measure_unit_name'];
    }

    /**
     * Sets measure_unit_name
     *
     * @param string $measure_unit_name measure_unit_name
     *
     * @return $this
     */
    public function setMeasureUnitName($measure_unit_name)
    {
        $this->container['measure_unit_name'] = $measure_unit_name;

        return $this;
    }

    /**
     * Gets measure_unit_number
     *
     * @return string
     */
    public function getMeasureUnitNumber()
    {
        return $this->container['measure_unit_number'];
    }

    /**
     * Sets measure_unit_number
     *
     * @param string $measure_unit_number measure_unit_number
     *
     * @return $this
     */
    public function setMeasureUnitNumber($measure_unit_number)
    {
        $this->container['measure_unit_number'] = $measure_unit_number;

        return $this;
    }

    /**
     * Gets currency_id
     *
     * @return string
     */
    public function getCurrencyId()
    {
        return $this->container['currency_id'];
    }

    /**
     * Sets currency_id
     *
     * @param string $currency_id currency_id
     *
     * @return $this
     */
    public function setCurrencyId($currency_id)
    {
        $this->container['currency_id'] = $currency_id;

        return $this;
    }

    /**
     * Gets currency_name
     *
     * @return string
     */
    public function getCurrencyName()
    {
        return $this->container['currency_name'];
    }

    /**
     * Sets currency_name
     *
     * @param string $currency_name currency_name
     *
     * @return $this
     */
    public function setCurrencyName($currency_name)
    {
        $this->container['currency_name'] = $currency_name;

        return $this;
    }

    /**
     * Gets currency_number
     *
     * @return string
     */
    public function getCurrencyNumber()
    {
        return $this->container['currency_number'];
    }

    /**
     * Sets currency_number
     *
     * @param string $currency_number currency_number
     *
     * @return $this
     */
    public function setCurrencyNumber($currency_number)
    {
        $this->container['currency_number'] = $currency_number;

        return $this;
    }

    /**
     * Gets debit_amount
     *
     * @return string
     */
    public function getDebitAmount()
    {
        return $this->container['debit_amount'];
    }

    /**
     * Sets debit_amount
     *
     * @param string $debit_amount debit_amount
     *
     * @return $this
     */
    public function setDebitAmount($debit_amount)
    {
        $this->container['debit_amount'] = $debit_amount;

        return $this;
    }

    /**
     * Gets credit_amount
     *
     * @return string
     */
    public function getCreditAmount()
    {
        return $this->container['credit_amount'];
    }

    /**
     * Sets credit_amount
     *
     * @param string $credit_amount credit_amount
     *
     * @return $this
     */
    public function setCreditAmount($credit_amount)
    {
        $this->container['credit_amount'] = $credit_amount;

        return $this;
    }

    /**
     * Gets amount_for
     *
     * @return string
     */
    public function getAmountFor()
    {
        return $this->container['amount_for'];
    }

    /**
     * Sets amount_for
     *
     * @param string $amount_for amount_for
     *
     * @return $this
     */
    public function setAmountFor($amount_for)
    {
        $this->container['amount_for'] = $amount_for;

        return $this;
    }

    /**
     * Gets price
     *
     * @return string
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param string $price price
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return string
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param string $quantity quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets dc
     *
     * @return string
     */
    public function getDc()
    {
        return $this->container['dc'];
    }

    /**
     * Sets dc
     *
     * @param string $dc dc
     *
     * @return $this
     */
    public function setDc($dc)
    {
        $this->container['dc'] = $dc;

        return $this;
    }

    /**
     * Gets assist
     *
     * @return \com_kingdee_service\data\entity\VoucherDetailReplyAssist[]
     */
    public function getAssist()
    {
        return $this->container['assist'];
    }

    /**
     * Sets assist
     *
     * @param \com_kingdee_service\data\entity\VoucherDetailReplyAssist[] $assist assist
     *
     * @return $this
     */
    public function setAssist($assist)
    {
        $this->container['assist'] = $assist;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


