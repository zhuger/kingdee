<?php
/**
 * Credit
 *
 * PHP version 5
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * æ˜Ÿè¾°
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com_kingdee_service\data\entity;

use \ArrayAccess;
use \com_kingdee_service\ObjectSerializer;

/**
 * Credit Class Doc Comment
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Credit implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Credit';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'member_id' => 'string',
        'grant_id' => 'string',
        'grant_code' => 'string',
        'grant_amt' => 'string',
        'credit_amt' => 'string',
        'due_amt' => 'string',
        'status' => 'string',
        'term_id' => 'string',
        'term_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'member_id' => null,
        'grant_id' => null,
        'grant_code' => null,
        'grant_amt' => null,
        'credit_amt' => null,
        'due_amt' => null,
        'status' => null,
        'term_id' => null,
        'term_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'member_id' => 'member_id',
        'grant_id' => 'grant_id',
        'grant_code' => 'grant_code',
        'grant_amt' => 'grant_amt',
        'credit_amt' => 'credit_amt',
        'due_amt' => 'due_amt',
        'status' => 'status',
        'term_id' => 'term_id',
        'term_name' => 'term_name'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'member_id' => 'setMemberId',
        'grant_id' => 'setGrantId',
        'grant_code' => 'setGrantCode',
        'grant_amt' => 'setGrantAmt',
        'credit_amt' => 'setCreditAmt',
        'due_amt' => 'setDueAmt',
        'status' => 'setStatus',
        'term_id' => 'setTermId',
        'term_name' => 'setTermName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'member_id' => 'getMemberId',
        'grant_id' => 'getGrantId',
        'grant_code' => 'getGrantCode',
        'grant_amt' => 'getGrantAmt',
        'credit_amt' => 'getCreditAmt',
        'due_amt' => 'getDueAmt',
        'status' => 'getStatus',
        'term_id' => 'getTermId',
        'term_name' => 'getTermName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['member_id'] = isset($data['member_id']) ? $data['member_id'] : null;
        $this->container['grant_id'] = isset($data['grant_id']) ? $data['grant_id'] : null;
        $this->container['grant_code'] = isset($data['grant_code']) ? $data['grant_code'] : null;
        $this->container['grant_amt'] = isset($data['grant_amt']) ? $data['grant_amt'] : null;
        $this->container['credit_amt'] = isset($data['credit_amt']) ? $data['credit_amt'] : null;
        $this->container['due_amt'] = isset($data['due_amt']) ? $data['due_amt'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['term_id'] = isset($data['term_id']) ? $data['term_id'] : null;
        $this->container['term_name'] = isset($data['term_name']) ? $data['term_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets member_id
     *
     * @return string
     */
    public function getMemberId()
    {
        return $this->container['member_id'];
    }

    /**
     * Sets member_id
     *
     * @param string $member_id member_id
     *
     * @return $this
     */
    public function setMemberId($member_id)
    {
        $this->container['member_id'] = $member_id;

        return $this;
    }

    /**
     * Gets grant_id
     *
     * @return string
     */
    public function getGrantId()
    {
        return $this->container['grant_id'];
    }

    /**
     * Sets grant_id
     *
     * @param string $grant_id grant_id
     *
     * @return $this
     */
    public function setGrantId($grant_id)
    {
        $this->container['grant_id'] = $grant_id;

        return $this;
    }

    /**
     * Gets grant_code
     *
     * @return string
     */
    public function getGrantCode()
    {
        return $this->container['grant_code'];
    }

    /**
     * Sets grant_code
     *
     * @param string $grant_code grant_code
     *
     * @return $this
     */
    public function setGrantCode($grant_code)
    {
        $this->container['grant_code'] = $grant_code;

        return $this;
    }

    /**
     * Gets grant_amt
     *
     * @return string
     */
    public function getGrantAmt()
    {
        return $this->container['grant_amt'];
    }

    /**
     * Sets grant_amt
     *
     * @param string $grant_amt grant_amt
     *
     * @return $this
     */
    public function setGrantAmt($grant_amt)
    {
        $this->container['grant_amt'] = $grant_amt;

        return $this;
    }

    /**
     * Gets credit_amt
     *
     * @return string
     */
    public function getCreditAmt()
    {
        return $this->container['credit_amt'];
    }

    /**
     * Sets credit_amt
     *
     * @param string $credit_amt credit_amt
     *
     * @return $this
     */
    public function setCreditAmt($credit_amt)
    {
        $this->container['credit_amt'] = $credit_amt;

        return $this;
    }

    /**
     * Gets due_amt
     *
     * @return string
     */
    public function getDueAmt()
    {
        return $this->container['due_amt'];
    }

    /**
     * Sets due_amt
     *
     * @param string $due_amt due_amt
     *
     * @return $this
     */
    public function setDueAmt($due_amt)
    {
        $this->container['due_amt'] = $due_amt;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets term_id
     *
     * @return string
     */
    public function getTermId()
    {
        return $this->container['term_id'];
    }

    /**
     * Sets term_id
     *
     * @param string $term_id term_id
     *
     * @return $this
     */
    public function setTermId($term_id)
    {
        $this->container['term_id'] = $term_id;

        return $this;
    }

    /**
     * Gets term_name
     *
     * @return string
     */
    public function getTermName()
    {
        return $this->container['term_name'];
    }

    /**
     * Sets term_name
     *
     * @param string $term_name term_name
     *
     * @return $this
     */
    public function setTermName($term_name)
    {
        $this->container['term_name'] = $term_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


