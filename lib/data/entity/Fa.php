<?php
/**
 * Fa
 *
 * PHP version 5
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 星辰
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com_kingdee_service\data\entity;

use \ArrayAccess;
use \com_kingdee_service\ObjectSerializer;

/**
 * Fa Class Doc Comment
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Fa implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Fa';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'start_year' => 'string',
        'start_period' => 'string',
        'current_year' => 'string',
        'current_period' => 'string',
        'with_gl' => 'bool',
        'close_with_gl' => 'bool',
        'depreciate_field' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'start_year' => null,
        'start_period' => null,
        'current_year' => null,
        'current_period' => null,
        'with_gl' => null,
        'close_with_gl' => null,
        'depreciate_field' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'start_year' => 'start_year',
        'start_period' => 'start_period',
        'current_year' => 'current_year',
        'current_period' => 'current_period',
        'with_gl' => 'with_gl',
        'close_with_gl' => 'close_with_gl',
        'depreciate_field' => 'depreciate_field'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'start_year' => 'setStartYear',
        'start_period' => 'setStartPeriod',
        'current_year' => 'setCurrentYear',
        'current_period' => 'setCurrentPeriod',
        'with_gl' => 'setWithGl',
        'close_with_gl' => 'setCloseWithGl',
        'depreciate_field' => 'setDepreciateField'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'start_year' => 'getStartYear',
        'start_period' => 'getStartPeriod',
        'current_year' => 'getCurrentYear',
        'current_period' => 'getCurrentPeriod',
        'with_gl' => 'getWithGl',
        'close_with_gl' => 'getCloseWithGl',
        'depreciate_field' => 'getDepreciateField'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['start_year'] = isset($data['start_year']) ? $data['start_year'] : null;
        $this->container['start_period'] = isset($data['start_period']) ? $data['start_period'] : null;
        $this->container['current_year'] = isset($data['current_year']) ? $data['current_year'] : null;
        $this->container['current_period'] = isset($data['current_period']) ? $data['current_period'] : null;
        $this->container['with_gl'] = isset($data['with_gl']) ? $data['with_gl'] : null;
        $this->container['close_with_gl'] = isset($data['close_with_gl']) ? $data['close_with_gl'] : null;
        $this->container['depreciate_field'] = isset($data['depreciate_field']) ? $data['depreciate_field'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets start_year
     *
     * @return string
     */
    public function getStartYear()
    {
        return $this->container['start_year'];
    }

    /**
     * Sets start_year
     *
     * @param string $start_year start_year
     *
     * @return $this
     */
    public function setStartYear($start_year)
    {
        $this->container['start_year'] = $start_year;

        return $this;
    }

    /**
     * Gets start_period
     *
     * @return string
     */
    public function getStartPeriod()
    {
        return $this->container['start_period'];
    }

    /**
     * Sets start_period
     *
     * @param string $start_period start_period
     *
     * @return $this
     */
    public function setStartPeriod($start_period)
    {
        $this->container['start_period'] = $start_period;

        return $this;
    }

    /**
     * Gets current_year
     *
     * @return string
     */
    public function getCurrentYear()
    {
        return $this->container['current_year'];
    }

    /**
     * Sets current_year
     *
     * @param string $current_year current_year
     *
     * @return $this
     */
    public function setCurrentYear($current_year)
    {
        $this->container['current_year'] = $current_year;

        return $this;
    }

    /**
     * Gets current_period
     *
     * @return string
     */
    public function getCurrentPeriod()
    {
        return $this->container['current_period'];
    }

    /**
     * Sets current_period
     *
     * @param string $current_period current_period
     *
     * @return $this
     */
    public function setCurrentPeriod($current_period)
    {
        $this->container['current_period'] = $current_period;

        return $this;
    }

    /**
     * Gets with_gl
     *
     * @return bool
     */
    public function getWithGl()
    {
        return $this->container['with_gl'];
    }

    /**
     * Sets with_gl
     *
     * @param bool $with_gl with_gl
     *
     * @return $this
     */
    public function setWithGl($with_gl)
    {
        $this->container['with_gl'] = $with_gl;

        return $this;
    }

    /**
     * Gets close_with_gl
     *
     * @return bool
     */
    public function getCloseWithGl()
    {
        return $this->container['close_with_gl'];
    }

    /**
     * Sets close_with_gl
     *
     * @param bool $close_with_gl close_with_gl
     *
     * @return $this
     */
    public function setCloseWithGl($close_with_gl)
    {
        $this->container['close_with_gl'] = $close_with_gl;

        return $this;
    }

    /**
     * Gets depreciate_field
     *
     * @return bool
     */
    public function getDepreciateField()
    {
        return $this->container['depreciate_field'];
    }

    /**
     * Sets depreciate_field
     *
     * @param bool $depreciate_field depreciate_field
     *
     * @return $this
     */
    public function setDepreciateField($depreciate_field)
    {
        $this->container['depreciate_field'] = $depreciate_field;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


