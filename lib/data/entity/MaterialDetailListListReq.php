<?php
/**
 * MaterialDetailListListReq
 *
 * PHP version 5
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * æ˜Ÿè¾°
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com_kingdee_service\data\entity;

use \ArrayAccess;
use \com_kingdee_service\ObjectSerializer;

/**
 * MaterialDetailListListReq Class Doc Comment
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MaterialDetailListListReq implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MaterialDetailList_listReq';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'store_id' => 'string',
        'fetch_on_shelf' => 'bool',
        'parent_id' => 'string',
        'fetch_price' => 'bool',
        'check_type' => 'string[]',
        'page' => 'int',
        'material_name' => 'string',
        'is_flatten' => 'bool',
        'page_size' => 'int',
        'fetch_inventory' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'store_id' => null,
        'fetch_on_shelf' => null,
        'parent_id' => null,
        'fetch_price' => null,
        'check_type' => null,
        'page' => 'int32',
        'material_name' => null,
        'is_flatten' => null,
        'page_size' => 'int32',
        'fetch_inventory' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'store_id' => 'store_id',
        'fetch_on_shelf' => 'fetch_on_shelf',
        'parent_id' => 'parent_id',
        'fetch_price' => 'fetch_price',
        'check_type' => 'check_type',
        'page' => 'page',
        'material_name' => 'material_name',
        'is_flatten' => 'is_flatten',
        'page_size' => 'page_size',
        'fetch_inventory' => 'fetch_inventory'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'store_id' => 'setStoreId',
        'fetch_on_shelf' => 'setFetchOnShelf',
        'parent_id' => 'setParentId',
        'fetch_price' => 'setFetchPrice',
        'check_type' => 'setCheckType',
        'page' => 'setPage',
        'material_name' => 'setMaterialName',
        'is_flatten' => 'setIsFlatten',
        'page_size' => 'setPageSize',
        'fetch_inventory' => 'setFetchInventory'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'store_id' => 'getStoreId',
        'fetch_on_shelf' => 'getFetchOnShelf',
        'parent_id' => 'getParentId',
        'fetch_price' => 'getFetchPrice',
        'check_type' => 'getCheckType',
        'page' => 'getPage',
        'material_name' => 'getMaterialName',
        'is_flatten' => 'getIsFlatten',
        'page_size' => 'getPageSize',
        'fetch_inventory' => 'getFetchInventory'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['store_id'] = isset($data['store_id']) ? $data['store_id'] : null;
        $this->container['fetch_on_shelf'] = isset($data['fetch_on_shelf']) ? $data['fetch_on_shelf'] : null;
        $this->container['parent_id'] = isset($data['parent_id']) ? $data['parent_id'] : null;
        $this->container['fetch_price'] = isset($data['fetch_price']) ? $data['fetch_price'] : null;
        $this->container['check_type'] = isset($data['check_type']) ? $data['check_type'] : null;
        $this->container['page'] = isset($data['page']) ? $data['page'] : null;
        $this->container['material_name'] = isset($data['material_name']) ? $data['material_name'] : null;
        $this->container['is_flatten'] = isset($data['is_flatten']) ? $data['is_flatten'] : null;
        $this->container['page_size'] = isset($data['page_size']) ? $data['page_size'] : null;
        $this->container['fetch_inventory'] = isset($data['fetch_inventory']) ? $data['fetch_inventory'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets store_id
     *
     * @return string
     */
    public function getStoreId()
    {
        return $this->container['store_id'];
    }

    /**
     * Sets store_id
     *
     * @param string $store_id store_id
     *
     * @return $this
     */
    public function setStoreId($store_id)
    {
        $this->container['store_id'] = $store_id;

        return $this;
    }

    /**
     * Gets fetch_on_shelf
     *
     * @return bool
     */
    public function getFetchOnShelf()
    {
        return $this->container['fetch_on_shelf'];
    }

    /**
     * Sets fetch_on_shelf
     *
     * @param bool $fetch_on_shelf fetch_on_shelf
     *
     * @return $this
     */
    public function setFetchOnShelf($fetch_on_shelf)
    {
        $this->container['fetch_on_shelf'] = $fetch_on_shelf;

        return $this;
    }

    /**
     * Gets parent_id
     *
     * @return string
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     *
     * @param string $parent_id parent_id
     *
     * @return $this
     */
    public function setParentId($parent_id)
    {
        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets fetch_price
     *
     * @return bool
     */
    public function getFetchPrice()
    {
        return $this->container['fetch_price'];
    }

    /**
     * Sets fetch_price
     *
     * @param bool $fetch_price fetch_price
     *
     * @return $this
     */
    public function setFetchPrice($fetch_price)
    {
        $this->container['fetch_price'] = $fetch_price;

        return $this;
    }

    /**
     * Gets check_type
     *
     * @return string[]
     */
    public function getCheckType()
    {
        return $this->container['check_type'];
    }

    /**
     * Sets check_type
     *
     * @param string[] $check_type check_type
     *
     * @return $this
     */
    public function setCheckType($check_type)
    {
        $this->container['check_type'] = $check_type;

        return $this;
    }

    /**
     * Gets page
     *
     * @return int
     */
    public function getPage()
    {
        return $this->container['page'];
    }

    /**
     * Sets page
     *
     * @param int $page page
     *
     * @return $this
     */
    public function setPage($page)
    {
        $this->container['page'] = $page;

        return $this;
    }

    /**
     * Gets material_name
     *
     * @return string
     */
    public function getMaterialName()
    {
        return $this->container['material_name'];
    }

    /**
     * Sets material_name
     *
     * @param string $material_name material_name
     *
     * @return $this
     */
    public function setMaterialName($material_name)
    {
        $this->container['material_name'] = $material_name;

        return $this;
    }

    /**
     * Gets is_flatten
     *
     * @return bool
     */
    public function getIsFlatten()
    {
        return $this->container['is_flatten'];
    }

    /**
     * Sets is_flatten
     *
     * @param bool $is_flatten is_flatten
     *
     * @return $this
     */
    public function setIsFlatten($is_flatten)
    {
        $this->container['is_flatten'] = $is_flatten;

        return $this;
    }

    /**
     * Gets page_size
     *
     * @return int
     */
    public function getPageSize()
    {
        return $this->container['page_size'];
    }

    /**
     * Sets page_size
     *
     * @param int $page_size page_size
     *
     * @return $this
     */
    public function setPageSize($page_size)
    {
        $this->container['page_size'] = $page_size;

        return $this;
    }

    /**
     * Gets fetch_inventory
     *
     * @return bool
     */
    public function getFetchInventory()
    {
        return $this->container['fetch_inventory'];
    }

    /**
     * Sets fetch_inventory
     *
     * @param bool $fetch_inventory fetch_inventory
     *
     * @return $this
     */
    public function setFetchInventory($fetch_inventory)
    {
        $this->container['fetch_inventory'] = $fetch_inventory;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


