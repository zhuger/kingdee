<?php
/**
 * InventoryInvSerialStatusListReq
 *
 * PHP version 5
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 星辰
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com_kingdee_service\data\entity;

use \ArrayAccess;
use \com_kingdee_service\ObjectSerializer;

/**
 * InventoryInvSerialStatusListReq Class Doc Comment
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InventoryInvSerialStatusListReq implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Inventory_invSerialStatusListReq';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'end_date' => 'string',
        'filter_sp_id' => 'string[]',
        'filter_aux_prop_id' => 'string[]',
        'filter_stock_id' => 'string[]',
        'search' => 'string',
        'filter_material_model' => 'string',
        'filter_serial_status' => 'string',
        'filter_material_label' => 'string[]',
        'filter_barcode' => 'string',
        'filter_material_category' => 'string[]',
        'filter_supplier_id' => 'string[]',
        'filter_customer_id' => 'string[]',
        'start_date' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'end_date' => null,
        'filter_sp_id' => null,
        'filter_aux_prop_id' => null,
        'filter_stock_id' => null,
        'search' => null,
        'filter_material_model' => null,
        'filter_serial_status' => null,
        'filter_material_label' => null,
        'filter_barcode' => null,
        'filter_material_category' => null,
        'filter_supplier_id' => null,
        'filter_customer_id' => null,
        'start_date' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'end_date' => 'end_date',
        'filter_sp_id' => 'filter_sp_id',
        'filter_aux_prop_id' => 'filter_aux_prop_id',
        'filter_stock_id' => 'filter_stock_id',
        'search' => 'search',
        'filter_material_model' => 'filter_material_model',
        'filter_serial_status' => 'filter_serial_status',
        'filter_material_label' => 'filter_material_label',
        'filter_barcode' => 'filter_barcode',
        'filter_material_category' => 'filter_material_category',
        'filter_supplier_id' => 'filter_supplier_id',
        'filter_customer_id' => 'filter_customer_id',
        'start_date' => 'start_date'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'end_date' => 'setEndDate',
        'filter_sp_id' => 'setFilterSpId',
        'filter_aux_prop_id' => 'setFilterAuxPropId',
        'filter_stock_id' => 'setFilterStockId',
        'search' => 'setSearch',
        'filter_material_model' => 'setFilterMaterialModel',
        'filter_serial_status' => 'setFilterSerialStatus',
        'filter_material_label' => 'setFilterMaterialLabel',
        'filter_barcode' => 'setFilterBarcode',
        'filter_material_category' => 'setFilterMaterialCategory',
        'filter_supplier_id' => 'setFilterSupplierId',
        'filter_customer_id' => 'setFilterCustomerId',
        'start_date' => 'setStartDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'end_date' => 'getEndDate',
        'filter_sp_id' => 'getFilterSpId',
        'filter_aux_prop_id' => 'getFilterAuxPropId',
        'filter_stock_id' => 'getFilterStockId',
        'search' => 'getSearch',
        'filter_material_model' => 'getFilterMaterialModel',
        'filter_serial_status' => 'getFilterSerialStatus',
        'filter_material_label' => 'getFilterMaterialLabel',
        'filter_barcode' => 'getFilterBarcode',
        'filter_material_category' => 'getFilterMaterialCategory',
        'filter_supplier_id' => 'getFilterSupplierId',
        'filter_customer_id' => 'getFilterCustomerId',
        'start_date' => 'getStartDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['filter_sp_id'] = isset($data['filter_sp_id']) ? $data['filter_sp_id'] : null;
        $this->container['filter_aux_prop_id'] = isset($data['filter_aux_prop_id']) ? $data['filter_aux_prop_id'] : null;
        $this->container['filter_stock_id'] = isset($data['filter_stock_id']) ? $data['filter_stock_id'] : null;
        $this->container['search'] = isset($data['search']) ? $data['search'] : null;
        $this->container['filter_material_model'] = isset($data['filter_material_model']) ? $data['filter_material_model'] : null;
        $this->container['filter_serial_status'] = isset($data['filter_serial_status']) ? $data['filter_serial_status'] : null;
        $this->container['filter_material_label'] = isset($data['filter_material_label']) ? $data['filter_material_label'] : null;
        $this->container['filter_barcode'] = isset($data['filter_barcode']) ? $data['filter_barcode'] : null;
        $this->container['filter_material_category'] = isset($data['filter_material_category']) ? $data['filter_material_category'] : null;
        $this->container['filter_supplier_id'] = isset($data['filter_supplier_id']) ? $data['filter_supplier_id'] : null;
        $this->container['filter_customer_id'] = isset($data['filter_customer_id']) ? $data['filter_customer_id'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets end_date
     *
     * @return string
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param string $end_date end_date
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets filter_sp_id
     *
     * @return string[]
     */
    public function getFilterSpId()
    {
        return $this->container['filter_sp_id'];
    }

    /**
     * Sets filter_sp_id
     *
     * @param string[] $filter_sp_id filter_sp_id
     *
     * @return $this
     */
    public function setFilterSpId($filter_sp_id)
    {
        $this->container['filter_sp_id'] = $filter_sp_id;

        return $this;
    }

    /**
     * Gets filter_aux_prop_id
     *
     * @return string[]
     */
    public function getFilterAuxPropId()
    {
        return $this->container['filter_aux_prop_id'];
    }

    /**
     * Sets filter_aux_prop_id
     *
     * @param string[] $filter_aux_prop_id filter_aux_prop_id
     *
     * @return $this
     */
    public function setFilterAuxPropId($filter_aux_prop_id)
    {
        $this->container['filter_aux_prop_id'] = $filter_aux_prop_id;

        return $this;
    }

    /**
     * Gets filter_stock_id
     *
     * @return string[]
     */
    public function getFilterStockId()
    {
        return $this->container['filter_stock_id'];
    }

    /**
     * Sets filter_stock_id
     *
     * @param string[] $filter_stock_id filter_stock_id
     *
     * @return $this
     */
    public function setFilterStockId($filter_stock_id)
    {
        $this->container['filter_stock_id'] = $filter_stock_id;

        return $this;
    }

    /**
     * Gets search
     *
     * @return string
     */
    public function getSearch()
    {
        return $this->container['search'];
    }

    /**
     * Sets search
     *
     * @param string $search search
     *
     * @return $this
     */
    public function setSearch($search)
    {
        $this->container['search'] = $search;

        return $this;
    }

    /**
     * Gets filter_material_model
     *
     * @return string
     */
    public function getFilterMaterialModel()
    {
        return $this->container['filter_material_model'];
    }

    /**
     * Sets filter_material_model
     *
     * @param string $filter_material_model filter_material_model
     *
     * @return $this
     */
    public function setFilterMaterialModel($filter_material_model)
    {
        $this->container['filter_material_model'] = $filter_material_model;

        return $this;
    }

    /**
     * Gets filter_serial_status
     *
     * @return string
     */
    public function getFilterSerialStatus()
    {
        return $this->container['filter_serial_status'];
    }

    /**
     * Sets filter_serial_status
     *
     * @param string $filter_serial_status filter_serial_status
     *
     * @return $this
     */
    public function setFilterSerialStatus($filter_serial_status)
    {
        $this->container['filter_serial_status'] = $filter_serial_status;

        return $this;
    }

    /**
     * Gets filter_material_label
     *
     * @return string[]
     */
    public function getFilterMaterialLabel()
    {
        return $this->container['filter_material_label'];
    }

    /**
     * Sets filter_material_label
     *
     * @param string[] $filter_material_label filter_material_label
     *
     * @return $this
     */
    public function setFilterMaterialLabel($filter_material_label)
    {
        $this->container['filter_material_label'] = $filter_material_label;

        return $this;
    }

    /**
     * Gets filter_barcode
     *
     * @return string
     */
    public function getFilterBarcode()
    {
        return $this->container['filter_barcode'];
    }

    /**
     * Sets filter_barcode
     *
     * @param string $filter_barcode filter_barcode
     *
     * @return $this
     */
    public function setFilterBarcode($filter_barcode)
    {
        $this->container['filter_barcode'] = $filter_barcode;

        return $this;
    }

    /**
     * Gets filter_material_category
     *
     * @return string[]
     */
    public function getFilterMaterialCategory()
    {
        return $this->container['filter_material_category'];
    }

    /**
     * Sets filter_material_category
     *
     * @param string[] $filter_material_category filter_material_category
     *
     * @return $this
     */
    public function setFilterMaterialCategory($filter_material_category)
    {
        $this->container['filter_material_category'] = $filter_material_category;

        return $this;
    }

    /**
     * Gets filter_supplier_id
     *
     * @return string[]
     */
    public function getFilterSupplierId()
    {
        return $this->container['filter_supplier_id'];
    }

    /**
     * Sets filter_supplier_id
     *
     * @param string[] $filter_supplier_id filter_supplier_id
     *
     * @return $this
     */
    public function setFilterSupplierId($filter_supplier_id)
    {
        $this->container['filter_supplier_id'] = $filter_supplier_id;

        return $this;
    }

    /**
     * Gets filter_customer_id
     *
     * @return string[]
     */
    public function getFilterCustomerId()
    {
        return $this->container['filter_customer_id'];
    }

    /**
     * Sets filter_customer_id
     *
     * @param string[] $filter_customer_id filter_customer_id
     *
     * @return $this
     */
    public function setFilterCustomerId($filter_customer_id)
    {
        $this->container['filter_customer_id'] = $filter_customer_id;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return string
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param string $start_date start_date
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


