<?php
/**
 * InvProductSaveRequestMaterialEntity
 *
 * PHP version 5
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 星辰
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com_kingdee_service\data\entity;

use \ArrayAccess;
use \com_kingdee_service\ObjectSerializer;

/**
 * InvProductSaveRequestMaterialEntity Class Doc Comment
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InvProductSaveRequestMaterialEntity implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InvProductSaveRequest.MaterialEntity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'material_id' => 'string',
        'stock_id' => 'string',
        'sp_id' => 'string',
        'qty' => 'string',
        'unit_id' => 'string',
        'aux_qty' => 'double',
        'aux_unit_id' => 'string',
        'aux_prop_id' => 'string',
        'aux_id1' => 'string',
        'aux_id2' => 'string',
        'aux_id3' => 'string',
        'aux_id4' => 'string',
        'aux_id5' => 'string',
        'batch_no' => 'string',
        'pro_place' => 'string',
        'pro_reg_no' => 'string',
        'pro_license' => 'string',
        'kf_date' => 'string',
        'valid_date' => 'string',
        'kf_type' => 'string',
        'kf_period' => 'int',
        'cost' => 'double',
        'unit_cost' => 'double',
        'comment' => 'string',
        'src_order_bill_no' => 'string',
        'src_order_seq' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'material_id' => null,
        'stock_id' => null,
        'sp_id' => null,
        'qty' => null,
        'unit_id' => null,
        'aux_qty' => 'double',
        'aux_unit_id' => null,
        'aux_prop_id' => null,
        'aux_id1' => null,
        'aux_id2' => null,
        'aux_id3' => null,
        'aux_id4' => null,
        'aux_id5' => null,
        'batch_no' => null,
        'pro_place' => null,
        'pro_reg_no' => null,
        'pro_license' => null,
        'kf_date' => null,
        'valid_date' => null,
        'kf_type' => null,
        'kf_period' => 'int32',
        'cost' => 'double',
        'unit_cost' => 'double',
        'comment' => null,
        'src_order_bill_no' => null,
        'src_order_seq' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'material_id' => 'material_id',
        'stock_id' => 'stock_id',
        'sp_id' => 'sp_id',
        'qty' => 'qty',
        'unit_id' => 'unit_id',
        'aux_qty' => 'aux_qty',
        'aux_unit_id' => 'aux_unit_id',
        'aux_prop_id' => 'aux_prop_id',
        'aux_id1' => 'aux_id1',
        'aux_id2' => 'aux_id2',
        'aux_id3' => 'aux_id3',
        'aux_id4' => 'aux_id4',
        'aux_id5' => 'aux_id5',
        'batch_no' => 'batch_no',
        'pro_place' => 'pro_place',
        'pro_reg_no' => 'pro_reg_no',
        'pro_license' => 'pro_license',
        'kf_date' => 'kf_date',
        'valid_date' => 'valid_date',
        'kf_type' => 'kf_type',
        'kf_period' => 'kf_period',
        'cost' => 'cost',
        'unit_cost' => 'unit_cost',
        'comment' => 'comment',
        'src_order_bill_no' => 'src_order_bill_no',
        'src_order_seq' => 'src_order_seq'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'material_id' => 'setMaterialId',
        'stock_id' => 'setStockId',
        'sp_id' => 'setSpId',
        'qty' => 'setQty',
        'unit_id' => 'setUnitId',
        'aux_qty' => 'setAuxQty',
        'aux_unit_id' => 'setAuxUnitId',
        'aux_prop_id' => 'setAuxPropId',
        'aux_id1' => 'setAuxId1',
        'aux_id2' => 'setAuxId2',
        'aux_id3' => 'setAuxId3',
        'aux_id4' => 'setAuxId4',
        'aux_id5' => 'setAuxId5',
        'batch_no' => 'setBatchNo',
        'pro_place' => 'setProPlace',
        'pro_reg_no' => 'setProRegNo',
        'pro_license' => 'setProLicense',
        'kf_date' => 'setKfDate',
        'valid_date' => 'setValidDate',
        'kf_type' => 'setKfType',
        'kf_period' => 'setKfPeriod',
        'cost' => 'setCost',
        'unit_cost' => 'setUnitCost',
        'comment' => 'setComment',
        'src_order_bill_no' => 'setSrcOrderBillNo',
        'src_order_seq' => 'setSrcOrderSeq'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'material_id' => 'getMaterialId',
        'stock_id' => 'getStockId',
        'sp_id' => 'getSpId',
        'qty' => 'getQty',
        'unit_id' => 'getUnitId',
        'aux_qty' => 'getAuxQty',
        'aux_unit_id' => 'getAuxUnitId',
        'aux_prop_id' => 'getAuxPropId',
        'aux_id1' => 'getAuxId1',
        'aux_id2' => 'getAuxId2',
        'aux_id3' => 'getAuxId3',
        'aux_id4' => 'getAuxId4',
        'aux_id5' => 'getAuxId5',
        'batch_no' => 'getBatchNo',
        'pro_place' => 'getProPlace',
        'pro_reg_no' => 'getProRegNo',
        'pro_license' => 'getProLicense',
        'kf_date' => 'getKfDate',
        'valid_date' => 'getValidDate',
        'kf_type' => 'getKfType',
        'kf_period' => 'getKfPeriod',
        'cost' => 'getCost',
        'unit_cost' => 'getUnitCost',
        'comment' => 'getComment',
        'src_order_bill_no' => 'getSrcOrderBillNo',
        'src_order_seq' => 'getSrcOrderSeq'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['material_id'] = isset($data['material_id']) ? $data['material_id'] : null;
        $this->container['stock_id'] = isset($data['stock_id']) ? $data['stock_id'] : null;
        $this->container['sp_id'] = isset($data['sp_id']) ? $data['sp_id'] : null;
        $this->container['qty'] = isset($data['qty']) ? $data['qty'] : null;
        $this->container['unit_id'] = isset($data['unit_id']) ? $data['unit_id'] : null;
        $this->container['aux_qty'] = isset($data['aux_qty']) ? $data['aux_qty'] : null;
        $this->container['aux_unit_id'] = isset($data['aux_unit_id']) ? $data['aux_unit_id'] : null;
        $this->container['aux_prop_id'] = isset($data['aux_prop_id']) ? $data['aux_prop_id'] : null;
        $this->container['aux_id1'] = isset($data['aux_id1']) ? $data['aux_id1'] : null;
        $this->container['aux_id2'] = isset($data['aux_id2']) ? $data['aux_id2'] : null;
        $this->container['aux_id3'] = isset($data['aux_id3']) ? $data['aux_id3'] : null;
        $this->container['aux_id4'] = isset($data['aux_id4']) ? $data['aux_id4'] : null;
        $this->container['aux_id5'] = isset($data['aux_id5']) ? $data['aux_id5'] : null;
        $this->container['batch_no'] = isset($data['batch_no']) ? $data['batch_no'] : null;
        $this->container['pro_place'] = isset($data['pro_place']) ? $data['pro_place'] : null;
        $this->container['pro_reg_no'] = isset($data['pro_reg_no']) ? $data['pro_reg_no'] : null;
        $this->container['pro_license'] = isset($data['pro_license']) ? $data['pro_license'] : null;
        $this->container['kf_date'] = isset($data['kf_date']) ? $data['kf_date'] : null;
        $this->container['valid_date'] = isset($data['valid_date']) ? $data['valid_date'] : null;
        $this->container['kf_type'] = isset($data['kf_type']) ? $data['kf_type'] : null;
        $this->container['kf_period'] = isset($data['kf_period']) ? $data['kf_period'] : null;
        $this->container['cost'] = isset($data['cost']) ? $data['cost'] : null;
        $this->container['unit_cost'] = isset($data['unit_cost']) ? $data['unit_cost'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['src_order_bill_no'] = isset($data['src_order_bill_no']) ? $data['src_order_bill_no'] : null;
        $this->container['src_order_seq'] = isset($data['src_order_seq']) ? $data['src_order_seq'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets material_id
     *
     * @return string
     */
    public function getMaterialId()
    {
        return $this->container['material_id'];
    }

    /**
     * Sets material_id
     *
     * @param string $material_id material_id
     *
     * @return $this
     */
    public function setMaterialId($material_id)
    {
        $this->container['material_id'] = $material_id;

        return $this;
    }

    /**
     * Gets stock_id
     *
     * @return string
     */
    public function getStockId()
    {
        return $this->container['stock_id'];
    }

    /**
     * Sets stock_id
     *
     * @param string $stock_id stock_id
     *
     * @return $this
     */
    public function setStockId($stock_id)
    {
        $this->container['stock_id'] = $stock_id;

        return $this;
    }

    /**
     * Gets sp_id
     *
     * @return string
     */
    public function getSpId()
    {
        return $this->container['sp_id'];
    }

    /**
     * Sets sp_id
     *
     * @param string $sp_id sp_id
     *
     * @return $this
     */
    public function setSpId($sp_id)
    {
        $this->container['sp_id'] = $sp_id;

        return $this;
    }

    /**
     * Gets qty
     *
     * @return string
     */
    public function getQty()
    {
        return $this->container['qty'];
    }

    /**
     * Sets qty
     *
     * @param string $qty qty
     *
     * @return $this
     */
    public function setQty($qty)
    {
        $this->container['qty'] = $qty;

        return $this;
    }

    /**
     * Gets unit_id
     *
     * @return string
     */
    public function getUnitId()
    {
        return $this->container['unit_id'];
    }

    /**
     * Sets unit_id
     *
     * @param string $unit_id unit_id
     *
     * @return $this
     */
    public function setUnitId($unit_id)
    {
        $this->container['unit_id'] = $unit_id;

        return $this;
    }

    /**
     * Gets aux_qty
     *
     * @return double
     */
    public function getAuxQty()
    {
        return $this->container['aux_qty'];
    }

    /**
     * Sets aux_qty
     *
     * @param double $aux_qty aux_qty
     *
     * @return $this
     */
    public function setAuxQty($aux_qty)
    {
        $this->container['aux_qty'] = $aux_qty;

        return $this;
    }

    /**
     * Gets aux_unit_id
     *
     * @return string
     */
    public function getAuxUnitId()
    {
        return $this->container['aux_unit_id'];
    }

    /**
     * Sets aux_unit_id
     *
     * @param string $aux_unit_id aux_unit_id
     *
     * @return $this
     */
    public function setAuxUnitId($aux_unit_id)
    {
        $this->container['aux_unit_id'] = $aux_unit_id;

        return $this;
    }

    /**
     * Gets aux_prop_id
     *
     * @return string
     */
    public function getAuxPropId()
    {
        return $this->container['aux_prop_id'];
    }

    /**
     * Sets aux_prop_id
     *
     * @param string $aux_prop_id aux_prop_id
     *
     * @return $this
     */
    public function setAuxPropId($aux_prop_id)
    {
        $this->container['aux_prop_id'] = $aux_prop_id;

        return $this;
    }

    /**
     * Gets aux_id1
     *
     * @return string
     */
    public function getAuxId1()
    {
        return $this->container['aux_id1'];
    }

    /**
     * Sets aux_id1
     *
     * @param string $aux_id1 aux_id1
     *
     * @return $this
     */
    public function setAuxId1($aux_id1)
    {
        $this->container['aux_id1'] = $aux_id1;

        return $this;
    }

    /**
     * Gets aux_id2
     *
     * @return string
     */
    public function getAuxId2()
    {
        return $this->container['aux_id2'];
    }

    /**
     * Sets aux_id2
     *
     * @param string $aux_id2 aux_id2
     *
     * @return $this
     */
    public function setAuxId2($aux_id2)
    {
        $this->container['aux_id2'] = $aux_id2;

        return $this;
    }

    /**
     * Gets aux_id3
     *
     * @return string
     */
    public function getAuxId3()
    {
        return $this->container['aux_id3'];
    }

    /**
     * Sets aux_id3
     *
     * @param string $aux_id3 aux_id3
     *
     * @return $this
     */
    public function setAuxId3($aux_id3)
    {
        $this->container['aux_id3'] = $aux_id3;

        return $this;
    }

    /**
     * Gets aux_id4
     *
     * @return string
     */
    public function getAuxId4()
    {
        return $this->container['aux_id4'];
    }

    /**
     * Sets aux_id4
     *
     * @param string $aux_id4 aux_id4
     *
     * @return $this
     */
    public function setAuxId4($aux_id4)
    {
        $this->container['aux_id4'] = $aux_id4;

        return $this;
    }

    /**
     * Gets aux_id5
     *
     * @return string
     */
    public function getAuxId5()
    {
        return $this->container['aux_id5'];
    }

    /**
     * Sets aux_id5
     *
     * @param string $aux_id5 aux_id5
     *
     * @return $this
     */
    public function setAuxId5($aux_id5)
    {
        $this->container['aux_id5'] = $aux_id5;

        return $this;
    }

    /**
     * Gets batch_no
     *
     * @return string
     */
    public function getBatchNo()
    {
        return $this->container['batch_no'];
    }

    /**
     * Sets batch_no
     *
     * @param string $batch_no batch_no
     *
     * @return $this
     */
    public function setBatchNo($batch_no)
    {
        $this->container['batch_no'] = $batch_no;

        return $this;
    }

    /**
     * Gets pro_place
     *
     * @return string
     */
    public function getProPlace()
    {
        return $this->container['pro_place'];
    }

    /**
     * Sets pro_place
     *
     * @param string $pro_place pro_place
     *
     * @return $this
     */
    public function setProPlace($pro_place)
    {
        $this->container['pro_place'] = $pro_place;

        return $this;
    }

    /**
     * Gets pro_reg_no
     *
     * @return string
     */
    public function getProRegNo()
    {
        return $this->container['pro_reg_no'];
    }

    /**
     * Sets pro_reg_no
     *
     * @param string $pro_reg_no pro_reg_no
     *
     * @return $this
     */
    public function setProRegNo($pro_reg_no)
    {
        $this->container['pro_reg_no'] = $pro_reg_no;

        return $this;
    }

    /**
     * Gets pro_license
     *
     * @return string
     */
    public function getProLicense()
    {
        return $this->container['pro_license'];
    }

    /**
     * Sets pro_license
     *
     * @param string $pro_license pro_license
     *
     * @return $this
     */
    public function setProLicense($pro_license)
    {
        $this->container['pro_license'] = $pro_license;

        return $this;
    }

    /**
     * Gets kf_date
     *
     * @return string
     */
    public function getKfDate()
    {
        return $this->container['kf_date'];
    }

    /**
     * Sets kf_date
     *
     * @param string $kf_date kf_date
     *
     * @return $this
     */
    public function setKfDate($kf_date)
    {
        $this->container['kf_date'] = $kf_date;

        return $this;
    }

    /**
     * Gets valid_date
     *
     * @return string
     */
    public function getValidDate()
    {
        return $this->container['valid_date'];
    }

    /**
     * Sets valid_date
     *
     * @param string $valid_date valid_date
     *
     * @return $this
     */
    public function setValidDate($valid_date)
    {
        $this->container['valid_date'] = $valid_date;

        return $this;
    }

    /**
     * Gets kf_type
     *
     * @return string
     */
    public function getKfType()
    {
        return $this->container['kf_type'];
    }

    /**
     * Sets kf_type
     *
     * @param string $kf_type kf_type
     *
     * @return $this
     */
    public function setKfType($kf_type)
    {
        $this->container['kf_type'] = $kf_type;

        return $this;
    }

    /**
     * Gets kf_period
     *
     * @return int
     */
    public function getKfPeriod()
    {
        return $this->container['kf_period'];
    }

    /**
     * Sets kf_period
     *
     * @param int $kf_period kf_period
     *
     * @return $this
     */
    public function setKfPeriod($kf_period)
    {
        $this->container['kf_period'] = $kf_period;

        return $this;
    }

    /**
     * Gets cost
     *
     * @return double
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     *
     * @param double $cost cost
     *
     * @return $this
     */
    public function setCost($cost)
    {
        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets unit_cost
     *
     * @return double
     */
    public function getUnitCost()
    {
        return $this->container['unit_cost'];
    }

    /**
     * Sets unit_cost
     *
     * @param double $unit_cost unit_cost
     *
     * @return $this
     */
    public function setUnitCost($unit_cost)
    {
        $this->container['unit_cost'] = $unit_cost;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment comment
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets src_order_bill_no
     *
     * @return string
     */
    public function getSrcOrderBillNo()
    {
        return $this->container['src_order_bill_no'];
    }

    /**
     * Sets src_order_bill_no
     *
     * @param string $src_order_bill_no src_order_bill_no
     *
     * @return $this
     */
    public function setSrcOrderBillNo($src_order_bill_no)
    {
        $this->container['src_order_bill_no'] = $src_order_bill_no;

        return $this;
    }

    /**
     * Gets src_order_seq
     *
     * @return int
     */
    public function getSrcOrderSeq()
    {
        return $this->container['src_order_seq'];
    }

    /**
     * Sets src_order_seq
     *
     * @param int $src_order_seq src_order_seq
     *
     * @return $this
     */
    public function setSrcOrderSeq($src_order_seq)
    {
        $this->container['src_order_seq'] = $src_order_seq;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


