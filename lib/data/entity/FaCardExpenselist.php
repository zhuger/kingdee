<?php
/**
 * FaCardExpenselist
 *
 * PHP version 5
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 星辰
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com_kingdee_service\data\entity;

use \ArrayAccess;
use \com_kingdee_service\ObjectSerializer;

/**
 * FaCardExpenselist Class Doc Comment
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FaCardExpenselist implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FaCard.Expenselist';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'expense_dept_id' => 'string',
        'expense_acct_id' => 'string',
        'expense_acct_id_assist' => '\com_kingdee_service\data\entity\CommonAssist[]',
        'expense_detail_id' => 'string',
        'expense_percent' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'expense_dept_id' => null,
        'expense_acct_id' => null,
        'expense_acct_id_assist' => null,
        'expense_detail_id' => null,
        'expense_percent' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'expense_dept_id' => 'expense_dept_id',
        'expense_acct_id' => 'expense_acct_id',
        'expense_acct_id_assist' => 'expense_acct_id_assist',
        'expense_detail_id' => 'expense_detail_id',
        'expense_percent' => 'expense_percent'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'expense_dept_id' => 'setExpenseDeptId',
        'expense_acct_id' => 'setExpenseAcctId',
        'expense_acct_id_assist' => 'setExpenseAcctIdAssist',
        'expense_detail_id' => 'setExpenseDetailId',
        'expense_percent' => 'setExpensePercent'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'expense_dept_id' => 'getExpenseDeptId',
        'expense_acct_id' => 'getExpenseAcctId',
        'expense_acct_id_assist' => 'getExpenseAcctIdAssist',
        'expense_detail_id' => 'getExpenseDetailId',
        'expense_percent' => 'getExpensePercent'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['expense_dept_id'] = isset($data['expense_dept_id']) ? $data['expense_dept_id'] : null;
        $this->container['expense_acct_id'] = isset($data['expense_acct_id']) ? $data['expense_acct_id'] : null;
        $this->container['expense_acct_id_assist'] = isset($data['expense_acct_id_assist']) ? $data['expense_acct_id_assist'] : null;
        $this->container['expense_detail_id'] = isset($data['expense_detail_id']) ? $data['expense_detail_id'] : null;
        $this->container['expense_percent'] = isset($data['expense_percent']) ? $data['expense_percent'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets expense_dept_id
     *
     * @return string
     */
    public function getExpenseDeptId()
    {
        return $this->container['expense_dept_id'];
    }

    /**
     * Sets expense_dept_id
     *
     * @param string $expense_dept_id expense_dept_id
     *
     * @return $this
     */
    public function setExpenseDeptId($expense_dept_id)
    {
        $this->container['expense_dept_id'] = $expense_dept_id;

        return $this;
    }

    /**
     * Gets expense_acct_id
     *
     * @return string
     */
    public function getExpenseAcctId()
    {
        return $this->container['expense_acct_id'];
    }

    /**
     * Sets expense_acct_id
     *
     * @param string $expense_acct_id expense_acct_id
     *
     * @return $this
     */
    public function setExpenseAcctId($expense_acct_id)
    {
        $this->container['expense_acct_id'] = $expense_acct_id;

        return $this;
    }

    /**
     * Gets expense_acct_id_assist
     *
     * @return \com_kingdee_service\data\entity\CommonAssist[]
     */
    public function getExpenseAcctIdAssist()
    {
        return $this->container['expense_acct_id_assist'];
    }

    /**
     * Sets expense_acct_id_assist
     *
     * @param \com_kingdee_service\data\entity\CommonAssist[] $expense_acct_id_assist expense_acct_id_assist
     *
     * @return $this
     */
    public function setExpenseAcctIdAssist($expense_acct_id_assist)
    {
        $this->container['expense_acct_id_assist'] = $expense_acct_id_assist;

        return $this;
    }

    /**
     * Gets expense_detail_id
     *
     * @return string
     */
    public function getExpenseDetailId()
    {
        return $this->container['expense_detail_id'];
    }

    /**
     * Sets expense_detail_id
     *
     * @param string $expense_detail_id expense_detail_id
     *
     * @return $this
     */
    public function setExpenseDetailId($expense_detail_id)
    {
        $this->container['expense_detail_id'] = $expense_detail_id;

        return $this;
    }

    /**
     * Gets expense_percent
     *
     * @return string
     */
    public function getExpensePercent()
    {
        return $this->container['expense_percent'];
    }

    /**
     * Sets expense_percent
     *
     * @param string $expense_percent expense_percent
     *
     * @return $this
     */
    public function setExpensePercent($expense_percent)
    {
        $this->container['expense_percent'] = $expense_percent;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


