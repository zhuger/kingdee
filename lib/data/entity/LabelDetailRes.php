<?php
/**
 * LabelDetailRes
 *
 * PHP version 5
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * æ˜Ÿè¾°
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com_kingdee_service\data\entity;

use \ArrayAccess;
use \com_kingdee_service\ObjectSerializer;

/**
 * LabelDetailRes Class Doc Comment
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LabelDetailRes implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LabelDetailRes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'number' => 'string',
        'name' => 'string',
        'parent_number' => 'string',
        'parent_id' => 'string',
        'parent_name' => 'string',
        'is_prepared' => 'bool',
        'base_data_use_id' => 'string',
        'base_data_use_number' => 'string',
        'base_data_use_name' => 'string',
        'creator_id' => 'string',
        'creator_name' => 'string',
        'create_time' => 'string',
        'modify_time' => 'string',
        'modifier_id' => 'string',
        'modifier_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'number' => null,
        'name' => null,
        'parent_number' => null,
        'parent_id' => null,
        'parent_name' => null,
        'is_prepared' => null,
        'base_data_use_id' => null,
        'base_data_use_number' => null,
        'base_data_use_name' => null,
        'creator_id' => null,
        'creator_name' => null,
        'create_time' => null,
        'modify_time' => null,
        'modifier_id' => null,
        'modifier_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'number' => 'number',
        'name' => 'name',
        'parent_number' => 'parent_number',
        'parent_id' => 'parent_id',
        'parent_name' => 'parent_name',
        'is_prepared' => 'is_prepared',
        'base_data_use_id' => 'base_data_use_id',
        'base_data_use_number' => 'base_data_use_number',
        'base_data_use_name' => 'base_data_use_name',
        'creator_id' => 'creator_id',
        'creator_name' => 'creator_name',
        'create_time' => 'create_time',
        'modify_time' => 'modify_time',
        'modifier_id' => 'modifier_id',
        'modifier_name' => 'modifier_name'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'number' => 'setNumber',
        'name' => 'setName',
        'parent_number' => 'setParentNumber',
        'parent_id' => 'setParentId',
        'parent_name' => 'setParentName',
        'is_prepared' => 'setIsPrepared',
        'base_data_use_id' => 'setBaseDataUseId',
        'base_data_use_number' => 'setBaseDataUseNumber',
        'base_data_use_name' => 'setBaseDataUseName',
        'creator_id' => 'setCreatorId',
        'creator_name' => 'setCreatorName',
        'create_time' => 'setCreateTime',
        'modify_time' => 'setModifyTime',
        'modifier_id' => 'setModifierId',
        'modifier_name' => 'setModifierName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'number' => 'getNumber',
        'name' => 'getName',
        'parent_number' => 'getParentNumber',
        'parent_id' => 'getParentId',
        'parent_name' => 'getParentName',
        'is_prepared' => 'getIsPrepared',
        'base_data_use_id' => 'getBaseDataUseId',
        'base_data_use_number' => 'getBaseDataUseNumber',
        'base_data_use_name' => 'getBaseDataUseName',
        'creator_id' => 'getCreatorId',
        'creator_name' => 'getCreatorName',
        'create_time' => 'getCreateTime',
        'modify_time' => 'getModifyTime',
        'modifier_id' => 'getModifierId',
        'modifier_name' => 'getModifierName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['parent_number'] = isset($data['parent_number']) ? $data['parent_number'] : null;
        $this->container['parent_id'] = isset($data['parent_id']) ? $data['parent_id'] : null;
        $this->container['parent_name'] = isset($data['parent_name']) ? $data['parent_name'] : null;
        $this->container['is_prepared'] = isset($data['is_prepared']) ? $data['is_prepared'] : null;
        $this->container['base_data_use_id'] = isset($data['base_data_use_id']) ? $data['base_data_use_id'] : null;
        $this->container['base_data_use_number'] = isset($data['base_data_use_number']) ? $data['base_data_use_number'] : null;
        $this->container['base_data_use_name'] = isset($data['base_data_use_name']) ? $data['base_data_use_name'] : null;
        $this->container['creator_id'] = isset($data['creator_id']) ? $data['creator_id'] : null;
        $this->container['creator_name'] = isset($data['creator_name']) ? $data['creator_name'] : null;
        $this->container['create_time'] = isset($data['create_time']) ? $data['create_time'] : null;
        $this->container['modify_time'] = isset($data['modify_time']) ? $data['modify_time'] : null;
        $this->container['modifier_id'] = isset($data['modifier_id']) ? $data['modifier_id'] : null;
        $this->container['modifier_name'] = isset($data['modifier_name']) ? $data['modifier_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number number
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets parent_number
     *
     * @return string
     */
    public function getParentNumber()
    {
        return $this->container['parent_number'];
    }

    /**
     * Sets parent_number
     *
     * @param string $parent_number parent_number
     *
     * @return $this
     */
    public function setParentNumber($parent_number)
    {
        $this->container['parent_number'] = $parent_number;

        return $this;
    }

    /**
     * Gets parent_id
     *
     * @return string
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     *
     * @param string $parent_id parent_id
     *
     * @return $this
     */
    public function setParentId($parent_id)
    {
        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets parent_name
     *
     * @return string
     */
    public function getParentName()
    {
        return $this->container['parent_name'];
    }

    /**
     * Sets parent_name
     *
     * @param string $parent_name parent_name
     *
     * @return $this
     */
    public function setParentName($parent_name)
    {
        $this->container['parent_name'] = $parent_name;

        return $this;
    }

    /**
     * Gets is_prepared
     *
     * @return bool
     */
    public function getIsPrepared()
    {
        return $this->container['is_prepared'];
    }

    /**
     * Sets is_prepared
     *
     * @param bool $is_prepared is_prepared
     *
     * @return $this
     */
    public function setIsPrepared($is_prepared)
    {
        $this->container['is_prepared'] = $is_prepared;

        return $this;
    }

    /**
     * Gets base_data_use_id
     *
     * @return string
     */
    public function getBaseDataUseId()
    {
        return $this->container['base_data_use_id'];
    }

    /**
     * Sets base_data_use_id
     *
     * @param string $base_data_use_id base_data_use_id
     *
     * @return $this
     */
    public function setBaseDataUseId($base_data_use_id)
    {
        $this->container['base_data_use_id'] = $base_data_use_id;

        return $this;
    }

    /**
     * Gets base_data_use_number
     *
     * @return string
     */
    public function getBaseDataUseNumber()
    {
        return $this->container['base_data_use_number'];
    }

    /**
     * Sets base_data_use_number
     *
     * @param string $base_data_use_number base_data_use_number
     *
     * @return $this
     */
    public function setBaseDataUseNumber($base_data_use_number)
    {
        $this->container['base_data_use_number'] = $base_data_use_number;

        return $this;
    }

    /**
     * Gets base_data_use_name
     *
     * @return string
     */
    public function getBaseDataUseName()
    {
        return $this->container['base_data_use_name'];
    }

    /**
     * Sets base_data_use_name
     *
     * @param string $base_data_use_name base_data_use_name
     *
     * @return $this
     */
    public function setBaseDataUseName($base_data_use_name)
    {
        $this->container['base_data_use_name'] = $base_data_use_name;

        return $this;
    }

    /**
     * Gets creator_id
     *
     * @return string
     */
    public function getCreatorId()
    {
        return $this->container['creator_id'];
    }

    /**
     * Sets creator_id
     *
     * @param string $creator_id creator_id
     *
     * @return $this
     */
    public function setCreatorId($creator_id)
    {
        $this->container['creator_id'] = $creator_id;

        return $this;
    }

    /**
     * Gets creator_name
     *
     * @return string
     */
    public function getCreatorName()
    {
        return $this->container['creator_name'];
    }

    /**
     * Sets creator_name
     *
     * @param string $creator_name creator_name
     *
     * @return $this
     */
    public function setCreatorName($creator_name)
    {
        $this->container['creator_name'] = $creator_name;

        return $this;
    }

    /**
     * Gets create_time
     *
     * @return string
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param string $create_time create_time
     *
     * @return $this
     */
    public function setCreateTime($create_time)
    {
        $this->container['create_time'] = $create_time;

        return $this;
    }

    /**
     * Gets modify_time
     *
     * @return string
     */
    public function getModifyTime()
    {
        return $this->container['modify_time'];
    }

    /**
     * Sets modify_time
     *
     * @param string $modify_time modify_time
     *
     * @return $this
     */
    public function setModifyTime($modify_time)
    {
        $this->container['modify_time'] = $modify_time;

        return $this;
    }

    /**
     * Gets modifier_id
     *
     * @return string
     */
    public function getModifierId()
    {
        return $this->container['modifier_id'];
    }

    /**
     * Sets modifier_id
     *
     * @param string $modifier_id modifier_id
     *
     * @return $this
     */
    public function setModifierId($modifier_id)
    {
        $this->container['modifier_id'] = $modifier_id;

        return $this;
    }

    /**
     * Gets modifier_name
     *
     * @return string
     */
    public function getModifierName()
    {
        return $this->container['modifier_name'];
    }

    /**
     * Sets modifier_name
     *
     * @param string $modifier_name modifier_name
     *
     * @return $this
     */
    public function setModifierName($modifier_name)
    {
        $this->container['modifier_name'] = $modifier_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


