<?php
/**
 * RetailBillSaveReqMaterialEntries
 *
 * PHP version 5
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 星辰
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com_kingdee_service\data\entity;

use \ArrayAccess;
use \com_kingdee_service\ObjectSerializer;

/**
 * RetailBillSaveReqMaterialEntries Class Doc Comment
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RetailBillSaveReqMaterialEntries implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RetailBillSaveReq.MaterialEntries';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'index' => 'string',
        'material_id' => 'string',
        'sku_id' => 'string',
        'unit_id' => 'string',
        'free' => 'string',
        'price' => 'string',
        'dis_price' => 'string',
        'qty' => 'string',
        'discount_fee' => 'string',
        'all_amount' => 'string',
        'flavor' => 'string',
        'flavor_index' => 'string',
        'package_no' => 'string',
        'package_list' => '\com_kingdee_service\data\entity\PackageList[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'index' => null,
        'material_id' => null,
        'sku_id' => null,
        'unit_id' => null,
        'free' => null,
        'price' => null,
        'dis_price' => null,
        'qty' => null,
        'discount_fee' => null,
        'all_amount' => null,
        'flavor' => null,
        'flavor_index' => null,
        'package_no' => null,
        'package_list' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'index' => 'index',
        'material_id' => 'material_id',
        'sku_id' => 'sku_id',
        'unit_id' => 'unit_id',
        'free' => 'free',
        'price' => 'price',
        'dis_price' => 'dis_price',
        'qty' => 'qty',
        'discount_fee' => 'discount_fee',
        'all_amount' => 'all_amount',
        'flavor' => 'flavor',
        'flavor_index' => 'flavor_index',
        'package_no' => 'package_no',
        'package_list' => 'package_list'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'index' => 'setIndex',
        'material_id' => 'setMaterialId',
        'sku_id' => 'setSkuId',
        'unit_id' => 'setUnitId',
        'free' => 'setFree',
        'price' => 'setPrice',
        'dis_price' => 'setDisPrice',
        'qty' => 'setQty',
        'discount_fee' => 'setDiscountFee',
        'all_amount' => 'setAllAmount',
        'flavor' => 'setFlavor',
        'flavor_index' => 'setFlavorIndex',
        'package_no' => 'setPackageNo',
        'package_list' => 'setPackageList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'index' => 'getIndex',
        'material_id' => 'getMaterialId',
        'sku_id' => 'getSkuId',
        'unit_id' => 'getUnitId',
        'free' => 'getFree',
        'price' => 'getPrice',
        'dis_price' => 'getDisPrice',
        'qty' => 'getQty',
        'discount_fee' => 'getDiscountFee',
        'all_amount' => 'getAllAmount',
        'flavor' => 'getFlavor',
        'flavor_index' => 'getFlavorIndex',
        'package_no' => 'getPackageNo',
        'package_list' => 'getPackageList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['index'] = isset($data['index']) ? $data['index'] : null;
        $this->container['material_id'] = isset($data['material_id']) ? $data['material_id'] : null;
        $this->container['sku_id'] = isset($data['sku_id']) ? $data['sku_id'] : null;
        $this->container['unit_id'] = isset($data['unit_id']) ? $data['unit_id'] : null;
        $this->container['free'] = isset($data['free']) ? $data['free'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['dis_price'] = isset($data['dis_price']) ? $data['dis_price'] : null;
        $this->container['qty'] = isset($data['qty']) ? $data['qty'] : null;
        $this->container['discount_fee'] = isset($data['discount_fee']) ? $data['discount_fee'] : null;
        $this->container['all_amount'] = isset($data['all_amount']) ? $data['all_amount'] : null;
        $this->container['flavor'] = isset($data['flavor']) ? $data['flavor'] : null;
        $this->container['flavor_index'] = isset($data['flavor_index']) ? $data['flavor_index'] : null;
        $this->container['package_no'] = isset($data['package_no']) ? $data['package_no'] : null;
        $this->container['package_list'] = isset($data['package_list']) ? $data['package_list'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets index
     *
     * @return string
     */
    public function getIndex()
    {
        return $this->container['index'];
    }

    /**
     * Sets index
     *
     * @param string $index index
     *
     * @return $this
     */
    public function setIndex($index)
    {
        $this->container['index'] = $index;

        return $this;
    }

    /**
     * Gets material_id
     *
     * @return string
     */
    public function getMaterialId()
    {
        return $this->container['material_id'];
    }

    /**
     * Sets material_id
     *
     * @param string $material_id material_id
     *
     * @return $this
     */
    public function setMaterialId($material_id)
    {
        $this->container['material_id'] = $material_id;

        return $this;
    }

    /**
     * Gets sku_id
     *
     * @return string
     */
    public function getSkuId()
    {
        return $this->container['sku_id'];
    }

    /**
     * Sets sku_id
     *
     * @param string $sku_id sku_id
     *
     * @return $this
     */
    public function setSkuId($sku_id)
    {
        $this->container['sku_id'] = $sku_id;

        return $this;
    }

    /**
     * Gets unit_id
     *
     * @return string
     */
    public function getUnitId()
    {
        return $this->container['unit_id'];
    }

    /**
     * Sets unit_id
     *
     * @param string $unit_id unit_id
     *
     * @return $this
     */
    public function setUnitId($unit_id)
    {
        $this->container['unit_id'] = $unit_id;

        return $this;
    }

    /**
     * Gets free
     *
     * @return string
     */
    public function getFree()
    {
        return $this->container['free'];
    }

    /**
     * Sets free
     *
     * @param string $free free
     *
     * @return $this
     */
    public function setFree($free)
    {
        $this->container['free'] = $free;

        return $this;
    }

    /**
     * Gets price
     *
     * @return string
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param string $price price
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets dis_price
     *
     * @return string
     */
    public function getDisPrice()
    {
        return $this->container['dis_price'];
    }

    /**
     * Sets dis_price
     *
     * @param string $dis_price dis_price
     *
     * @return $this
     */
    public function setDisPrice($dis_price)
    {
        $this->container['dis_price'] = $dis_price;

        return $this;
    }

    /**
     * Gets qty
     *
     * @return string
     */
    public function getQty()
    {
        return $this->container['qty'];
    }

    /**
     * Sets qty
     *
     * @param string $qty qty
     *
     * @return $this
     */
    public function setQty($qty)
    {
        $this->container['qty'] = $qty;

        return $this;
    }

    /**
     * Gets discount_fee
     *
     * @return string
     */
    public function getDiscountFee()
    {
        return $this->container['discount_fee'];
    }

    /**
     * Sets discount_fee
     *
     * @param string $discount_fee discount_fee
     *
     * @return $this
     */
    public function setDiscountFee($discount_fee)
    {
        $this->container['discount_fee'] = $discount_fee;

        return $this;
    }

    /**
     * Gets all_amount
     *
     * @return string
     */
    public function getAllAmount()
    {
        return $this->container['all_amount'];
    }

    /**
     * Sets all_amount
     *
     * @param string $all_amount all_amount
     *
     * @return $this
     */
    public function setAllAmount($all_amount)
    {
        $this->container['all_amount'] = $all_amount;

        return $this;
    }

    /**
     * Gets flavor
     *
     * @return string
     */
    public function getFlavor()
    {
        return $this->container['flavor'];
    }

    /**
     * Sets flavor
     *
     * @param string $flavor flavor
     *
     * @return $this
     */
    public function setFlavor($flavor)
    {
        $this->container['flavor'] = $flavor;

        return $this;
    }

    /**
     * Gets flavor_index
     *
     * @return string
     */
    public function getFlavorIndex()
    {
        return $this->container['flavor_index'];
    }

    /**
     * Sets flavor_index
     *
     * @param string $flavor_index flavor_index
     *
     * @return $this
     */
    public function setFlavorIndex($flavor_index)
    {
        $this->container['flavor_index'] = $flavor_index;

        return $this;
    }

    /**
     * Gets package_no
     *
     * @return string
     */
    public function getPackageNo()
    {
        return $this->container['package_no'];
    }

    /**
     * Sets package_no
     *
     * @param string $package_no package_no
     *
     * @return $this
     */
    public function setPackageNo($package_no)
    {
        $this->container['package_no'] = $package_no;

        return $this;
    }

    /**
     * Gets package_list
     *
     * @return \com_kingdee_service\data\entity\PackageList[]
     */
    public function getPackageList()
    {
        return $this->container['package_list'];
    }

    /**
     * Sets package_list
     *
     * @param \com_kingdee_service\data\entity\PackageList[] $package_list package_list
     *
     * @return $this
     */
    public function setPackageList($package_list)
    {
        $this->container['package_list'] = $package_list;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


