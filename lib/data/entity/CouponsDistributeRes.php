<?php
/**
 * CouponsDistributeRes
 *
 * PHP version 5
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * æ˜Ÿè¾°
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com_kingdee_service\data\entity;

use \ArrayAccess;
use \com_kingdee_service\ObjectSerializer;

/**
 * CouponsDistributeRes Class Doc Comment
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CouponsDistributeRes implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CouponsDistributeRes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'coupons_no' => 'string',
        'schema_id' => 'string',
        'member_id' => 'string',
        'member_card_id' => 'string',
        'cashier_id' => 'string',
        'coupons_type' => 'string',
        'total_amt' => 'string',
        'channel' => 'string',
        'create_time' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'coupons_no' => null,
        'schema_id' => null,
        'member_id' => null,
        'member_card_id' => null,
        'cashier_id' => null,
        'coupons_type' => null,
        'total_amt' => null,
        'channel' => null,
        'create_time' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'coupons_no' => 'coupons_no',
        'schema_id' => 'schema_id',
        'member_id' => 'member_id',
        'member_card_id' => 'member_card_id',
        'cashier_id' => 'cashier_id',
        'coupons_type' => 'coupons_type',
        'total_amt' => 'total_amt',
        'channel' => 'channel',
        'create_time' => 'create_time'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'coupons_no' => 'setCouponsNo',
        'schema_id' => 'setSchemaId',
        'member_id' => 'setMemberId',
        'member_card_id' => 'setMemberCardId',
        'cashier_id' => 'setCashierId',
        'coupons_type' => 'setCouponsType',
        'total_amt' => 'setTotalAmt',
        'channel' => 'setChannel',
        'create_time' => 'setCreateTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'coupons_no' => 'getCouponsNo',
        'schema_id' => 'getSchemaId',
        'member_id' => 'getMemberId',
        'member_card_id' => 'getMemberCardId',
        'cashier_id' => 'getCashierId',
        'coupons_type' => 'getCouponsType',
        'total_amt' => 'getTotalAmt',
        'channel' => 'getChannel',
        'create_time' => 'getCreateTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['coupons_no'] = isset($data['coupons_no']) ? $data['coupons_no'] : null;
        $this->container['schema_id'] = isset($data['schema_id']) ? $data['schema_id'] : null;
        $this->container['member_id'] = isset($data['member_id']) ? $data['member_id'] : null;
        $this->container['member_card_id'] = isset($data['member_card_id']) ? $data['member_card_id'] : null;
        $this->container['cashier_id'] = isset($data['cashier_id']) ? $data['cashier_id'] : null;
        $this->container['coupons_type'] = isset($data['coupons_type']) ? $data['coupons_type'] : null;
        $this->container['total_amt'] = isset($data['total_amt']) ? $data['total_amt'] : null;
        $this->container['channel'] = isset($data['channel']) ? $data['channel'] : null;
        $this->container['create_time'] = isset($data['create_time']) ? $data['create_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets coupons_no
     *
     * @return string
     */
    public function getCouponsNo()
    {
        return $this->container['coupons_no'];
    }

    /**
     * Sets coupons_no
     *
     * @param string $coupons_no coupons_no
     *
     * @return $this
     */
    public function setCouponsNo($coupons_no)
    {
        $this->container['coupons_no'] = $coupons_no;

        return $this;
    }

    /**
     * Gets schema_id
     *
     * @return string
     */
    public function getSchemaId()
    {
        return $this->container['schema_id'];
    }

    /**
     * Sets schema_id
     *
     * @param string $schema_id schema_id
     *
     * @return $this
     */
    public function setSchemaId($schema_id)
    {
        $this->container['schema_id'] = $schema_id;

        return $this;
    }

    /**
     * Gets member_id
     *
     * @return string
     */
    public function getMemberId()
    {
        return $this->container['member_id'];
    }

    /**
     * Sets member_id
     *
     * @param string $member_id member_id
     *
     * @return $this
     */
    public function setMemberId($member_id)
    {
        $this->container['member_id'] = $member_id;

        return $this;
    }

    /**
     * Gets member_card_id
     *
     * @return string
     */
    public function getMemberCardId()
    {
        return $this->container['member_card_id'];
    }

    /**
     * Sets member_card_id
     *
     * @param string $member_card_id member_card_id
     *
     * @return $this
     */
    public function setMemberCardId($member_card_id)
    {
        $this->container['member_card_id'] = $member_card_id;

        return $this;
    }

    /**
     * Gets cashier_id
     *
     * @return string
     */
    public function getCashierId()
    {
        return $this->container['cashier_id'];
    }

    /**
     * Sets cashier_id
     *
     * @param string $cashier_id cashier_id
     *
     * @return $this
     */
    public function setCashierId($cashier_id)
    {
        $this->container['cashier_id'] = $cashier_id;

        return $this;
    }

    /**
     * Gets coupons_type
     *
     * @return string
     */
    public function getCouponsType()
    {
        return $this->container['coupons_type'];
    }

    /**
     * Sets coupons_type
     *
     * @param string $coupons_type coupons_type
     *
     * @return $this
     */
    public function setCouponsType($coupons_type)
    {
        $this->container['coupons_type'] = $coupons_type;

        return $this;
    }

    /**
     * Gets total_amt
     *
     * @return string
     */
    public function getTotalAmt()
    {
        return $this->container['total_amt'];
    }

    /**
     * Sets total_amt
     *
     * @param string $total_amt total_amt
     *
     * @return $this
     */
    public function setTotalAmt($total_amt)
    {
        $this->container['total_amt'] = $total_amt;

        return $this;
    }

    /**
     * Gets channel
     *
     * @return string
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param string $channel channel
     *
     * @return $this
     */
    public function setChannel($channel)
    {
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets create_time
     *
     * @return string
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param string $create_time create_time
     *
     * @return $this
     */
    public function setCreateTime($create_time)
    {
        $this->container['create_time'] = $create_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


