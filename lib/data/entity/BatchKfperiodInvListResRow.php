<?php
/**
 * BatchKfperiodInvListResRow
 *
 * PHP version 5
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 星辰
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com_kingdee_service\data\entity;

use \ArrayAccess;
use \com_kingdee_service\ObjectSerializer;

/**
 * BatchKfperiodInvListResRow Class Doc Comment
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BatchKfperiodInvListResRow implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BatchKfperiodInvListRes.Row';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'material_entry' => '\com_kingdee_service\data\entity\MaterIalEntry',
        'stock_entry' => '\com_kingdee_service\data\entity\StockEntry',
        'sp_entry' => '\com_kingdee_service\data\entity\SpEntry',
        'aux_prop_entry' => '\com_kingdee_service\data\entity\AuxPropEntry',
        'qty' => 'string',
        'batch_no' => 'string',
        'kf_date' => 'string',
        'kf_period' => 'int',
        'valid_date' => 'string',
        'kf_type' => 'string',
        'valid_qty' => 'string',
        'aux_qty' => 'string',
        'valid_aux_qty' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'material_entry' => null,
        'stock_entry' => null,
        'sp_entry' => null,
        'aux_prop_entry' => null,
        'qty' => null,
        'batch_no' => null,
        'kf_date' => null,
        'kf_period' => 'int32',
        'valid_date' => null,
        'kf_type' => null,
        'valid_qty' => null,
        'aux_qty' => null,
        'valid_aux_qty' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'material_entry' => 'material_entry',
        'stock_entry' => 'stock_entry',
        'sp_entry' => 'sp_entry',
        'aux_prop_entry' => 'aux_prop_entry',
        'qty' => 'qty',
        'batch_no' => 'batch_no',
        'kf_date' => 'kf_date',
        'kf_period' => 'kf_period',
        'valid_date' => 'valid_date',
        'kf_type' => 'kf_type',
        'valid_qty' => 'valid_qty',
        'aux_qty' => 'aux_qty',
        'valid_aux_qty' => 'valid_aux_qty'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'material_entry' => 'setMaterialEntry',
        'stock_entry' => 'setStockEntry',
        'sp_entry' => 'setSpEntry',
        'aux_prop_entry' => 'setAuxPropEntry',
        'qty' => 'setQty',
        'batch_no' => 'setBatchNo',
        'kf_date' => 'setKfDate',
        'kf_period' => 'setKfPeriod',
        'valid_date' => 'setValidDate',
        'kf_type' => 'setKfType',
        'valid_qty' => 'setValidQty',
        'aux_qty' => 'setAuxQty',
        'valid_aux_qty' => 'setValidAuxQty'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'material_entry' => 'getMaterialEntry',
        'stock_entry' => 'getStockEntry',
        'sp_entry' => 'getSpEntry',
        'aux_prop_entry' => 'getAuxPropEntry',
        'qty' => 'getQty',
        'batch_no' => 'getBatchNo',
        'kf_date' => 'getKfDate',
        'kf_period' => 'getKfPeriod',
        'valid_date' => 'getValidDate',
        'kf_type' => 'getKfType',
        'valid_qty' => 'getValidQty',
        'aux_qty' => 'getAuxQty',
        'valid_aux_qty' => 'getValidAuxQty'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['material_entry'] = isset($data['material_entry']) ? $data['material_entry'] : null;
        $this->container['stock_entry'] = isset($data['stock_entry']) ? $data['stock_entry'] : null;
        $this->container['sp_entry'] = isset($data['sp_entry']) ? $data['sp_entry'] : null;
        $this->container['aux_prop_entry'] = isset($data['aux_prop_entry']) ? $data['aux_prop_entry'] : null;
        $this->container['qty'] = isset($data['qty']) ? $data['qty'] : null;
        $this->container['batch_no'] = isset($data['batch_no']) ? $data['batch_no'] : null;
        $this->container['kf_date'] = isset($data['kf_date']) ? $data['kf_date'] : null;
        $this->container['kf_period'] = isset($data['kf_period']) ? $data['kf_period'] : null;
        $this->container['valid_date'] = isset($data['valid_date']) ? $data['valid_date'] : null;
        $this->container['kf_type'] = isset($data['kf_type']) ? $data['kf_type'] : null;
        $this->container['valid_qty'] = isset($data['valid_qty']) ? $data['valid_qty'] : null;
        $this->container['aux_qty'] = isset($data['aux_qty']) ? $data['aux_qty'] : null;
        $this->container['valid_aux_qty'] = isset($data['valid_aux_qty']) ? $data['valid_aux_qty'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets material_entry
     *
     * @return \com_kingdee_service\data\entity\MaterIalEntry
     */
    public function getMaterialEntry()
    {
        return $this->container['material_entry'];
    }

    /**
     * Sets material_entry
     *
     * @param \com_kingdee_service\data\entity\MaterIalEntry $material_entry material_entry
     *
     * @return $this
     */
    public function setMaterialEntry($material_entry)
    {
        $this->container['material_entry'] = $material_entry;

        return $this;
    }

    /**
     * Gets stock_entry
     *
     * @return \com_kingdee_service\data\entity\StockEntry
     */
    public function getStockEntry()
    {
        return $this->container['stock_entry'];
    }

    /**
     * Sets stock_entry
     *
     * @param \com_kingdee_service\data\entity\StockEntry $stock_entry stock_entry
     *
     * @return $this
     */
    public function setStockEntry($stock_entry)
    {
        $this->container['stock_entry'] = $stock_entry;

        return $this;
    }

    /**
     * Gets sp_entry
     *
     * @return \com_kingdee_service\data\entity\SpEntry
     */
    public function getSpEntry()
    {
        return $this->container['sp_entry'];
    }

    /**
     * Sets sp_entry
     *
     * @param \com_kingdee_service\data\entity\SpEntry $sp_entry sp_entry
     *
     * @return $this
     */
    public function setSpEntry($sp_entry)
    {
        $this->container['sp_entry'] = $sp_entry;

        return $this;
    }

    /**
     * Gets aux_prop_entry
     *
     * @return \com_kingdee_service\data\entity\AuxPropEntry
     */
    public function getAuxPropEntry()
    {
        return $this->container['aux_prop_entry'];
    }

    /**
     * Sets aux_prop_entry
     *
     * @param \com_kingdee_service\data\entity\AuxPropEntry $aux_prop_entry aux_prop_entry
     *
     * @return $this
     */
    public function setAuxPropEntry($aux_prop_entry)
    {
        $this->container['aux_prop_entry'] = $aux_prop_entry;

        return $this;
    }

    /**
     * Gets qty
     *
     * @return string
     */
    public function getQty()
    {
        return $this->container['qty'];
    }

    /**
     * Sets qty
     *
     * @param string $qty qty
     *
     * @return $this
     */
    public function setQty($qty)
    {
        $this->container['qty'] = $qty;

        return $this;
    }

    /**
     * Gets batch_no
     *
     * @return string
     */
    public function getBatchNo()
    {
        return $this->container['batch_no'];
    }

    /**
     * Sets batch_no
     *
     * @param string $batch_no batch_no
     *
     * @return $this
     */
    public function setBatchNo($batch_no)
    {
        $this->container['batch_no'] = $batch_no;

        return $this;
    }

    /**
     * Gets kf_date
     *
     * @return string
     */
    public function getKfDate()
    {
        return $this->container['kf_date'];
    }

    /**
     * Sets kf_date
     *
     * @param string $kf_date kf_date
     *
     * @return $this
     */
    public function setKfDate($kf_date)
    {
        $this->container['kf_date'] = $kf_date;

        return $this;
    }

    /**
     * Gets kf_period
     *
     * @return int
     */
    public function getKfPeriod()
    {
        return $this->container['kf_period'];
    }

    /**
     * Sets kf_period
     *
     * @param int $kf_period kf_period
     *
     * @return $this
     */
    public function setKfPeriod($kf_period)
    {
        $this->container['kf_period'] = $kf_period;

        return $this;
    }

    /**
     * Gets valid_date
     *
     * @return string
     */
    public function getValidDate()
    {
        return $this->container['valid_date'];
    }

    /**
     * Sets valid_date
     *
     * @param string $valid_date valid_date
     *
     * @return $this
     */
    public function setValidDate($valid_date)
    {
        $this->container['valid_date'] = $valid_date;

        return $this;
    }

    /**
     * Gets kf_type
     *
     * @return string
     */
    public function getKfType()
    {
        return $this->container['kf_type'];
    }

    /**
     * Sets kf_type
     *
     * @param string $kf_type kf_type
     *
     * @return $this
     */
    public function setKfType($kf_type)
    {
        $this->container['kf_type'] = $kf_type;

        return $this;
    }

    /**
     * Gets valid_qty
     *
     * @return string
     */
    public function getValidQty()
    {
        return $this->container['valid_qty'];
    }

    /**
     * Sets valid_qty
     *
     * @param string $valid_qty valid_qty
     *
     * @return $this
     */
    public function setValidQty($valid_qty)
    {
        $this->container['valid_qty'] = $valid_qty;

        return $this;
    }

    /**
     * Gets aux_qty
     *
     * @return string
     */
    public function getAuxQty()
    {
        return $this->container['aux_qty'];
    }

    /**
     * Sets aux_qty
     *
     * @param string $aux_qty aux_qty
     *
     * @return $this
     */
    public function setAuxQty($aux_qty)
    {
        $this->container['aux_qty'] = $aux_qty;

        return $this;
    }

    /**
     * Gets valid_aux_qty
     *
     * @return string
     */
    public function getValidAuxQty()
    {
        return $this->container['valid_aux_qty'];
    }

    /**
     * Sets valid_aux_qty
     *
     * @param string $valid_aux_qty valid_aux_qty
     *
     * @return $this
     */
    public function setValidAuxQty($valid_aux_qty)
    {
        $this->container['valid_aux_qty'] = $valid_aux_qty;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


