<?php
/**
 * InvoiceDetailReplyRow
 *
 * PHP version 5
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 星辰
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com_kingdee_service\data\entity;

use \ArrayAccess;
use \com_kingdee_service\ObjectSerializer;

/**
 * InvoiceDetailReplyRow Class Doc Comment
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InvoiceDetailReplyRow implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InvoiceDetailReply.Row';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'invoice_date' => 'string',
        'invoice_type' => 'string',
        'invoice_no' => 'string',
        'invoice_code' => 'string',
        'customer' => 'string',
        'tax_payer_no' => 'string',
        'address_phone' => 'string',
        'bank_account' => 'string',
        'seller' => 'string',
        'seller_tax_payer_no' => 'string',
        'seller_address_phone' => 'string',
        'seller_bank_account' => 'string',
        'amount' => 'string',
        'tax_amount' => 'string',
        'total_amount' => 'string',
        'status' => 'string',
        'remark' => 'string',
        'invoiced_status' => 'string',
        'invoiced_amount' => 'string',
        'assist_check' => 'string',
        'source_type' => '\com_kingdee_service\data\entity\Item[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'invoice_date' => null,
        'invoice_type' => null,
        'invoice_no' => null,
        'invoice_code' => null,
        'customer' => null,
        'tax_payer_no' => null,
        'address_phone' => null,
        'bank_account' => null,
        'seller' => null,
        'seller_tax_payer_no' => null,
        'seller_address_phone' => null,
        'seller_bank_account' => null,
        'amount' => null,
        'tax_amount' => null,
        'total_amount' => null,
        'status' => null,
        'remark' => null,
        'invoiced_status' => null,
        'invoiced_amount' => null,
        'assist_check' => null,
        'source_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'invoice_date' => 'invoice_date',
        'invoice_type' => 'invoice_type',
        'invoice_no' => 'invoice_no',
        'invoice_code' => 'invoice_code',
        'customer' => 'customer',
        'tax_payer_no' => 'tax_payer_no',
        'address_phone' => 'address_phone',
        'bank_account' => 'bank_account',
        'seller' => 'seller',
        'seller_tax_payer_no' => 'seller_tax_payer_no',
        'seller_address_phone' => 'seller_address_phone',
        'seller_bank_account' => 'seller_bank_account',
        'amount' => 'amount',
        'tax_amount' => 'tax_amount',
        'total_amount' => 'total_amount',
        'status' => 'status',
        'remark' => 'remark',
        'invoiced_status' => 'invoiced_status',
        'invoiced_amount' => 'invoiced_amount',
        'assist_check' => 'assist_check',
        'source_type' => 'source_type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'invoice_date' => 'setInvoiceDate',
        'invoice_type' => 'setInvoiceType',
        'invoice_no' => 'setInvoiceNo',
        'invoice_code' => 'setInvoiceCode',
        'customer' => 'setCustomer',
        'tax_payer_no' => 'setTaxPayerNo',
        'address_phone' => 'setAddressPhone',
        'bank_account' => 'setBankAccount',
        'seller' => 'setSeller',
        'seller_tax_payer_no' => 'setSellerTaxPayerNo',
        'seller_address_phone' => 'setSellerAddressPhone',
        'seller_bank_account' => 'setSellerBankAccount',
        'amount' => 'setAmount',
        'tax_amount' => 'setTaxAmount',
        'total_amount' => 'setTotalAmount',
        'status' => 'setStatus',
        'remark' => 'setRemark',
        'invoiced_status' => 'setInvoicedStatus',
        'invoiced_amount' => 'setInvoicedAmount',
        'assist_check' => 'setAssistCheck',
        'source_type' => 'setSourceType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'invoice_date' => 'getInvoiceDate',
        'invoice_type' => 'getInvoiceType',
        'invoice_no' => 'getInvoiceNo',
        'invoice_code' => 'getInvoiceCode',
        'customer' => 'getCustomer',
        'tax_payer_no' => 'getTaxPayerNo',
        'address_phone' => 'getAddressPhone',
        'bank_account' => 'getBankAccount',
        'seller' => 'getSeller',
        'seller_tax_payer_no' => 'getSellerTaxPayerNo',
        'seller_address_phone' => 'getSellerAddressPhone',
        'seller_bank_account' => 'getSellerBankAccount',
        'amount' => 'getAmount',
        'tax_amount' => 'getTaxAmount',
        'total_amount' => 'getTotalAmount',
        'status' => 'getStatus',
        'remark' => 'getRemark',
        'invoiced_status' => 'getInvoicedStatus',
        'invoiced_amount' => 'getInvoicedAmount',
        'assist_check' => 'getAssistCheck',
        'source_type' => 'getSourceType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['invoice_date'] = isset($data['invoice_date']) ? $data['invoice_date'] : null;
        $this->container['invoice_type'] = isset($data['invoice_type']) ? $data['invoice_type'] : null;
        $this->container['invoice_no'] = isset($data['invoice_no']) ? $data['invoice_no'] : null;
        $this->container['invoice_code'] = isset($data['invoice_code']) ? $data['invoice_code'] : null;
        $this->container['customer'] = isset($data['customer']) ? $data['customer'] : null;
        $this->container['tax_payer_no'] = isset($data['tax_payer_no']) ? $data['tax_payer_no'] : null;
        $this->container['address_phone'] = isset($data['address_phone']) ? $data['address_phone'] : null;
        $this->container['bank_account'] = isset($data['bank_account']) ? $data['bank_account'] : null;
        $this->container['seller'] = isset($data['seller']) ? $data['seller'] : null;
        $this->container['seller_tax_payer_no'] = isset($data['seller_tax_payer_no']) ? $data['seller_tax_payer_no'] : null;
        $this->container['seller_address_phone'] = isset($data['seller_address_phone']) ? $data['seller_address_phone'] : null;
        $this->container['seller_bank_account'] = isset($data['seller_bank_account']) ? $data['seller_bank_account'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['tax_amount'] = isset($data['tax_amount']) ? $data['tax_amount'] : null;
        $this->container['total_amount'] = isset($data['total_amount']) ? $data['total_amount'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['remark'] = isset($data['remark']) ? $data['remark'] : null;
        $this->container['invoiced_status'] = isset($data['invoiced_status']) ? $data['invoiced_status'] : null;
        $this->container['invoiced_amount'] = isset($data['invoiced_amount']) ? $data['invoiced_amount'] : null;
        $this->container['assist_check'] = isset($data['assist_check']) ? $data['assist_check'] : null;
        $this->container['source_type'] = isset($data['source_type']) ? $data['source_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets invoice_date
     *
     * @return string
     */
    public function getInvoiceDate()
    {
        return $this->container['invoice_date'];
    }

    /**
     * Sets invoice_date
     *
     * @param string $invoice_date invoice_date
     *
     * @return $this
     */
    public function setInvoiceDate($invoice_date)
    {
        $this->container['invoice_date'] = $invoice_date;

        return $this;
    }

    /**
     * Gets invoice_type
     *
     * @return string
     */
    public function getInvoiceType()
    {
        return $this->container['invoice_type'];
    }

    /**
     * Sets invoice_type
     *
     * @param string $invoice_type invoice_type
     *
     * @return $this
     */
    public function setInvoiceType($invoice_type)
    {
        $this->container['invoice_type'] = $invoice_type;

        return $this;
    }

    /**
     * Gets invoice_no
     *
     * @return string
     */
    public function getInvoiceNo()
    {
        return $this->container['invoice_no'];
    }

    /**
     * Sets invoice_no
     *
     * @param string $invoice_no invoice_no
     *
     * @return $this
     */
    public function setInvoiceNo($invoice_no)
    {
        $this->container['invoice_no'] = $invoice_no;

        return $this;
    }

    /**
     * Gets invoice_code
     *
     * @return string
     */
    public function getInvoiceCode()
    {
        return $this->container['invoice_code'];
    }

    /**
     * Sets invoice_code
     *
     * @param string $invoice_code invoice_code
     *
     * @return $this
     */
    public function setInvoiceCode($invoice_code)
    {
        $this->container['invoice_code'] = $invoice_code;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return string
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param string $customer customer
     *
     * @return $this
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets tax_payer_no
     *
     * @return string
     */
    public function getTaxPayerNo()
    {
        return $this->container['tax_payer_no'];
    }

    /**
     * Sets tax_payer_no
     *
     * @param string $tax_payer_no tax_payer_no
     *
     * @return $this
     */
    public function setTaxPayerNo($tax_payer_no)
    {
        $this->container['tax_payer_no'] = $tax_payer_no;

        return $this;
    }

    /**
     * Gets address_phone
     *
     * @return string
     */
    public function getAddressPhone()
    {
        return $this->container['address_phone'];
    }

    /**
     * Sets address_phone
     *
     * @param string $address_phone address_phone
     *
     * @return $this
     */
    public function setAddressPhone($address_phone)
    {
        $this->container['address_phone'] = $address_phone;

        return $this;
    }

    /**
     * Gets bank_account
     *
     * @return string
     */
    public function getBankAccount()
    {
        return $this->container['bank_account'];
    }

    /**
     * Sets bank_account
     *
     * @param string $bank_account bank_account
     *
     * @return $this
     */
    public function setBankAccount($bank_account)
    {
        $this->container['bank_account'] = $bank_account;

        return $this;
    }

    /**
     * Gets seller
     *
     * @return string
     */
    public function getSeller()
    {
        return $this->container['seller'];
    }

    /**
     * Sets seller
     *
     * @param string $seller seller
     *
     * @return $this
     */
    public function setSeller($seller)
    {
        $this->container['seller'] = $seller;

        return $this;
    }

    /**
     * Gets seller_tax_payer_no
     *
     * @return string
     */
    public function getSellerTaxPayerNo()
    {
        return $this->container['seller_tax_payer_no'];
    }

    /**
     * Sets seller_tax_payer_no
     *
     * @param string $seller_tax_payer_no seller_tax_payer_no
     *
     * @return $this
     */
    public function setSellerTaxPayerNo($seller_tax_payer_no)
    {
        $this->container['seller_tax_payer_no'] = $seller_tax_payer_no;

        return $this;
    }

    /**
     * Gets seller_address_phone
     *
     * @return string
     */
    public function getSellerAddressPhone()
    {
        return $this->container['seller_address_phone'];
    }

    /**
     * Sets seller_address_phone
     *
     * @param string $seller_address_phone seller_address_phone
     *
     * @return $this
     */
    public function setSellerAddressPhone($seller_address_phone)
    {
        $this->container['seller_address_phone'] = $seller_address_phone;

        return $this;
    }

    /**
     * Gets seller_bank_account
     *
     * @return string
     */
    public function getSellerBankAccount()
    {
        return $this->container['seller_bank_account'];
    }

    /**
     * Sets seller_bank_account
     *
     * @param string $seller_bank_account seller_bank_account
     *
     * @return $this
     */
    public function setSellerBankAccount($seller_bank_account)
    {
        $this->container['seller_bank_account'] = $seller_bank_account;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return string
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param string $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets tax_amount
     *
     * @return string
     */
    public function getTaxAmount()
    {
        return $this->container['tax_amount'];
    }

    /**
     * Sets tax_amount
     *
     * @param string $tax_amount tax_amount
     *
     * @return $this
     */
    public function setTaxAmount($tax_amount)
    {
        $this->container['tax_amount'] = $tax_amount;

        return $this;
    }

    /**
     * Gets total_amount
     *
     * @return string
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     *
     * @param string $total_amount total_amount
     *
     * @return $this
     */
    public function setTotalAmount($total_amount)
    {
        $this->container['total_amount'] = $total_amount;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets remark
     *
     * @return string
     */
    public function getRemark()
    {
        return $this->container['remark'];
    }

    /**
     * Sets remark
     *
     * @param string $remark remark
     *
     * @return $this
     */
    public function setRemark($remark)
    {
        $this->container['remark'] = $remark;

        return $this;
    }

    /**
     * Gets invoiced_status
     *
     * @return string
     */
    public function getInvoicedStatus()
    {
        return $this->container['invoiced_status'];
    }

    /**
     * Sets invoiced_status
     *
     * @param string $invoiced_status invoiced_status
     *
     * @return $this
     */
    public function setInvoicedStatus($invoiced_status)
    {
        $this->container['invoiced_status'] = $invoiced_status;

        return $this;
    }

    /**
     * Gets invoiced_amount
     *
     * @return string
     */
    public function getInvoicedAmount()
    {
        return $this->container['invoiced_amount'];
    }

    /**
     * Sets invoiced_amount
     *
     * @param string $invoiced_amount invoiced_amount
     *
     * @return $this
     */
    public function setInvoicedAmount($invoiced_amount)
    {
        $this->container['invoiced_amount'] = $invoiced_amount;

        return $this;
    }

    /**
     * Gets assist_check
     *
     * @return string
     */
    public function getAssistCheck()
    {
        return $this->container['assist_check'];
    }

    /**
     * Sets assist_check
     *
     * @param string $assist_check assist_check
     *
     * @return $this
     */
    public function setAssistCheck($assist_check)
    {
        $this->container['assist_check'] = $assist_check;

        return $this;
    }

    /**
     * Gets source_type
     *
     * @return \com_kingdee_service\data\entity\Item[]
     */
    public function getSourceType()
    {
        return $this->container['source_type'];
    }

    /**
     * Sets source_type
     *
     * @param \com_kingdee_service\data\entity\Item[] $source_type source_type
     *
     * @return $this
     */
    public function setSourceType($source_type)
    {
        $this->container['source_type'] = $source_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


