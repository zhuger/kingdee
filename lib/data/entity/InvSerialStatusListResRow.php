<?php
/**
 * InvSerialStatusListResRow
 *
 * PHP version 5
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 星辰
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com_kingdee_service\data\entity;

use \ArrayAccess;
use \com_kingdee_service\ObjectSerializer;

/**
 * InvSerialStatusListResRow Class Doc Comment
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InvSerialStatusListResRow implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InvSerialStatusListRes.Row';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'material_id' => 'string',
        'material_name' => 'string',
        'stock_name' => 'string',
        'sp_name' => 'string',
        'customer_name' => 'string',
        'supplier_name' => 'string',
        'bill_type_id' => 'string',
        'sn' => 'string',
        'batch_no' => 'string',
        'bill_date' => 'string',
        'serial_status' => 'string',
        'kf_date' => 'string',
        'valid_date' => 'string',
        'remain_days' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'material_id' => null,
        'material_name' => null,
        'stock_name' => null,
        'sp_name' => null,
        'customer_name' => null,
        'supplier_name' => null,
        'bill_type_id' => null,
        'sn' => null,
        'batch_no' => null,
        'bill_date' => null,
        'serial_status' => null,
        'kf_date' => null,
        'valid_date' => null,
        'remain_days' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'material_id' => 'material_id',
        'material_name' => 'material_name',
        'stock_name' => 'stock_name',
        'sp_name' => 'sp_name',
        'customer_name' => 'customer_name',
        'supplier_name' => 'supplier_name',
        'bill_type_id' => 'bill_type_id',
        'sn' => 'sn',
        'batch_no' => 'batch_no',
        'bill_date' => 'bill_date',
        'serial_status' => 'serial_status',
        'kf_date' => 'kf_date',
        'valid_date' => 'valid_date',
        'remain_days' => 'remain_days'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'material_id' => 'setMaterialId',
        'material_name' => 'setMaterialName',
        'stock_name' => 'setStockName',
        'sp_name' => 'setSpName',
        'customer_name' => 'setCustomerName',
        'supplier_name' => 'setSupplierName',
        'bill_type_id' => 'setBillTypeId',
        'sn' => 'setSn',
        'batch_no' => 'setBatchNo',
        'bill_date' => 'setBillDate',
        'serial_status' => 'setSerialStatus',
        'kf_date' => 'setKfDate',
        'valid_date' => 'setValidDate',
        'remain_days' => 'setRemainDays'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'material_id' => 'getMaterialId',
        'material_name' => 'getMaterialName',
        'stock_name' => 'getStockName',
        'sp_name' => 'getSpName',
        'customer_name' => 'getCustomerName',
        'supplier_name' => 'getSupplierName',
        'bill_type_id' => 'getBillTypeId',
        'sn' => 'getSn',
        'batch_no' => 'getBatchNo',
        'bill_date' => 'getBillDate',
        'serial_status' => 'getSerialStatus',
        'kf_date' => 'getKfDate',
        'valid_date' => 'getValidDate',
        'remain_days' => 'getRemainDays'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['material_id'] = isset($data['material_id']) ? $data['material_id'] : null;
        $this->container['material_name'] = isset($data['material_name']) ? $data['material_name'] : null;
        $this->container['stock_name'] = isset($data['stock_name']) ? $data['stock_name'] : null;
        $this->container['sp_name'] = isset($data['sp_name']) ? $data['sp_name'] : null;
        $this->container['customer_name'] = isset($data['customer_name']) ? $data['customer_name'] : null;
        $this->container['supplier_name'] = isset($data['supplier_name']) ? $data['supplier_name'] : null;
        $this->container['bill_type_id'] = isset($data['bill_type_id']) ? $data['bill_type_id'] : null;
        $this->container['sn'] = isset($data['sn']) ? $data['sn'] : null;
        $this->container['batch_no'] = isset($data['batch_no']) ? $data['batch_no'] : null;
        $this->container['bill_date'] = isset($data['bill_date']) ? $data['bill_date'] : null;
        $this->container['serial_status'] = isset($data['serial_status']) ? $data['serial_status'] : null;
        $this->container['kf_date'] = isset($data['kf_date']) ? $data['kf_date'] : null;
        $this->container['valid_date'] = isset($data['valid_date']) ? $data['valid_date'] : null;
        $this->container['remain_days'] = isset($data['remain_days']) ? $data['remain_days'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets material_id
     *
     * @return string
     */
    public function getMaterialId()
    {
        return $this->container['material_id'];
    }

    /**
     * Sets material_id
     *
     * @param string $material_id material_id
     *
     * @return $this
     */
    public function setMaterialId($material_id)
    {
        $this->container['material_id'] = $material_id;

        return $this;
    }

    /**
     * Gets material_name
     *
     * @return string
     */
    public function getMaterialName()
    {
        return $this->container['material_name'];
    }

    /**
     * Sets material_name
     *
     * @param string $material_name material_name
     *
     * @return $this
     */
    public function setMaterialName($material_name)
    {
        $this->container['material_name'] = $material_name;

        return $this;
    }

    /**
     * Gets stock_name
     *
     * @return string
     */
    public function getStockName()
    {
        return $this->container['stock_name'];
    }

    /**
     * Sets stock_name
     *
     * @param string $stock_name stock_name
     *
     * @return $this
     */
    public function setStockName($stock_name)
    {
        $this->container['stock_name'] = $stock_name;

        return $this;
    }

    /**
     * Gets sp_name
     *
     * @return string
     */
    public function getSpName()
    {
        return $this->container['sp_name'];
    }

    /**
     * Sets sp_name
     *
     * @param string $sp_name sp_name
     *
     * @return $this
     */
    public function setSpName($sp_name)
    {
        $this->container['sp_name'] = $sp_name;

        return $this;
    }

    /**
     * Gets customer_name
     *
     * @return string
     */
    public function getCustomerName()
    {
        return $this->container['customer_name'];
    }

    /**
     * Sets customer_name
     *
     * @param string $customer_name customer_name
     *
     * @return $this
     */
    public function setCustomerName($customer_name)
    {
        $this->container['customer_name'] = $customer_name;

        return $this;
    }

    /**
     * Gets supplier_name
     *
     * @return string
     */
    public function getSupplierName()
    {
        return $this->container['supplier_name'];
    }

    /**
     * Sets supplier_name
     *
     * @param string $supplier_name supplier_name
     *
     * @return $this
     */
    public function setSupplierName($supplier_name)
    {
        $this->container['supplier_name'] = $supplier_name;

        return $this;
    }

    /**
     * Gets bill_type_id
     *
     * @return string
     */
    public function getBillTypeId()
    {
        return $this->container['bill_type_id'];
    }

    /**
     * Sets bill_type_id
     *
     * @param string $bill_type_id bill_type_id
     *
     * @return $this
     */
    public function setBillTypeId($bill_type_id)
    {
        $this->container['bill_type_id'] = $bill_type_id;

        return $this;
    }

    /**
     * Gets sn
     *
     * @return string
     */
    public function getSn()
    {
        return $this->container['sn'];
    }

    /**
     * Sets sn
     *
     * @param string $sn sn
     *
     * @return $this
     */
    public function setSn($sn)
    {
        $this->container['sn'] = $sn;

        return $this;
    }

    /**
     * Gets batch_no
     *
     * @return string
     */
    public function getBatchNo()
    {
        return $this->container['batch_no'];
    }

    /**
     * Sets batch_no
     *
     * @param string $batch_no batch_no
     *
     * @return $this
     */
    public function setBatchNo($batch_no)
    {
        $this->container['batch_no'] = $batch_no;

        return $this;
    }

    /**
     * Gets bill_date
     *
     * @return string
     */
    public function getBillDate()
    {
        return $this->container['bill_date'];
    }

    /**
     * Sets bill_date
     *
     * @param string $bill_date bill_date
     *
     * @return $this
     */
    public function setBillDate($bill_date)
    {
        $this->container['bill_date'] = $bill_date;

        return $this;
    }

    /**
     * Gets serial_status
     *
     * @return string
     */
    public function getSerialStatus()
    {
        return $this->container['serial_status'];
    }

    /**
     * Sets serial_status
     *
     * @param string $serial_status serial_status
     *
     * @return $this
     */
    public function setSerialStatus($serial_status)
    {
        $this->container['serial_status'] = $serial_status;

        return $this;
    }

    /**
     * Gets kf_date
     *
     * @return string
     */
    public function getKfDate()
    {
        return $this->container['kf_date'];
    }

    /**
     * Sets kf_date
     *
     * @param string $kf_date kf_date
     *
     * @return $this
     */
    public function setKfDate($kf_date)
    {
        $this->container['kf_date'] = $kf_date;

        return $this;
    }

    /**
     * Gets valid_date
     *
     * @return string
     */
    public function getValidDate()
    {
        return $this->container['valid_date'];
    }

    /**
     * Sets valid_date
     *
     * @param string $valid_date valid_date
     *
     * @return $this
     */
    public function setValidDate($valid_date)
    {
        $this->container['valid_date'] = $valid_date;

        return $this;
    }

    /**
     * Gets remain_days
     *
     * @return int
     */
    public function getRemainDays()
    {
        return $this->container['remain_days'];
    }

    /**
     * Sets remain_days
     *
     * @param int $remain_days remain_days
     *
     * @return $this
     */
    public function setRemainDays($remain_days)
    {
        $this->container['remain_days'] = $remain_days;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


