<?php
/**
 * PromotionDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * æ˜Ÿè¾°
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com_kingdee_service\data\entity;

use \ArrayAccess;
use \com_kingdee_service\ObjectSerializer;

/**
 * PromotionDetails Class Doc Comment
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PromotionDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PromotionDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'index' => 'string',
        'material_id' => 'string',
        'sku_id' => 'string',
        'unit' => 'string',
        'promotion_amt' => 'string',
        'promotion_type' => 'string',
        'qty' => 'string',
        'promotion_schema' => 'string',
        'schema_type' => 'string',
        'activity_id' => 'string',
        'activity_no' => 'string',
        'activity_name' => 'string',
        'coupon_no' => 'string',
        'point_rule_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'index' => null,
        'material_id' => null,
        'sku_id' => null,
        'unit' => null,
        'promotion_amt' => null,
        'promotion_type' => null,
        'qty' => null,
        'promotion_schema' => null,
        'schema_type' => null,
        'activity_id' => null,
        'activity_no' => null,
        'activity_name' => null,
        'coupon_no' => null,
        'point_rule_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'index' => 'index',
        'material_id' => 'material_id',
        'sku_id' => 'sku_id',
        'unit' => 'unit',
        'promotion_amt' => 'promotion_amt',
        'promotion_type' => 'promotion_type',
        'qty' => 'qty',
        'promotion_schema' => 'promotion_schema',
        'schema_type' => 'schema_type',
        'activity_id' => 'activity_id',
        'activity_no' => 'activity_no',
        'activity_name' => 'activity_name',
        'coupon_no' => 'coupon_no',
        'point_rule_id' => 'point_rule_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'index' => 'setIndex',
        'material_id' => 'setMaterialId',
        'sku_id' => 'setSkuId',
        'unit' => 'setUnit',
        'promotion_amt' => 'setPromotionAmt',
        'promotion_type' => 'setPromotionType',
        'qty' => 'setQty',
        'promotion_schema' => 'setPromotionSchema',
        'schema_type' => 'setSchemaType',
        'activity_id' => 'setActivityId',
        'activity_no' => 'setActivityNo',
        'activity_name' => 'setActivityName',
        'coupon_no' => 'setCouponNo',
        'point_rule_id' => 'setPointRuleId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'index' => 'getIndex',
        'material_id' => 'getMaterialId',
        'sku_id' => 'getSkuId',
        'unit' => 'getUnit',
        'promotion_amt' => 'getPromotionAmt',
        'promotion_type' => 'getPromotionType',
        'qty' => 'getQty',
        'promotion_schema' => 'getPromotionSchema',
        'schema_type' => 'getSchemaType',
        'activity_id' => 'getActivityId',
        'activity_no' => 'getActivityNo',
        'activity_name' => 'getActivityName',
        'coupon_no' => 'getCouponNo',
        'point_rule_id' => 'getPointRuleId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['index'] = isset($data['index']) ? $data['index'] : null;
        $this->container['material_id'] = isset($data['material_id']) ? $data['material_id'] : null;
        $this->container['sku_id'] = isset($data['sku_id']) ? $data['sku_id'] : null;
        $this->container['unit'] = isset($data['unit']) ? $data['unit'] : null;
        $this->container['promotion_amt'] = isset($data['promotion_amt']) ? $data['promotion_amt'] : null;
        $this->container['promotion_type'] = isset($data['promotion_type']) ? $data['promotion_type'] : null;
        $this->container['qty'] = isset($data['qty']) ? $data['qty'] : null;
        $this->container['promotion_schema'] = isset($data['promotion_schema']) ? $data['promotion_schema'] : null;
        $this->container['schema_type'] = isset($data['schema_type']) ? $data['schema_type'] : null;
        $this->container['activity_id'] = isset($data['activity_id']) ? $data['activity_id'] : null;
        $this->container['activity_no'] = isset($data['activity_no']) ? $data['activity_no'] : null;
        $this->container['activity_name'] = isset($data['activity_name']) ? $data['activity_name'] : null;
        $this->container['coupon_no'] = isset($data['coupon_no']) ? $data['coupon_no'] : null;
        $this->container['point_rule_id'] = isset($data['point_rule_id']) ? $data['point_rule_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets index
     *
     * @return string
     */
    public function getIndex()
    {
        return $this->container['index'];
    }

    /**
     * Sets index
     *
     * @param string $index index
     *
     * @return $this
     */
    public function setIndex($index)
    {
        $this->container['index'] = $index;

        return $this;
    }

    /**
     * Gets material_id
     *
     * @return string
     */
    public function getMaterialId()
    {
        return $this->container['material_id'];
    }

    /**
     * Sets material_id
     *
     * @param string $material_id material_id
     *
     * @return $this
     */
    public function setMaterialId($material_id)
    {
        $this->container['material_id'] = $material_id;

        return $this;
    }

    /**
     * Gets sku_id
     *
     * @return string
     */
    public function getSkuId()
    {
        return $this->container['sku_id'];
    }

    /**
     * Sets sku_id
     *
     * @param string $sku_id sku_id
     *
     * @return $this
     */
    public function setSkuId($sku_id)
    {
        $this->container['sku_id'] = $sku_id;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return string
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param string $unit unit
     *
     * @return $this
     */
    public function setUnit($unit)
    {
        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets promotion_amt
     *
     * @return string
     */
    public function getPromotionAmt()
    {
        return $this->container['promotion_amt'];
    }

    /**
     * Sets promotion_amt
     *
     * @param string $promotion_amt promotion_amt
     *
     * @return $this
     */
    public function setPromotionAmt($promotion_amt)
    {
        $this->container['promotion_amt'] = $promotion_amt;

        return $this;
    }

    /**
     * Gets promotion_type
     *
     * @return string
     */
    public function getPromotionType()
    {
        return $this->container['promotion_type'];
    }

    /**
     * Sets promotion_type
     *
     * @param string $promotion_type promotion_type
     *
     * @return $this
     */
    public function setPromotionType($promotion_type)
    {
        $this->container['promotion_type'] = $promotion_type;

        return $this;
    }

    /**
     * Gets qty
     *
     * @return string
     */
    public function getQty()
    {
        return $this->container['qty'];
    }

    /**
     * Sets qty
     *
     * @param string $qty qty
     *
     * @return $this
     */
    public function setQty($qty)
    {
        $this->container['qty'] = $qty;

        return $this;
    }

    /**
     * Gets promotion_schema
     *
     * @return string
     */
    public function getPromotionSchema()
    {
        return $this->container['promotion_schema'];
    }

    /**
     * Sets promotion_schema
     *
     * @param string $promotion_schema promotion_schema
     *
     * @return $this
     */
    public function setPromotionSchema($promotion_schema)
    {
        $this->container['promotion_schema'] = $promotion_schema;

        return $this;
    }

    /**
     * Gets schema_type
     *
     * @return string
     */
    public function getSchemaType()
    {
        return $this->container['schema_type'];
    }

    /**
     * Sets schema_type
     *
     * @param string $schema_type schema_type
     *
     * @return $this
     */
    public function setSchemaType($schema_type)
    {
        $this->container['schema_type'] = $schema_type;

        return $this;
    }

    /**
     * Gets activity_id
     *
     * @return string
     */
    public function getActivityId()
    {
        return $this->container['activity_id'];
    }

    /**
     * Sets activity_id
     *
     * @param string $activity_id activity_id
     *
     * @return $this
     */
    public function setActivityId($activity_id)
    {
        $this->container['activity_id'] = $activity_id;

        return $this;
    }

    /**
     * Gets activity_no
     *
     * @return string
     */
    public function getActivityNo()
    {
        return $this->container['activity_no'];
    }

    /**
     * Sets activity_no
     *
     * @param string $activity_no activity_no
     *
     * @return $this
     */
    public function setActivityNo($activity_no)
    {
        $this->container['activity_no'] = $activity_no;

        return $this;
    }

    /**
     * Gets activity_name
     *
     * @return string
     */
    public function getActivityName()
    {
        return $this->container['activity_name'];
    }

    /**
     * Sets activity_name
     *
     * @param string $activity_name activity_name
     *
     * @return $this
     */
    public function setActivityName($activity_name)
    {
        $this->container['activity_name'] = $activity_name;

        return $this;
    }

    /**
     * Gets coupon_no
     *
     * @return string
     */
    public function getCouponNo()
    {
        return $this->container['coupon_no'];
    }

    /**
     * Sets coupon_no
     *
     * @param string $coupon_no coupon_no
     *
     * @return $this
     */
    public function setCouponNo($coupon_no)
    {
        $this->container['coupon_no'] = $coupon_no;

        return $this;
    }

    /**
     * Gets point_rule_id
     *
     * @return string
     */
    public function getPointRuleId()
    {
        return $this->container['point_rule_id'];
    }

    /**
     * Sets point_rule_id
     *
     * @param string $point_rule_id point_rule_id
     *
     * @return $this
     */
    public function setPointRuleId($point_rule_id)
    {
        $this->container['point_rule_id'] = $point_rule_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


