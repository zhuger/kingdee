<?php
/**
 * VoucherAttachmentListRow
 *
 * PHP version 5
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * æ˜Ÿè¾°
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com_kingdee_service\data\entity;

use \ArrayAccess;
use \com_kingdee_service\ObjectSerializer;

/**
 * VoucherAttachmentListRow Class Doc Comment
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VoucherAttachmentListRow implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'VoucherAttachmentListRow';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'name' => 'string',
        'file_type' => 'string',
        'voucher_no' => 'string',
        'voucher_period' => 'string',
        'voucher_id' => 'string',
        'voucher_amount' => 'string',
        'adjust_id' => 'string',
        'file_path' => 'string',
        'file_path_thumb_nail' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'file_type' => null,
        'voucher_no' => null,
        'voucher_period' => null,
        'voucher_id' => null,
        'voucher_amount' => null,
        'adjust_id' => null,
        'file_path' => null,
        'file_path_thumb_nail' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'file_type' => 'file_type',
        'voucher_no' => 'voucher_no',
        'voucher_period' => 'voucher_period',
        'voucher_id' => 'voucher_id',
        'voucher_amount' => 'voucher_amount',
        'adjust_id' => 'adjust_id',
        'file_path' => 'file_path',
        'file_path_thumb_nail' => 'file_path_thumb_nail'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'file_type' => 'setFileType',
        'voucher_no' => 'setVoucherNo',
        'voucher_period' => 'setVoucherPeriod',
        'voucher_id' => 'setVoucherId',
        'voucher_amount' => 'setVoucherAmount',
        'adjust_id' => 'setAdjustId',
        'file_path' => 'setFilePath',
        'file_path_thumb_nail' => 'setFilePathThumbNail'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'file_type' => 'getFileType',
        'voucher_no' => 'getVoucherNo',
        'voucher_period' => 'getVoucherPeriod',
        'voucher_id' => 'getVoucherId',
        'voucher_amount' => 'getVoucherAmount',
        'adjust_id' => 'getAdjustId',
        'file_path' => 'getFilePath',
        'file_path_thumb_nail' => 'getFilePathThumbNail'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['file_type'] = isset($data['file_type']) ? $data['file_type'] : null;
        $this->container['voucher_no'] = isset($data['voucher_no']) ? $data['voucher_no'] : null;
        $this->container['voucher_period'] = isset($data['voucher_period']) ? $data['voucher_period'] : null;
        $this->container['voucher_id'] = isset($data['voucher_id']) ? $data['voucher_id'] : null;
        $this->container['voucher_amount'] = isset($data['voucher_amount']) ? $data['voucher_amount'] : null;
        $this->container['adjust_id'] = isset($data['adjust_id']) ? $data['adjust_id'] : null;
        $this->container['file_path'] = isset($data['file_path']) ? $data['file_path'] : null;
        $this->container['file_path_thumb_nail'] = isset($data['file_path_thumb_nail']) ? $data['file_path_thumb_nail'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets file_type
     *
     * @return string
     */
    public function getFileType()
    {
        return $this->container['file_type'];
    }

    /**
     * Sets file_type
     *
     * @param string $file_type file_type
     *
     * @return $this
     */
    public function setFileType($file_type)
    {
        $this->container['file_type'] = $file_type;

        return $this;
    }

    /**
     * Gets voucher_no
     *
     * @return string
     */
    public function getVoucherNo()
    {
        return $this->container['voucher_no'];
    }

    /**
     * Sets voucher_no
     *
     * @param string $voucher_no voucher_no
     *
     * @return $this
     */
    public function setVoucherNo($voucher_no)
    {
        $this->container['voucher_no'] = $voucher_no;

        return $this;
    }

    /**
     * Gets voucher_period
     *
     * @return string
     */
    public function getVoucherPeriod()
    {
        return $this->container['voucher_period'];
    }

    /**
     * Sets voucher_period
     *
     * @param string $voucher_period voucher_period
     *
     * @return $this
     */
    public function setVoucherPeriod($voucher_period)
    {
        $this->container['voucher_period'] = $voucher_period;

        return $this;
    }

    /**
     * Gets voucher_id
     *
     * @return string
     */
    public function getVoucherId()
    {
        return $this->container['voucher_id'];
    }

    /**
     * Sets voucher_id
     *
     * @param string $voucher_id voucher_id
     *
     * @return $this
     */
    public function setVoucherId($voucher_id)
    {
        $this->container['voucher_id'] = $voucher_id;

        return $this;
    }

    /**
     * Gets voucher_amount
     *
     * @return string
     */
    public function getVoucherAmount()
    {
        return $this->container['voucher_amount'];
    }

    /**
     * Sets voucher_amount
     *
     * @param string $voucher_amount voucher_amount
     *
     * @return $this
     */
    public function setVoucherAmount($voucher_amount)
    {
        $this->container['voucher_amount'] = $voucher_amount;

        return $this;
    }

    /**
     * Gets adjust_id
     *
     * @return string
     */
    public function getAdjustId()
    {
        return $this->container['adjust_id'];
    }

    /**
     * Sets adjust_id
     *
     * @param string $adjust_id adjust_id
     *
     * @return $this
     */
    public function setAdjustId($adjust_id)
    {
        $this->container['adjust_id'] = $adjust_id;

        return $this;
    }

    /**
     * Gets file_path
     *
     * @return string
     */
    public function getFilePath()
    {
        return $this->container['file_path'];
    }

    /**
     * Sets file_path
     *
     * @param string $file_path file_path
     *
     * @return $this
     */
    public function setFilePath($file_path)
    {
        $this->container['file_path'] = $file_path;

        return $this;
    }

    /**
     * Gets file_path_thumb_nail
     *
     * @return string
     */
    public function getFilePathThumbNail()
    {
        return $this->container['file_path_thumb_nail'];
    }

    /**
     * Sets file_path_thumb_nail
     *
     * @param string $file_path_thumb_nail file_path_thumb_nail
     *
     * @return $this
     */
    public function setFilePathThumbNail($file_path_thumb_nail)
    {
        $this->container['file_path_thumb_nail'] = $file_path_thumb_nail;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


