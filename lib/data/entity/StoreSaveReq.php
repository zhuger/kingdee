<?php
/**
 * StoreSaveReq
 *
 * PHP version 5
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * æ˜Ÿè¾°
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com_kingdee_service\data\entity;

use \ArrayAccess;
use \com_kingdee_service\ObjectSerializer;

/**
 * StoreSaveReq Class Doc Comment
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StoreSaveReq implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'StoreSaveReq';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'number' => 'string',
        'name' => 'string',
        'group_name' => 'string',
        'group_id' => 'string',
        'group_number' => 'string',
        'is_allow_freight' => 'bool',
        'is_allow_neg' => 'string',
        'enable' => 'string',
        'mobile' => 'string',
        'phone' => 'string',
        'country_id' => 'string',
        'province_id' => 'string',
        'city_id' => 'string',
        'district_id' => 'string',
        'address' => 'string',
        'remark' => 'string',
        'storekeeper_id' => 'string',
        'storekeeper_number' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'number' => null,
        'name' => null,
        'group_name' => null,
        'group_id' => null,
        'group_number' => null,
        'is_allow_freight' => null,
        'is_allow_neg' => null,
        'enable' => null,
        'mobile' => null,
        'phone' => null,
        'country_id' => null,
        'province_id' => null,
        'city_id' => null,
        'district_id' => null,
        'address' => null,
        'remark' => null,
        'storekeeper_id' => null,
        'storekeeper_number' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'number' => 'number',
        'name' => 'name',
        'group_name' => 'group_name',
        'group_id' => 'group_id',
        'group_number' => 'group_number',
        'is_allow_freight' => 'is_allow_freight',
        'is_allow_neg' => 'is_allow_neg',
        'enable' => 'enable',
        'mobile' => 'mobile',
        'phone' => 'phone',
        'country_id' => 'country_id',
        'province_id' => 'province_id',
        'city_id' => 'city_id',
        'district_id' => 'district_id',
        'address' => 'address',
        'remark' => 'remark',
        'storekeeper_id' => 'storekeeper_id',
        'storekeeper_number' => 'storekeeper_number'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'number' => 'setNumber',
        'name' => 'setName',
        'group_name' => 'setGroupName',
        'group_id' => 'setGroupId',
        'group_number' => 'setGroupNumber',
        'is_allow_freight' => 'setIsAllowFreight',
        'is_allow_neg' => 'setIsAllowNeg',
        'enable' => 'setEnable',
        'mobile' => 'setMobile',
        'phone' => 'setPhone',
        'country_id' => 'setCountryId',
        'province_id' => 'setProvinceId',
        'city_id' => 'setCityId',
        'district_id' => 'setDistrictId',
        'address' => 'setAddress',
        'remark' => 'setRemark',
        'storekeeper_id' => 'setStorekeeperId',
        'storekeeper_number' => 'setStorekeeperNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'number' => 'getNumber',
        'name' => 'getName',
        'group_name' => 'getGroupName',
        'group_id' => 'getGroupId',
        'group_number' => 'getGroupNumber',
        'is_allow_freight' => 'getIsAllowFreight',
        'is_allow_neg' => 'getIsAllowNeg',
        'enable' => 'getEnable',
        'mobile' => 'getMobile',
        'phone' => 'getPhone',
        'country_id' => 'getCountryId',
        'province_id' => 'getProvinceId',
        'city_id' => 'getCityId',
        'district_id' => 'getDistrictId',
        'address' => 'getAddress',
        'remark' => 'getRemark',
        'storekeeper_id' => 'getStorekeeperId',
        'storekeeper_number' => 'getStorekeeperNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['group_name'] = isset($data['group_name']) ? $data['group_name'] : null;
        $this->container['group_id'] = isset($data['group_id']) ? $data['group_id'] : null;
        $this->container['group_number'] = isset($data['group_number']) ? $data['group_number'] : null;
        $this->container['is_allow_freight'] = isset($data['is_allow_freight']) ? $data['is_allow_freight'] : null;
        $this->container['is_allow_neg'] = isset($data['is_allow_neg']) ? $data['is_allow_neg'] : null;
        $this->container['enable'] = isset($data['enable']) ? $data['enable'] : null;
        $this->container['mobile'] = isset($data['mobile']) ? $data['mobile'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['country_id'] = isset($data['country_id']) ? $data['country_id'] : null;
        $this->container['province_id'] = isset($data['province_id']) ? $data['province_id'] : null;
        $this->container['city_id'] = isset($data['city_id']) ? $data['city_id'] : null;
        $this->container['district_id'] = isset($data['district_id']) ? $data['district_id'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['remark'] = isset($data['remark']) ? $data['remark'] : null;
        $this->container['storekeeper_id'] = isset($data['storekeeper_id']) ? $data['storekeeper_id'] : null;
        $this->container['storekeeper_number'] = isset($data['storekeeper_number']) ? $data['storekeeper_number'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number number
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets group_name
     *
     * @return string
     */
    public function getGroupName()
    {
        return $this->container['group_name'];
    }

    /**
     * Sets group_name
     *
     * @param string $group_name group_name
     *
     * @return $this
     */
    public function setGroupName($group_name)
    {
        $this->container['group_name'] = $group_name;

        return $this;
    }

    /**
     * Gets group_id
     *
     * @return string
     */
    public function getGroupId()
    {
        return $this->container['group_id'];
    }

    /**
     * Sets group_id
     *
     * @param string $group_id group_id
     *
     * @return $this
     */
    public function setGroupId($group_id)
    {
        $this->container['group_id'] = $group_id;

        return $this;
    }

    /**
     * Gets group_number
     *
     * @return string
     */
    public function getGroupNumber()
    {
        return $this->container['group_number'];
    }

    /**
     * Sets group_number
     *
     * @param string $group_number group_number
     *
     * @return $this
     */
    public function setGroupNumber($group_number)
    {
        $this->container['group_number'] = $group_number;

        return $this;
    }

    /**
     * Gets is_allow_freight
     *
     * @return bool
     */
    public function getIsAllowFreight()
    {
        return $this->container['is_allow_freight'];
    }

    /**
     * Sets is_allow_freight
     *
     * @param bool $is_allow_freight is_allow_freight
     *
     * @return $this
     */
    public function setIsAllowFreight($is_allow_freight)
    {
        $this->container['is_allow_freight'] = $is_allow_freight;

        return $this;
    }

    /**
     * Gets is_allow_neg
     *
     * @return string
     */
    public function getIsAllowNeg()
    {
        return $this->container['is_allow_neg'];
    }

    /**
     * Sets is_allow_neg
     *
     * @param string $is_allow_neg is_allow_neg
     *
     * @return $this
     */
    public function setIsAllowNeg($is_allow_neg)
    {
        $this->container['is_allow_neg'] = $is_allow_neg;

        return $this;
    }

    /**
     * Gets enable
     *
     * @return string
     */
    public function getEnable()
    {
        return $this->container['enable'];
    }

    /**
     * Sets enable
     *
     * @param string $enable enable
     *
     * @return $this
     */
    public function setEnable($enable)
    {
        $this->container['enable'] = $enable;

        return $this;
    }

    /**
     * Gets mobile
     *
     * @return string
     */
    public function getMobile()
    {
        return $this->container['mobile'];
    }

    /**
     * Sets mobile
     *
     * @param string $mobile mobile
     *
     * @return $this
     */
    public function setMobile($mobile)
    {
        $this->container['mobile'] = $mobile;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone phone
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets country_id
     *
     * @return string
     */
    public function getCountryId()
    {
        return $this->container['country_id'];
    }

    /**
     * Sets country_id
     *
     * @param string $country_id country_id
     *
     * @return $this
     */
    public function setCountryId($country_id)
    {
        $this->container['country_id'] = $country_id;

        return $this;
    }

    /**
     * Gets province_id
     *
     * @return string
     */
    public function getProvinceId()
    {
        return $this->container['province_id'];
    }

    /**
     * Sets province_id
     *
     * @param string $province_id province_id
     *
     * @return $this
     */
    public function setProvinceId($province_id)
    {
        $this->container['province_id'] = $province_id;

        return $this;
    }

    /**
     * Gets city_id
     *
     * @return string
     */
    public function getCityId()
    {
        return $this->container['city_id'];
    }

    /**
     * Sets city_id
     *
     * @param string $city_id city_id
     *
     * @return $this
     */
    public function setCityId($city_id)
    {
        $this->container['city_id'] = $city_id;

        return $this;
    }

    /**
     * Gets district_id
     *
     * @return string
     */
    public function getDistrictId()
    {
        return $this->container['district_id'];
    }

    /**
     * Sets district_id
     *
     * @param string $district_id district_id
     *
     * @return $this
     */
    public function setDistrictId($district_id)
    {
        $this->container['district_id'] = $district_id;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets remark
     *
     * @return string
     */
    public function getRemark()
    {
        return $this->container['remark'];
    }

    /**
     * Sets remark
     *
     * @param string $remark remark
     *
     * @return $this
     */
    public function setRemark($remark)
    {
        $this->container['remark'] = $remark;

        return $this;
    }

    /**
     * Gets storekeeper_id
     *
     * @return string
     */
    public function getStorekeeperId()
    {
        return $this->container['storekeeper_id'];
    }

    /**
     * Sets storekeeper_id
     *
     * @param string $storekeeper_id storekeeper_id
     *
     * @return $this
     */
    public function setStorekeeperId($storekeeper_id)
    {
        $this->container['storekeeper_id'] = $storekeeper_id;

        return $this;
    }

    /**
     * Gets storekeeper_number
     *
     * @return string
     */
    public function getStorekeeperNumber()
    {
        return $this->container['storekeeper_number'];
    }

    /**
     * Sets storekeeper_number
     *
     * @param string $storekeeper_number storekeeper_number
     *
     * @return $this
     */
    public function setStorekeeperNumber($storekeeper_number)
    {
        $this->container['storekeeper_number'] = $storekeeper_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


