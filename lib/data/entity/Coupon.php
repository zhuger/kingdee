<?php
/**
 * Coupon
 *
 * PHP version 5
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 星辰
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com_kingdee_service\data\entity;

use \ArrayAccess;
use \com_kingdee_service\ObjectSerializer;

/**
 * Coupon Class Doc Comment
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Coupon implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Coupon';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'coupon_schema_id' => 'string',
        'coupon_schema_name' => 'string',
        'qty' => 'string',
        'given_type' => 'string',
        'per_qty' => 'string',
        'terms' => 'string',
        'interval' => 'string',
        'effect_type' => 'string',
        'delay_days' => 'string',
        'begin_date' => 'string',
        'end_date' => 'string',
        'given_type_desc' => 'string',
        'effect_type_desc' => 'string',
        'effect_range' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'coupon_schema_id' => null,
        'coupon_schema_name' => null,
        'qty' => null,
        'given_type' => null,
        'per_qty' => null,
        'terms' => null,
        'interval' => null,
        'effect_type' => null,
        'delay_days' => null,
        'begin_date' => null,
        'end_date' => null,
        'given_type_desc' => null,
        'effect_type_desc' => null,
        'effect_range' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'coupon_schema_id' => 'coupon_schema_id',
        'coupon_schema_name' => 'coupon_schema_name',
        'qty' => 'qty',
        'given_type' => 'given_type',
        'per_qty' => 'per_qty',
        'terms' => 'terms',
        'interval' => 'interval',
        'effect_type' => 'effect_type',
        'delay_days' => 'delay_days',
        'begin_date' => 'begin_date',
        'end_date' => 'end_date',
        'given_type_desc' => 'given_type_desc',
        'effect_type_desc' => 'effect_type_desc',
        'effect_range' => 'effect_range'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'coupon_schema_id' => 'setCouponSchemaId',
        'coupon_schema_name' => 'setCouponSchemaName',
        'qty' => 'setQty',
        'given_type' => 'setGivenType',
        'per_qty' => 'setPerQty',
        'terms' => 'setTerms',
        'interval' => 'setInterval',
        'effect_type' => 'setEffectType',
        'delay_days' => 'setDelayDays',
        'begin_date' => 'setBeginDate',
        'end_date' => 'setEndDate',
        'given_type_desc' => 'setGivenTypeDesc',
        'effect_type_desc' => 'setEffectTypeDesc',
        'effect_range' => 'setEffectRange'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'coupon_schema_id' => 'getCouponSchemaId',
        'coupon_schema_name' => 'getCouponSchemaName',
        'qty' => 'getQty',
        'given_type' => 'getGivenType',
        'per_qty' => 'getPerQty',
        'terms' => 'getTerms',
        'interval' => 'getInterval',
        'effect_type' => 'getEffectType',
        'delay_days' => 'getDelayDays',
        'begin_date' => 'getBeginDate',
        'end_date' => 'getEndDate',
        'given_type_desc' => 'getGivenTypeDesc',
        'effect_type_desc' => 'getEffectTypeDesc',
        'effect_range' => 'getEffectRange'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['coupon_schema_id'] = isset($data['coupon_schema_id']) ? $data['coupon_schema_id'] : null;
        $this->container['coupon_schema_name'] = isset($data['coupon_schema_name']) ? $data['coupon_schema_name'] : null;
        $this->container['qty'] = isset($data['qty']) ? $data['qty'] : null;
        $this->container['given_type'] = isset($data['given_type']) ? $data['given_type'] : null;
        $this->container['per_qty'] = isset($data['per_qty']) ? $data['per_qty'] : null;
        $this->container['terms'] = isset($data['terms']) ? $data['terms'] : null;
        $this->container['interval'] = isset($data['interval']) ? $data['interval'] : null;
        $this->container['effect_type'] = isset($data['effect_type']) ? $data['effect_type'] : null;
        $this->container['delay_days'] = isset($data['delay_days']) ? $data['delay_days'] : null;
        $this->container['begin_date'] = isset($data['begin_date']) ? $data['begin_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['given_type_desc'] = isset($data['given_type_desc']) ? $data['given_type_desc'] : null;
        $this->container['effect_type_desc'] = isset($data['effect_type_desc']) ? $data['effect_type_desc'] : null;
        $this->container['effect_range'] = isset($data['effect_range']) ? $data['effect_range'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets coupon_schema_id
     *
     * @return string
     */
    public function getCouponSchemaId()
    {
        return $this->container['coupon_schema_id'];
    }

    /**
     * Sets coupon_schema_id
     *
     * @param string $coupon_schema_id coupon_schema_id
     *
     * @return $this
     */
    public function setCouponSchemaId($coupon_schema_id)
    {
        $this->container['coupon_schema_id'] = $coupon_schema_id;

        return $this;
    }

    /**
     * Gets coupon_schema_name
     *
     * @return string
     */
    public function getCouponSchemaName()
    {
        return $this->container['coupon_schema_name'];
    }

    /**
     * Sets coupon_schema_name
     *
     * @param string $coupon_schema_name coupon_schema_name
     *
     * @return $this
     */
    public function setCouponSchemaName($coupon_schema_name)
    {
        $this->container['coupon_schema_name'] = $coupon_schema_name;

        return $this;
    }

    /**
     * Gets qty
     *
     * @return string
     */
    public function getQty()
    {
        return $this->container['qty'];
    }

    /**
     * Sets qty
     *
     * @param string $qty qty
     *
     * @return $this
     */
    public function setQty($qty)
    {
        $this->container['qty'] = $qty;

        return $this;
    }

    /**
     * Gets given_type
     *
     * @return string
     */
    public function getGivenType()
    {
        return $this->container['given_type'];
    }

    /**
     * Sets given_type
     *
     * @param string $given_type given_type
     *
     * @return $this
     */
    public function setGivenType($given_type)
    {
        $this->container['given_type'] = $given_type;

        return $this;
    }

    /**
     * Gets per_qty
     *
     * @return string
     */
    public function getPerQty()
    {
        return $this->container['per_qty'];
    }

    /**
     * Sets per_qty
     *
     * @param string $per_qty per_qty
     *
     * @return $this
     */
    public function setPerQty($per_qty)
    {
        $this->container['per_qty'] = $per_qty;

        return $this;
    }

    /**
     * Gets terms
     *
     * @return string
     */
    public function getTerms()
    {
        return $this->container['terms'];
    }

    /**
     * Sets terms
     *
     * @param string $terms terms
     *
     * @return $this
     */
    public function setTerms($terms)
    {
        $this->container['terms'] = $terms;

        return $this;
    }

    /**
     * Gets interval
     *
     * @return string
     */
    public function getInterval()
    {
        return $this->container['interval'];
    }

    /**
     * Sets interval
     *
     * @param string $interval interval
     *
     * @return $this
     */
    public function setInterval($interval)
    {
        $this->container['interval'] = $interval;

        return $this;
    }

    /**
     * Gets effect_type
     *
     * @return string
     */
    public function getEffectType()
    {
        return $this->container['effect_type'];
    }

    /**
     * Sets effect_type
     *
     * @param string $effect_type effect_type
     *
     * @return $this
     */
    public function setEffectType($effect_type)
    {
        $this->container['effect_type'] = $effect_type;

        return $this;
    }

    /**
     * Gets delay_days
     *
     * @return string
     */
    public function getDelayDays()
    {
        return $this->container['delay_days'];
    }

    /**
     * Sets delay_days
     *
     * @param string $delay_days delay_days
     *
     * @return $this
     */
    public function setDelayDays($delay_days)
    {
        $this->container['delay_days'] = $delay_days;

        return $this;
    }

    /**
     * Gets begin_date
     *
     * @return string
     */
    public function getBeginDate()
    {
        return $this->container['begin_date'];
    }

    /**
     * Sets begin_date
     *
     * @param string $begin_date begin_date
     *
     * @return $this
     */
    public function setBeginDate($begin_date)
    {
        $this->container['begin_date'] = $begin_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return string
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param string $end_date end_date
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets given_type_desc
     *
     * @return string
     */
    public function getGivenTypeDesc()
    {
        return $this->container['given_type_desc'];
    }

    /**
     * Sets given_type_desc
     *
     * @param string $given_type_desc given_type_desc
     *
     * @return $this
     */
    public function setGivenTypeDesc($given_type_desc)
    {
        $this->container['given_type_desc'] = $given_type_desc;

        return $this;
    }

    /**
     * Gets effect_type_desc
     *
     * @return string
     */
    public function getEffectTypeDesc()
    {
        return $this->container['effect_type_desc'];
    }

    /**
     * Sets effect_type_desc
     *
     * @param string $effect_type_desc effect_type_desc
     *
     * @return $this
     */
    public function setEffectTypeDesc($effect_type_desc)
    {
        $this->container['effect_type_desc'] = $effect_type_desc;

        return $this;
    }

    /**
     * Gets effect_range
     *
     * @return string
     */
    public function getEffectRange()
    {
        return $this->container['effect_range'];
    }

    /**
     * Sets effect_range
     *
     * @param string $effect_range effect_range
     *
     * @return $this
     */
    public function setEffectRange($effect_range)
    {
        $this->container['effect_range'] = $effect_range;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


