<?php
/**
 * ReconciliationStatementReplyRow
 *
 * PHP version 5
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 星辰
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com_kingdee_service\data\entity;

use \ArrayAccess;
use \com_kingdee_service\ObjectSerializer;

/**
 * ReconciliationStatementReplyRow Class Doc Comment
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReconciliationStatementReplyRow implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ReconciliationStatementReply.Row';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'item_id' => 'string',
        'item_name' => 'string',
        'bill_id' => 'string',
        'bill_type' => 'string',
        'bill_no' => 'string',
        'account_check' => 'string',
        'due_date' => 'string',
        'currency' => 'string',
        'amount' => 'double',
        'amount_for' => 'double',
        'settle_amount' => 'double',
        'settle_amount_for' => 'double',
        'un_settle_amount' => 'double',
        'un_settle_amount_for' => 'double',
        'balance' => 'double',
        'balance_for' => 'double',
        'dis_amount' => 'double',
        'dis_rate' => 'string',
        'voucher_id' => 'string',
        'voucher_no' => 'string',
        'voucher_period' => 'string',
        'settle_src_bill_json' => 'string',
        'settle_src_bill' => 'string',
        'remark' => 'string',
        'invoice_status' => 'string',
        'invoiced_amount' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'item_id' => null,
        'item_name' => null,
        'bill_id' => null,
        'bill_type' => null,
        'bill_no' => null,
        'account_check' => null,
        'due_date' => null,
        'currency' => null,
        'amount' => 'double',
        'amount_for' => 'double',
        'settle_amount' => 'double',
        'settle_amount_for' => 'double',
        'un_settle_amount' => 'double',
        'un_settle_amount_for' => 'double',
        'balance' => 'double',
        'balance_for' => 'double',
        'dis_amount' => 'double',
        'dis_rate' => null,
        'voucher_id' => null,
        'voucher_no' => null,
        'voucher_period' => null,
        'settle_src_bill_json' => null,
        'settle_src_bill' => null,
        'remark' => null,
        'invoice_status' => null,
        'invoiced_amount' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'item_id' => 'item_id',
        'item_name' => 'item_name',
        'bill_id' => 'bill_id',
        'bill_type' => 'bill_type',
        'bill_no' => 'bill_no',
        'account_check' => 'account_check',
        'due_date' => 'due_date',
        'currency' => 'currency',
        'amount' => 'amount',
        'amount_for' => 'amount_for',
        'settle_amount' => 'settle_amount',
        'settle_amount_for' => 'settle_amount_for',
        'un_settle_amount' => 'un_settle_amount',
        'un_settle_amount_for' => 'un_settle_amount_for',
        'balance' => 'balance',
        'balance_for' => 'balance_for',
        'dis_amount' => 'dis_amount',
        'dis_rate' => 'dis_rate',
        'voucher_id' => 'voucher_id',
        'voucher_no' => 'voucher_no',
        'voucher_period' => 'voucher_period',
        'settle_src_bill_json' => 'settle_src_bill_json',
        'settle_src_bill' => 'settle_src_bill',
        'remark' => 'remark',
        'invoice_status' => 'invoice_status',
        'invoiced_amount' => 'invoiced_amount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'item_id' => 'setItemId',
        'item_name' => 'setItemName',
        'bill_id' => 'setBillId',
        'bill_type' => 'setBillType',
        'bill_no' => 'setBillNo',
        'account_check' => 'setAccountCheck',
        'due_date' => 'setDueDate',
        'currency' => 'setCurrency',
        'amount' => 'setAmount',
        'amount_for' => 'setAmountFor',
        'settle_amount' => 'setSettleAmount',
        'settle_amount_for' => 'setSettleAmountFor',
        'un_settle_amount' => 'setUnSettleAmount',
        'un_settle_amount_for' => 'setUnSettleAmountFor',
        'balance' => 'setBalance',
        'balance_for' => 'setBalanceFor',
        'dis_amount' => 'setDisAmount',
        'dis_rate' => 'setDisRate',
        'voucher_id' => 'setVoucherId',
        'voucher_no' => 'setVoucherNo',
        'voucher_period' => 'setVoucherPeriod',
        'settle_src_bill_json' => 'setSettleSrcBillJson',
        'settle_src_bill' => 'setSettleSrcBill',
        'remark' => 'setRemark',
        'invoice_status' => 'setInvoiceStatus',
        'invoiced_amount' => 'setInvoicedAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'item_id' => 'getItemId',
        'item_name' => 'getItemName',
        'bill_id' => 'getBillId',
        'bill_type' => 'getBillType',
        'bill_no' => 'getBillNo',
        'account_check' => 'getAccountCheck',
        'due_date' => 'getDueDate',
        'currency' => 'getCurrency',
        'amount' => 'getAmount',
        'amount_for' => 'getAmountFor',
        'settle_amount' => 'getSettleAmount',
        'settle_amount_for' => 'getSettleAmountFor',
        'un_settle_amount' => 'getUnSettleAmount',
        'un_settle_amount_for' => 'getUnSettleAmountFor',
        'balance' => 'getBalance',
        'balance_for' => 'getBalanceFor',
        'dis_amount' => 'getDisAmount',
        'dis_rate' => 'getDisRate',
        'voucher_id' => 'getVoucherId',
        'voucher_no' => 'getVoucherNo',
        'voucher_period' => 'getVoucherPeriod',
        'settle_src_bill_json' => 'getSettleSrcBillJson',
        'settle_src_bill' => 'getSettleSrcBill',
        'remark' => 'getRemark',
        'invoice_status' => 'getInvoiceStatus',
        'invoiced_amount' => 'getInvoicedAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['item_id'] = isset($data['item_id']) ? $data['item_id'] : null;
        $this->container['item_name'] = isset($data['item_name']) ? $data['item_name'] : null;
        $this->container['bill_id'] = isset($data['bill_id']) ? $data['bill_id'] : null;
        $this->container['bill_type'] = isset($data['bill_type']) ? $data['bill_type'] : null;
        $this->container['bill_no'] = isset($data['bill_no']) ? $data['bill_no'] : null;
        $this->container['account_check'] = isset($data['account_check']) ? $data['account_check'] : null;
        $this->container['due_date'] = isset($data['due_date']) ? $data['due_date'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['amount_for'] = isset($data['amount_for']) ? $data['amount_for'] : null;
        $this->container['settle_amount'] = isset($data['settle_amount']) ? $data['settle_amount'] : null;
        $this->container['settle_amount_for'] = isset($data['settle_amount_for']) ? $data['settle_amount_for'] : null;
        $this->container['un_settle_amount'] = isset($data['un_settle_amount']) ? $data['un_settle_amount'] : null;
        $this->container['un_settle_amount_for'] = isset($data['un_settle_amount_for']) ? $data['un_settle_amount_for'] : null;
        $this->container['balance'] = isset($data['balance']) ? $data['balance'] : null;
        $this->container['balance_for'] = isset($data['balance_for']) ? $data['balance_for'] : null;
        $this->container['dis_amount'] = isset($data['dis_amount']) ? $data['dis_amount'] : null;
        $this->container['dis_rate'] = isset($data['dis_rate']) ? $data['dis_rate'] : null;
        $this->container['voucher_id'] = isset($data['voucher_id']) ? $data['voucher_id'] : null;
        $this->container['voucher_no'] = isset($data['voucher_no']) ? $data['voucher_no'] : null;
        $this->container['voucher_period'] = isset($data['voucher_period']) ? $data['voucher_period'] : null;
        $this->container['settle_src_bill_json'] = isset($data['settle_src_bill_json']) ? $data['settle_src_bill_json'] : null;
        $this->container['settle_src_bill'] = isset($data['settle_src_bill']) ? $data['settle_src_bill'] : null;
        $this->container['remark'] = isset($data['remark']) ? $data['remark'] : null;
        $this->container['invoice_status'] = isset($data['invoice_status']) ? $data['invoice_status'] : null;
        $this->container['invoiced_amount'] = isset($data['invoiced_amount']) ? $data['invoiced_amount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets item_id
     *
     * @return string
     */
    public function getItemId()
    {
        return $this->container['item_id'];
    }

    /**
     * Sets item_id
     *
     * @param string $item_id item_id
     *
     * @return $this
     */
    public function setItemId($item_id)
    {
        $this->container['item_id'] = $item_id;

        return $this;
    }

    /**
     * Gets item_name
     *
     * @return string
     */
    public function getItemName()
    {
        return $this->container['item_name'];
    }

    /**
     * Sets item_name
     *
     * @param string $item_name item_name
     *
     * @return $this
     */
    public function setItemName($item_name)
    {
        $this->container['item_name'] = $item_name;

        return $this;
    }

    /**
     * Gets bill_id
     *
     * @return string
     */
    public function getBillId()
    {
        return $this->container['bill_id'];
    }

    /**
     * Sets bill_id
     *
     * @param string $bill_id bill_id
     *
     * @return $this
     */
    public function setBillId($bill_id)
    {
        $this->container['bill_id'] = $bill_id;

        return $this;
    }

    /**
     * Gets bill_type
     *
     * @return string
     */
    public function getBillType()
    {
        return $this->container['bill_type'];
    }

    /**
     * Sets bill_type
     *
     * @param string $bill_type bill_type
     *
     * @return $this
     */
    public function setBillType($bill_type)
    {
        $this->container['bill_type'] = $bill_type;

        return $this;
    }

    /**
     * Gets bill_no
     *
     * @return string
     */
    public function getBillNo()
    {
        return $this->container['bill_no'];
    }

    /**
     * Sets bill_no
     *
     * @param string $bill_no bill_no
     *
     * @return $this
     */
    public function setBillNo($bill_no)
    {
        $this->container['bill_no'] = $bill_no;

        return $this;
    }

    /**
     * Gets account_check
     *
     * @return string
     */
    public function getAccountCheck()
    {
        return $this->container['account_check'];
    }

    /**
     * Sets account_check
     *
     * @param string $account_check account_check
     *
     * @return $this
     */
    public function setAccountCheck($account_check)
    {
        $this->container['account_check'] = $account_check;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return string
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param string $due_date due_date
     *
     * @return $this
     */
    public function setDueDate($due_date)
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return double
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param double $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets amount_for
     *
     * @return double
     */
    public function getAmountFor()
    {
        return $this->container['amount_for'];
    }

    /**
     * Sets amount_for
     *
     * @param double $amount_for amount_for
     *
     * @return $this
     */
    public function setAmountFor($amount_for)
    {
        $this->container['amount_for'] = $amount_for;

        return $this;
    }

    /**
     * Gets settle_amount
     *
     * @return double
     */
    public function getSettleAmount()
    {
        return $this->container['settle_amount'];
    }

    /**
     * Sets settle_amount
     *
     * @param double $settle_amount settle_amount
     *
     * @return $this
     */
    public function setSettleAmount($settle_amount)
    {
        $this->container['settle_amount'] = $settle_amount;

        return $this;
    }

    /**
     * Gets settle_amount_for
     *
     * @return double
     */
    public function getSettleAmountFor()
    {
        return $this->container['settle_amount_for'];
    }

    /**
     * Sets settle_amount_for
     *
     * @param double $settle_amount_for settle_amount_for
     *
     * @return $this
     */
    public function setSettleAmountFor($settle_amount_for)
    {
        $this->container['settle_amount_for'] = $settle_amount_for;

        return $this;
    }

    /**
     * Gets un_settle_amount
     *
     * @return double
     */
    public function getUnSettleAmount()
    {
        return $this->container['un_settle_amount'];
    }

    /**
     * Sets un_settle_amount
     *
     * @param double $un_settle_amount un_settle_amount
     *
     * @return $this
     */
    public function setUnSettleAmount($un_settle_amount)
    {
        $this->container['un_settle_amount'] = $un_settle_amount;

        return $this;
    }

    /**
     * Gets un_settle_amount_for
     *
     * @return double
     */
    public function getUnSettleAmountFor()
    {
        return $this->container['un_settle_amount_for'];
    }

    /**
     * Sets un_settle_amount_for
     *
     * @param double $un_settle_amount_for un_settle_amount_for
     *
     * @return $this
     */
    public function setUnSettleAmountFor($un_settle_amount_for)
    {
        $this->container['un_settle_amount_for'] = $un_settle_amount_for;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return double
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param double $balance balance
     *
     * @return $this
     */
    public function setBalance($balance)
    {
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets balance_for
     *
     * @return double
     */
    public function getBalanceFor()
    {
        return $this->container['balance_for'];
    }

    /**
     * Sets balance_for
     *
     * @param double $balance_for balance_for
     *
     * @return $this
     */
    public function setBalanceFor($balance_for)
    {
        $this->container['balance_for'] = $balance_for;

        return $this;
    }

    /**
     * Gets dis_amount
     *
     * @return double
     */
    public function getDisAmount()
    {
        return $this->container['dis_amount'];
    }

    /**
     * Sets dis_amount
     *
     * @param double $dis_amount dis_amount
     *
     * @return $this
     */
    public function setDisAmount($dis_amount)
    {
        $this->container['dis_amount'] = $dis_amount;

        return $this;
    }

    /**
     * Gets dis_rate
     *
     * @return string
     */
    public function getDisRate()
    {
        return $this->container['dis_rate'];
    }

    /**
     * Sets dis_rate
     *
     * @param string $dis_rate dis_rate
     *
     * @return $this
     */
    public function setDisRate($dis_rate)
    {
        $this->container['dis_rate'] = $dis_rate;

        return $this;
    }

    /**
     * Gets voucher_id
     *
     * @return string
     */
    public function getVoucherId()
    {
        return $this->container['voucher_id'];
    }

    /**
     * Sets voucher_id
     *
     * @param string $voucher_id voucher_id
     *
     * @return $this
     */
    public function setVoucherId($voucher_id)
    {
        $this->container['voucher_id'] = $voucher_id;

        return $this;
    }

    /**
     * Gets voucher_no
     *
     * @return string
     */
    public function getVoucherNo()
    {
        return $this->container['voucher_no'];
    }

    /**
     * Sets voucher_no
     *
     * @param string $voucher_no voucher_no
     *
     * @return $this
     */
    public function setVoucherNo($voucher_no)
    {
        $this->container['voucher_no'] = $voucher_no;

        return $this;
    }

    /**
     * Gets voucher_period
     *
     * @return string
     */
    public function getVoucherPeriod()
    {
        return $this->container['voucher_period'];
    }

    /**
     * Sets voucher_period
     *
     * @param string $voucher_period voucher_period
     *
     * @return $this
     */
    public function setVoucherPeriod($voucher_period)
    {
        $this->container['voucher_period'] = $voucher_period;

        return $this;
    }

    /**
     * Gets settle_src_bill_json
     *
     * @return string
     */
    public function getSettleSrcBillJson()
    {
        return $this->container['settle_src_bill_json'];
    }

    /**
     * Sets settle_src_bill_json
     *
     * @param string $settle_src_bill_json settle_src_bill_json
     *
     * @return $this
     */
    public function setSettleSrcBillJson($settle_src_bill_json)
    {
        $this->container['settle_src_bill_json'] = $settle_src_bill_json;

        return $this;
    }

    /**
     * Gets settle_src_bill
     *
     * @return string
     */
    public function getSettleSrcBill()
    {
        return $this->container['settle_src_bill'];
    }

    /**
     * Sets settle_src_bill
     *
     * @param string $settle_src_bill settle_src_bill
     *
     * @return $this
     */
    public function setSettleSrcBill($settle_src_bill)
    {
        $this->container['settle_src_bill'] = $settle_src_bill;

        return $this;
    }

    /**
     * Gets remark
     *
     * @return string
     */
    public function getRemark()
    {
        return $this->container['remark'];
    }

    /**
     * Sets remark
     *
     * @param string $remark remark
     *
     * @return $this
     */
    public function setRemark($remark)
    {
        $this->container['remark'] = $remark;

        return $this;
    }

    /**
     * Gets invoice_status
     *
     * @return string
     */
    public function getInvoiceStatus()
    {
        return $this->container['invoice_status'];
    }

    /**
     * Sets invoice_status
     *
     * @param string $invoice_status invoice_status
     *
     * @return $this
     */
    public function setInvoiceStatus($invoice_status)
    {
        $this->container['invoice_status'] = $invoice_status;

        return $this;
    }

    /**
     * Gets invoiced_amount
     *
     * @return double
     */
    public function getInvoicedAmount()
    {
        return $this->container['invoiced_amount'];
    }

    /**
     * Sets invoiced_amount
     *
     * @param double $invoiced_amount invoiced_amount
     *
     * @return $this
     */
    public function setInvoicedAmount($invoiced_amount)
    {
        $this->container['invoiced_amount'] = $invoiced_amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


