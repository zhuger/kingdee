<?php
/**
 * InvTfDiffListResRow
 *
 * PHP version 5
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * æ˜Ÿè¾°
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com_kingdee_service\data\entity;

use \ArrayAccess;
use \com_kingdee_service\ObjectSerializer;

/**
 * InvTfDiffListResRow Class Doc Comment
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InvTfDiffListResRow implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InvTfDiffListRes.Row';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'bill_date' => 'string',
        'id' => 'string',
        'bill_no' => 'string',
        'dept_id' => 'string',
        'dept_name' => 'string',
        'dept_number' => 'string',
        'out_dept_id' => 'string',
        'out_dept_name' => 'string',
        'out_dept_number' => 'string',
        'trans_type' => 'string',
        'diff_status' => 'string',
        'transfer_status' => 'string',
        'material_entity' => '\com_kingdee_service\data\entity\RowMaterialEntity[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'bill_date' => null,
        'id' => null,
        'bill_no' => null,
        'dept_id' => null,
        'dept_name' => null,
        'dept_number' => null,
        'out_dept_id' => null,
        'out_dept_name' => null,
        'out_dept_number' => null,
        'trans_type' => null,
        'diff_status' => null,
        'transfer_status' => null,
        'material_entity' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bill_date' => 'bill_date',
        'id' => 'id',
        'bill_no' => 'bill_no',
        'dept_id' => 'dept_id',
        'dept_name' => 'dept_name',
        'dept_number' => 'dept_number',
        'out_dept_id' => 'out_dept_id',
        'out_dept_name' => 'out_dept_name',
        'out_dept_number' => 'out_dept_number',
        'trans_type' => 'trans_type',
        'diff_status' => 'diff_status',
        'transfer_status' => 'transfer_status',
        'material_entity' => 'material_entity'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bill_date' => 'setBillDate',
        'id' => 'setId',
        'bill_no' => 'setBillNo',
        'dept_id' => 'setDeptId',
        'dept_name' => 'setDeptName',
        'dept_number' => 'setDeptNumber',
        'out_dept_id' => 'setOutDeptId',
        'out_dept_name' => 'setOutDeptName',
        'out_dept_number' => 'setOutDeptNumber',
        'trans_type' => 'setTransType',
        'diff_status' => 'setDiffStatus',
        'transfer_status' => 'setTransferStatus',
        'material_entity' => 'setMaterialEntity'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bill_date' => 'getBillDate',
        'id' => 'getId',
        'bill_no' => 'getBillNo',
        'dept_id' => 'getDeptId',
        'dept_name' => 'getDeptName',
        'dept_number' => 'getDeptNumber',
        'out_dept_id' => 'getOutDeptId',
        'out_dept_name' => 'getOutDeptName',
        'out_dept_number' => 'getOutDeptNumber',
        'trans_type' => 'getTransType',
        'diff_status' => 'getDiffStatus',
        'transfer_status' => 'getTransferStatus',
        'material_entity' => 'getMaterialEntity'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bill_date'] = isset($data['bill_date']) ? $data['bill_date'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['bill_no'] = isset($data['bill_no']) ? $data['bill_no'] : null;
        $this->container['dept_id'] = isset($data['dept_id']) ? $data['dept_id'] : null;
        $this->container['dept_name'] = isset($data['dept_name']) ? $data['dept_name'] : null;
        $this->container['dept_number'] = isset($data['dept_number']) ? $data['dept_number'] : null;
        $this->container['out_dept_id'] = isset($data['out_dept_id']) ? $data['out_dept_id'] : null;
        $this->container['out_dept_name'] = isset($data['out_dept_name']) ? $data['out_dept_name'] : null;
        $this->container['out_dept_number'] = isset($data['out_dept_number']) ? $data['out_dept_number'] : null;
        $this->container['trans_type'] = isset($data['trans_type']) ? $data['trans_type'] : null;
        $this->container['diff_status'] = isset($data['diff_status']) ? $data['diff_status'] : null;
        $this->container['transfer_status'] = isset($data['transfer_status']) ? $data['transfer_status'] : null;
        $this->container['material_entity'] = isset($data['material_entity']) ? $data['material_entity'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bill_date
     *
     * @return string
     */
    public function getBillDate()
    {
        return $this->container['bill_date'];
    }

    /**
     * Sets bill_date
     *
     * @param string $bill_date bill_date
     *
     * @return $this
     */
    public function setBillDate($bill_date)
    {
        $this->container['bill_date'] = $bill_date;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets bill_no
     *
     * @return string
     */
    public function getBillNo()
    {
        return $this->container['bill_no'];
    }

    /**
     * Sets bill_no
     *
     * @param string $bill_no bill_no
     *
     * @return $this
     */
    public function setBillNo($bill_no)
    {
        $this->container['bill_no'] = $bill_no;

        return $this;
    }

    /**
     * Gets dept_id
     *
     * @return string
     */
    public function getDeptId()
    {
        return $this->container['dept_id'];
    }

    /**
     * Sets dept_id
     *
     * @param string $dept_id dept_id
     *
     * @return $this
     */
    public function setDeptId($dept_id)
    {
        $this->container['dept_id'] = $dept_id;

        return $this;
    }

    /**
     * Gets dept_name
     *
     * @return string
     */
    public function getDeptName()
    {
        return $this->container['dept_name'];
    }

    /**
     * Sets dept_name
     *
     * @param string $dept_name dept_name
     *
     * @return $this
     */
    public function setDeptName($dept_name)
    {
        $this->container['dept_name'] = $dept_name;

        return $this;
    }

    /**
     * Gets dept_number
     *
     * @return string
     */
    public function getDeptNumber()
    {
        return $this->container['dept_number'];
    }

    /**
     * Sets dept_number
     *
     * @param string $dept_number dept_number
     *
     * @return $this
     */
    public function setDeptNumber($dept_number)
    {
        $this->container['dept_number'] = $dept_number;

        return $this;
    }

    /**
     * Gets out_dept_id
     *
     * @return string
     */
    public function getOutDeptId()
    {
        return $this->container['out_dept_id'];
    }

    /**
     * Sets out_dept_id
     *
     * @param string $out_dept_id out_dept_id
     *
     * @return $this
     */
    public function setOutDeptId($out_dept_id)
    {
        $this->container['out_dept_id'] = $out_dept_id;

        return $this;
    }

    /**
     * Gets out_dept_name
     *
     * @return string
     */
    public function getOutDeptName()
    {
        return $this->container['out_dept_name'];
    }

    /**
     * Sets out_dept_name
     *
     * @param string $out_dept_name out_dept_name
     *
     * @return $this
     */
    public function setOutDeptName($out_dept_name)
    {
        $this->container['out_dept_name'] = $out_dept_name;

        return $this;
    }

    /**
     * Gets out_dept_number
     *
     * @return string
     */
    public function getOutDeptNumber()
    {
        return $this->container['out_dept_number'];
    }

    /**
     * Sets out_dept_number
     *
     * @param string $out_dept_number out_dept_number
     *
     * @return $this
     */
    public function setOutDeptNumber($out_dept_number)
    {
        $this->container['out_dept_number'] = $out_dept_number;

        return $this;
    }

    /**
     * Gets trans_type
     *
     * @return string
     */
    public function getTransType()
    {
        return $this->container['trans_type'];
    }

    /**
     * Sets trans_type
     *
     * @param string $trans_type trans_type
     *
     * @return $this
     */
    public function setTransType($trans_type)
    {
        $this->container['trans_type'] = $trans_type;

        return $this;
    }

    /**
     * Gets diff_status
     *
     * @return string
     */
    public function getDiffStatus()
    {
        return $this->container['diff_status'];
    }

    /**
     * Sets diff_status
     *
     * @param string $diff_status diff_status
     *
     * @return $this
     */
    public function setDiffStatus($diff_status)
    {
        $this->container['diff_status'] = $diff_status;

        return $this;
    }

    /**
     * Gets transfer_status
     *
     * @return string
     */
    public function getTransferStatus()
    {
        return $this->container['transfer_status'];
    }

    /**
     * Sets transfer_status
     *
     * @param string $transfer_status transfer_status
     *
     * @return $this
     */
    public function setTransferStatus($transfer_status)
    {
        $this->container['transfer_status'] = $transfer_status;

        return $this;
    }

    /**
     * Gets material_entity
     *
     * @return \com_kingdee_service\data\entity\RowMaterialEntity[]
     */
    public function getMaterialEntity()
    {
        return $this->container['material_entity'];
    }

    /**
     * Sets material_entity
     *
     * @param \com_kingdee_service\data\entity\RowMaterialEntity[] $material_entity material_entity
     *
     * @return $this
     */
    public function setMaterialEntity($material_entity)
    {
        $this->container['material_entity'] = $material_entity;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


