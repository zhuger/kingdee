<?php
/**
 * PointCash
 *
 * PHP version 5
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 星辰
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com_kingdee_service\data\entity;

use \ArrayAccess;
use \com_kingdee_service\ObjectSerializer;

/**
 * PointCash Class Doc Comment
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PointCash implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PointCash';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'de_point' => 'string',
        'de_amount' => 'string',
        'has_attain_amount' => 'bool',
        'attain_amount' => 'string',
        'has_attain_point' => 'bool',
        'use_point' => 'string',
        'base_line' => 'string',
        'single_point' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'de_point' => null,
        'de_amount' => null,
        'has_attain_amount' => null,
        'attain_amount' => null,
        'has_attain_point' => null,
        'use_point' => null,
        'base_line' => null,
        'single_point' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'de_point' => 'de_point',
        'de_amount' => 'de_amount',
        'has_attain_amount' => 'has_attain_amount',
        'attain_amount' => 'attain_amount',
        'has_attain_point' => 'has_attain_point',
        'use_point' => 'use_point',
        'base_line' => 'base_line',
        'single_point' => 'single_point'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'de_point' => 'setDePoint',
        'de_amount' => 'setDeAmount',
        'has_attain_amount' => 'setHasAttainAmount',
        'attain_amount' => 'setAttainAmount',
        'has_attain_point' => 'setHasAttainPoint',
        'use_point' => 'setUsePoint',
        'base_line' => 'setBaseLine',
        'single_point' => 'setSinglePoint'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'de_point' => 'getDePoint',
        'de_amount' => 'getDeAmount',
        'has_attain_amount' => 'getHasAttainAmount',
        'attain_amount' => 'getAttainAmount',
        'has_attain_point' => 'getHasAttainPoint',
        'use_point' => 'getUsePoint',
        'base_line' => 'getBaseLine',
        'single_point' => 'getSinglePoint'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['de_point'] = isset($data['de_point']) ? $data['de_point'] : null;
        $this->container['de_amount'] = isset($data['de_amount']) ? $data['de_amount'] : null;
        $this->container['has_attain_amount'] = isset($data['has_attain_amount']) ? $data['has_attain_amount'] : null;
        $this->container['attain_amount'] = isset($data['attain_amount']) ? $data['attain_amount'] : null;
        $this->container['has_attain_point'] = isset($data['has_attain_point']) ? $data['has_attain_point'] : null;
        $this->container['use_point'] = isset($data['use_point']) ? $data['use_point'] : null;
        $this->container['base_line'] = isset($data['base_line']) ? $data['base_line'] : null;
        $this->container['single_point'] = isset($data['single_point']) ? $data['single_point'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets de_point
     *
     * @return string
     */
    public function getDePoint()
    {
        return $this->container['de_point'];
    }

    /**
     * Sets de_point
     *
     * @param string $de_point de_point
     *
     * @return $this
     */
    public function setDePoint($de_point)
    {
        $this->container['de_point'] = $de_point;

        return $this;
    }

    /**
     * Gets de_amount
     *
     * @return string
     */
    public function getDeAmount()
    {
        return $this->container['de_amount'];
    }

    /**
     * Sets de_amount
     *
     * @param string $de_amount de_amount
     *
     * @return $this
     */
    public function setDeAmount($de_amount)
    {
        $this->container['de_amount'] = $de_amount;

        return $this;
    }

    /**
     * Gets has_attain_amount
     *
     * @return bool
     */
    public function getHasAttainAmount()
    {
        return $this->container['has_attain_amount'];
    }

    /**
     * Sets has_attain_amount
     *
     * @param bool $has_attain_amount has_attain_amount
     *
     * @return $this
     */
    public function setHasAttainAmount($has_attain_amount)
    {
        $this->container['has_attain_amount'] = $has_attain_amount;

        return $this;
    }

    /**
     * Gets attain_amount
     *
     * @return string
     */
    public function getAttainAmount()
    {
        return $this->container['attain_amount'];
    }

    /**
     * Sets attain_amount
     *
     * @param string $attain_amount attain_amount
     *
     * @return $this
     */
    public function setAttainAmount($attain_amount)
    {
        $this->container['attain_amount'] = $attain_amount;

        return $this;
    }

    /**
     * Gets has_attain_point
     *
     * @return bool
     */
    public function getHasAttainPoint()
    {
        return $this->container['has_attain_point'];
    }

    /**
     * Sets has_attain_point
     *
     * @param bool $has_attain_point has_attain_point
     *
     * @return $this
     */
    public function setHasAttainPoint($has_attain_point)
    {
        $this->container['has_attain_point'] = $has_attain_point;

        return $this;
    }

    /**
     * Gets use_point
     *
     * @return string
     */
    public function getUsePoint()
    {
        return $this->container['use_point'];
    }

    /**
     * Sets use_point
     *
     * @param string $use_point use_point
     *
     * @return $this
     */
    public function setUsePoint($use_point)
    {
        $this->container['use_point'] = $use_point;

        return $this;
    }

    /**
     * Gets base_line
     *
     * @return string
     */
    public function getBaseLine()
    {
        return $this->container['base_line'];
    }

    /**
     * Sets base_line
     *
     * @param string $base_line base_line
     *
     * @return $this
     */
    public function setBaseLine($base_line)
    {
        $this->container['base_line'] = $base_line;

        return $this;
    }

    /**
     * Gets single_point
     *
     * @return string
     */
    public function getSinglePoint()
    {
        return $this->container['single_point'];
    }

    /**
     * Sets single_point
     *
     * @param string $single_point single_point
     *
     * @return $this
     */
    public function setSinglePoint($single_point)
    {
        $this->container['single_point'] = $single_point;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


