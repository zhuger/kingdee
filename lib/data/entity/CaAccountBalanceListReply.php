<?php
/**
 * CaAccountBalanceListReply
 *
 * PHP version 5
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 星辰
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com_kingdee_service\data\entity;

use \ArrayAccess;
use \com_kingdee_service\ObjectSerializer;

/**
 * CaAccountBalanceListReply Class Doc Comment
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CaAccountBalanceListReply implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CaAccountBalanceListReply';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'total_balance' => 'string',
        'yesterday_debit' => 'string',
        'yesterday_credit' => 'string',
        'total_month_debit' => 'string',
        'total_month_credit' => 'string',
        'account_balance_list' => '\com_kingdee_service\data\entity\CaAccountBalanceListReplyAccountBalance[]',
        'permission' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'total_balance' => null,
        'yesterday_debit' => null,
        'yesterday_credit' => null,
        'total_month_debit' => null,
        'total_month_credit' => null,
        'account_balance_list' => null,
        'permission' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'total_balance' => 'total_balance',
        'yesterday_debit' => 'yesterday_debit',
        'yesterday_credit' => 'yesterday_credit',
        'total_month_debit' => 'total_month_debit',
        'total_month_credit' => 'total_month_credit',
        'account_balance_list' => 'account_balance_list',
        'permission' => 'permission'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'total_balance' => 'setTotalBalance',
        'yesterday_debit' => 'setYesterdayDebit',
        'yesterday_credit' => 'setYesterdayCredit',
        'total_month_debit' => 'setTotalMonthDebit',
        'total_month_credit' => 'setTotalMonthCredit',
        'account_balance_list' => 'setAccountBalanceList',
        'permission' => 'setPermission'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'total_balance' => 'getTotalBalance',
        'yesterday_debit' => 'getYesterdayDebit',
        'yesterday_credit' => 'getYesterdayCredit',
        'total_month_debit' => 'getTotalMonthDebit',
        'total_month_credit' => 'getTotalMonthCredit',
        'account_balance_list' => 'getAccountBalanceList',
        'permission' => 'getPermission'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['total_balance'] = isset($data['total_balance']) ? $data['total_balance'] : null;
        $this->container['yesterday_debit'] = isset($data['yesterday_debit']) ? $data['yesterday_debit'] : null;
        $this->container['yesterday_credit'] = isset($data['yesterday_credit']) ? $data['yesterday_credit'] : null;
        $this->container['total_month_debit'] = isset($data['total_month_debit']) ? $data['total_month_debit'] : null;
        $this->container['total_month_credit'] = isset($data['total_month_credit']) ? $data['total_month_credit'] : null;
        $this->container['account_balance_list'] = isset($data['account_balance_list']) ? $data['account_balance_list'] : null;
        $this->container['permission'] = isset($data['permission']) ? $data['permission'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets total_balance
     *
     * @return string
     */
    public function getTotalBalance()
    {
        return $this->container['total_balance'];
    }

    /**
     * Sets total_balance
     *
     * @param string $total_balance total_balance
     *
     * @return $this
     */
    public function setTotalBalance($total_balance)
    {
        $this->container['total_balance'] = $total_balance;

        return $this;
    }

    /**
     * Gets yesterday_debit
     *
     * @return string
     */
    public function getYesterdayDebit()
    {
        return $this->container['yesterday_debit'];
    }

    /**
     * Sets yesterday_debit
     *
     * @param string $yesterday_debit yesterday_debit
     *
     * @return $this
     */
    public function setYesterdayDebit($yesterday_debit)
    {
        $this->container['yesterday_debit'] = $yesterday_debit;

        return $this;
    }

    /**
     * Gets yesterday_credit
     *
     * @return string
     */
    public function getYesterdayCredit()
    {
        return $this->container['yesterday_credit'];
    }

    /**
     * Sets yesterday_credit
     *
     * @param string $yesterday_credit yesterday_credit
     *
     * @return $this
     */
    public function setYesterdayCredit($yesterday_credit)
    {
        $this->container['yesterday_credit'] = $yesterday_credit;

        return $this;
    }

    /**
     * Gets total_month_debit
     *
     * @return string
     */
    public function getTotalMonthDebit()
    {
        return $this->container['total_month_debit'];
    }

    /**
     * Sets total_month_debit
     *
     * @param string $total_month_debit total_month_debit
     *
     * @return $this
     */
    public function setTotalMonthDebit($total_month_debit)
    {
        $this->container['total_month_debit'] = $total_month_debit;

        return $this;
    }

    /**
     * Gets total_month_credit
     *
     * @return string
     */
    public function getTotalMonthCredit()
    {
        return $this->container['total_month_credit'];
    }

    /**
     * Sets total_month_credit
     *
     * @param string $total_month_credit total_month_credit
     *
     * @return $this
     */
    public function setTotalMonthCredit($total_month_credit)
    {
        $this->container['total_month_credit'] = $total_month_credit;

        return $this;
    }

    /**
     * Gets account_balance_list
     *
     * @return \com_kingdee_service\data\entity\CaAccountBalanceListReplyAccountBalance[]
     */
    public function getAccountBalanceList()
    {
        return $this->container['account_balance_list'];
    }

    /**
     * Sets account_balance_list
     *
     * @param \com_kingdee_service\data\entity\CaAccountBalanceListReplyAccountBalance[] $account_balance_list account_balance_list
     *
     * @return $this
     */
    public function setAccountBalanceList($account_balance_list)
    {
        $this->container['account_balance_list'] = $account_balance_list;

        return $this;
    }

    /**
     * Gets permission
     *
     * @return bool
     */
    public function getPermission()
    {
        return $this->container['permission'];
    }

    /**
     * Sets permission
     *
     * @param bool $permission permission
     *
     * @return $this
     */
    public function setPermission($permission)
    {
        $this->container['permission'] = $permission;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


