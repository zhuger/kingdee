<?php
/**
 * MallPreWriteOffReqMemberDeals
 *
 * PHP version 5
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 星辰
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com_kingdee_service\data\entity;

use \ArrayAccess;
use \com_kingdee_service\ObjectSerializer;

/**
 * MallPreWriteOffReqMemberDeals Class Doc Comment
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MallPreWriteOffReqMemberDeals implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MallPreWriteOffReq.MemberDeals';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'recharge_consume' => '\com_kingdee_service\data\entity\MallPreWriteOffReqMemberDealsRechargeConsume',
        'integral_now' => '\com_kingdee_service\data\entity\MallPreWriteOffReqMemberDealsIntegralNow',
        'write_off_coupons' => '\com_kingdee_service\data\entity\MallPreWriteOffReqMemberDealsWriteOffCoupons',
        'recharge_return' => '\com_kingdee_service\data\entity\MallPreWriteOffReqMemberDealsRechargeReturn',
        'consume_return' => '\com_kingdee_service\data\entity\MallPreWriteOffReqMemberDealsConsumeReturn'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'recharge_consume' => null,
        'integral_now' => null,
        'write_off_coupons' => null,
        'recharge_return' => null,
        'consume_return' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'recharge_consume' => 'recharge_consume',
        'integral_now' => 'integral_now',
        'write_off_coupons' => 'write_off_coupons',
        'recharge_return' => 'recharge_return',
        'consume_return' => 'consume_return'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'recharge_consume' => 'setRechargeConsume',
        'integral_now' => 'setIntegralNow',
        'write_off_coupons' => 'setWriteOffCoupons',
        'recharge_return' => 'setRechargeReturn',
        'consume_return' => 'setConsumeReturn'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'recharge_consume' => 'getRechargeConsume',
        'integral_now' => 'getIntegralNow',
        'write_off_coupons' => 'getWriteOffCoupons',
        'recharge_return' => 'getRechargeReturn',
        'consume_return' => 'getConsumeReturn'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['recharge_consume'] = isset($data['recharge_consume']) ? $data['recharge_consume'] : null;
        $this->container['integral_now'] = isset($data['integral_now']) ? $data['integral_now'] : null;
        $this->container['write_off_coupons'] = isset($data['write_off_coupons']) ? $data['write_off_coupons'] : null;
        $this->container['recharge_return'] = isset($data['recharge_return']) ? $data['recharge_return'] : null;
        $this->container['consume_return'] = isset($data['consume_return']) ? $data['consume_return'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets recharge_consume
     *
     * @return \com_kingdee_service\data\entity\MallPreWriteOffReqMemberDealsRechargeConsume
     */
    public function getRechargeConsume()
    {
        return $this->container['recharge_consume'];
    }

    /**
     * Sets recharge_consume
     *
     * @param \com_kingdee_service\data\entity\MallPreWriteOffReqMemberDealsRechargeConsume $recharge_consume recharge_consume
     *
     * @return $this
     */
    public function setRechargeConsume($recharge_consume)
    {
        $this->container['recharge_consume'] = $recharge_consume;

        return $this;
    }

    /**
     * Gets integral_now
     *
     * @return \com_kingdee_service\data\entity\MallPreWriteOffReqMemberDealsIntegralNow
     */
    public function getIntegralNow()
    {
        return $this->container['integral_now'];
    }

    /**
     * Sets integral_now
     *
     * @param \com_kingdee_service\data\entity\MallPreWriteOffReqMemberDealsIntegralNow $integral_now integral_now
     *
     * @return $this
     */
    public function setIntegralNow($integral_now)
    {
        $this->container['integral_now'] = $integral_now;

        return $this;
    }

    /**
     * Gets write_off_coupons
     *
     * @return \com_kingdee_service\data\entity\MallPreWriteOffReqMemberDealsWriteOffCoupons
     */
    public function getWriteOffCoupons()
    {
        return $this->container['write_off_coupons'];
    }

    /**
     * Sets write_off_coupons
     *
     * @param \com_kingdee_service\data\entity\MallPreWriteOffReqMemberDealsWriteOffCoupons $write_off_coupons write_off_coupons
     *
     * @return $this
     */
    public function setWriteOffCoupons($write_off_coupons)
    {
        $this->container['write_off_coupons'] = $write_off_coupons;

        return $this;
    }

    /**
     * Gets recharge_return
     *
     * @return \com_kingdee_service\data\entity\MallPreWriteOffReqMemberDealsRechargeReturn
     */
    public function getRechargeReturn()
    {
        return $this->container['recharge_return'];
    }

    /**
     * Sets recharge_return
     *
     * @param \com_kingdee_service\data\entity\MallPreWriteOffReqMemberDealsRechargeReturn $recharge_return recharge_return
     *
     * @return $this
     */
    public function setRechargeReturn($recharge_return)
    {
        $this->container['recharge_return'] = $recharge_return;

        return $this;
    }

    /**
     * Gets consume_return
     *
     * @return \com_kingdee_service\data\entity\MallPreWriteOffReqMemberDealsConsumeReturn
     */
    public function getConsumeReturn()
    {
        return $this->container['consume_return'];
    }

    /**
     * Sets consume_return
     *
     * @param \com_kingdee_service\data\entity\MallPreWriteOffReqMemberDealsConsumeReturn $consume_return consume_return
     *
     * @return $this
     */
    public function setConsumeReturn($consume_return)
    {
        $this->container['consume_return'] = $consume_return;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


