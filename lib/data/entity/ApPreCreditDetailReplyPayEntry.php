<?php
/**
 * ApPreCreditDetailReplyPayEntry
 *
 * PHP version 5
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * æ˜Ÿè¾°
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com_kingdee_service\data\entity;

use \ArrayAccess;
use \com_kingdee_service\ObjectSerializer;

/**
 * ApPreCreditDetailReplyPayEntry Class Doc Comment
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ApPreCreditDetailReplyPayEntry implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ApPreCreditDetailReply.PayEntry';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'seq' => 'string',
        'settle_account_id' => 'string',
        'settle_account_name' => 'string',
        'settle_account_number' => 'string',
        'pay_type_id' => 'string',
        'pay_type_name' => 'string',
        'pay_type_number' => 'string',
        'amount' => 'string',
        'amount_for' => 'string',
        'trans_number' => 'string',
        'comment' => 'string',
        'custom_entity_field' => 'map[string,string]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'seq' => null,
        'settle_account_id' => null,
        'settle_account_name' => null,
        'settle_account_number' => null,
        'pay_type_id' => null,
        'pay_type_name' => null,
        'pay_type_number' => null,
        'amount' => null,
        'amount_for' => null,
        'trans_number' => null,
        'comment' => null,
        'custom_entity_field' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'seq' => 'seq',
        'settle_account_id' => 'settle_account_id',
        'settle_account_name' => 'settle_account_name',
        'settle_account_number' => 'settle_account_number',
        'pay_type_id' => 'pay_type_id',
        'pay_type_name' => 'pay_type_name',
        'pay_type_number' => 'pay_type_number',
        'amount' => 'amount',
        'amount_for' => 'amount_for',
        'trans_number' => 'trans_number',
        'comment' => 'comment',
        'custom_entity_field' => 'custom_entity_field'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'seq' => 'setSeq',
        'settle_account_id' => 'setSettleAccountId',
        'settle_account_name' => 'setSettleAccountName',
        'settle_account_number' => 'setSettleAccountNumber',
        'pay_type_id' => 'setPayTypeId',
        'pay_type_name' => 'setPayTypeName',
        'pay_type_number' => 'setPayTypeNumber',
        'amount' => 'setAmount',
        'amount_for' => 'setAmountFor',
        'trans_number' => 'setTransNumber',
        'comment' => 'setComment',
        'custom_entity_field' => 'setCustomEntityField'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'seq' => 'getSeq',
        'settle_account_id' => 'getSettleAccountId',
        'settle_account_name' => 'getSettleAccountName',
        'settle_account_number' => 'getSettleAccountNumber',
        'pay_type_id' => 'getPayTypeId',
        'pay_type_name' => 'getPayTypeName',
        'pay_type_number' => 'getPayTypeNumber',
        'amount' => 'getAmount',
        'amount_for' => 'getAmountFor',
        'trans_number' => 'getTransNumber',
        'comment' => 'getComment',
        'custom_entity_field' => 'getCustomEntityField'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['seq'] = isset($data['seq']) ? $data['seq'] : null;
        $this->container['settle_account_id'] = isset($data['settle_account_id']) ? $data['settle_account_id'] : null;
        $this->container['settle_account_name'] = isset($data['settle_account_name']) ? $data['settle_account_name'] : null;
        $this->container['settle_account_number'] = isset($data['settle_account_number']) ? $data['settle_account_number'] : null;
        $this->container['pay_type_id'] = isset($data['pay_type_id']) ? $data['pay_type_id'] : null;
        $this->container['pay_type_name'] = isset($data['pay_type_name']) ? $data['pay_type_name'] : null;
        $this->container['pay_type_number'] = isset($data['pay_type_number']) ? $data['pay_type_number'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['amount_for'] = isset($data['amount_for']) ? $data['amount_for'] : null;
        $this->container['trans_number'] = isset($data['trans_number']) ? $data['trans_number'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['custom_entity_field'] = isset($data['custom_entity_field']) ? $data['custom_entity_field'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets seq
     *
     * @return string
     */
    public function getSeq()
    {
        return $this->container['seq'];
    }

    /**
     * Sets seq
     *
     * @param string $seq seq
     *
     * @return $this
     */
    public function setSeq($seq)
    {
        $this->container['seq'] = $seq;

        return $this;
    }

    /**
     * Gets settle_account_id
     *
     * @return string
     */
    public function getSettleAccountId()
    {
        return $this->container['settle_account_id'];
    }

    /**
     * Sets settle_account_id
     *
     * @param string $settle_account_id settle_account_id
     *
     * @return $this
     */
    public function setSettleAccountId($settle_account_id)
    {
        $this->container['settle_account_id'] = $settle_account_id;

        return $this;
    }

    /**
     * Gets settle_account_name
     *
     * @return string
     */
    public function getSettleAccountName()
    {
        return $this->container['settle_account_name'];
    }

    /**
     * Sets settle_account_name
     *
     * @param string $settle_account_name settle_account_name
     *
     * @return $this
     */
    public function setSettleAccountName($settle_account_name)
    {
        $this->container['settle_account_name'] = $settle_account_name;

        return $this;
    }

    /**
     * Gets settle_account_number
     *
     * @return string
     */
    public function getSettleAccountNumber()
    {
        return $this->container['settle_account_number'];
    }

    /**
     * Sets settle_account_number
     *
     * @param string $settle_account_number settle_account_number
     *
     * @return $this
     */
    public function setSettleAccountNumber($settle_account_number)
    {
        $this->container['settle_account_number'] = $settle_account_number;

        return $this;
    }

    /**
     * Gets pay_type_id
     *
     * @return string
     */
    public function getPayTypeId()
    {
        return $this->container['pay_type_id'];
    }

    /**
     * Sets pay_type_id
     *
     * @param string $pay_type_id pay_type_id
     *
     * @return $this
     */
    public function setPayTypeId($pay_type_id)
    {
        $this->container['pay_type_id'] = $pay_type_id;

        return $this;
    }

    /**
     * Gets pay_type_name
     *
     * @return string
     */
    public function getPayTypeName()
    {
        return $this->container['pay_type_name'];
    }

    /**
     * Sets pay_type_name
     *
     * @param string $pay_type_name pay_type_name
     *
     * @return $this
     */
    public function setPayTypeName($pay_type_name)
    {
        $this->container['pay_type_name'] = $pay_type_name;

        return $this;
    }

    /**
     * Gets pay_type_number
     *
     * @return string
     */
    public function getPayTypeNumber()
    {
        return $this->container['pay_type_number'];
    }

    /**
     * Sets pay_type_number
     *
     * @param string $pay_type_number pay_type_number
     *
     * @return $this
     */
    public function setPayTypeNumber($pay_type_number)
    {
        $this->container['pay_type_number'] = $pay_type_number;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return string
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param string $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets amount_for
     *
     * @return string
     */
    public function getAmountFor()
    {
        return $this->container['amount_for'];
    }

    /**
     * Sets amount_for
     *
     * @param string $amount_for amount_for
     *
     * @return $this
     */
    public function setAmountFor($amount_for)
    {
        $this->container['amount_for'] = $amount_for;

        return $this;
    }

    /**
     * Gets trans_number
     *
     * @return string
     */
    public function getTransNumber()
    {
        return $this->container['trans_number'];
    }

    /**
     * Sets trans_number
     *
     * @param string $trans_number trans_number
     *
     * @return $this
     */
    public function setTransNumber($trans_number)
    {
        $this->container['trans_number'] = $trans_number;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment comment
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets custom_entity_field
     *
     * @return map[string,string]
     */
    public function getCustomEntityField()
    {
        return $this->container['custom_entity_field'];
    }

    /**
     * Sets custom_entity_field
     *
     * @param map[string,string] $custom_entity_field custom_entity_field
     *
     * @return $this
     */
    public function setCustomEntityField($custom_entity_field)
    {
        $this->container['custom_entity_field'] = $custom_entity_field;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


