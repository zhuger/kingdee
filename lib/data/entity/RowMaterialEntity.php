<?php
/**
 * RowMaterialEntity
 *
 * PHP version 5
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * æ˜Ÿè¾°
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com_kingdee_service\data\entity;

use \ArrayAccess;
use \com_kingdee_service\ObjectSerializer;

/**
 * RowMaterialEntity Class Doc Comment
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RowMaterialEntity implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Row.MaterialEntity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'material_id' => 'string',
        'material_name' => 'string',
        'material_number' => 'string',
        'material_is_multi_unit' => 'bool',
        'material_is_serial' => 'bool',
        'material_is_asst_attr' => 'bool',
        'material_is_kf_period' => 'bool',
        'material_is_batch' => 'bool',
        'material_model' => 'string',
        'barcode' => 'string',
        'unit_id' => 'string',
        'unit_name' => 'string',
        'unit_number' => 'string',
        'batch_no' => 'string',
        'kf_date' => 'string',
        'valid_date' => 'string',
        'kf_type' => 'string',
        'kf_period' => 'int',
        'qty' => 'double',
        'inv_qty' => 'double',
        'base_qty' => 'double',
        'diff_qty' => 'double',
        'in_stock_id' => 'string',
        'in_stock_name' => 'string',
        'in_stock_number' => 'string',
        'out_stock_id' => 'string',
        'out_stock_name' => 'string',
        'out_stock_number' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'material_id' => null,
        'material_name' => null,
        'material_number' => null,
        'material_is_multi_unit' => null,
        'material_is_serial' => null,
        'material_is_asst_attr' => null,
        'material_is_kf_period' => null,
        'material_is_batch' => null,
        'material_model' => null,
        'barcode' => null,
        'unit_id' => null,
        'unit_name' => null,
        'unit_number' => null,
        'batch_no' => null,
        'kf_date' => null,
        'valid_date' => null,
        'kf_type' => null,
        'kf_period' => 'int32',
        'qty' => 'double',
        'inv_qty' => 'double',
        'base_qty' => 'double',
        'diff_qty' => 'double',
        'in_stock_id' => null,
        'in_stock_name' => null,
        'in_stock_number' => null,
        'out_stock_id' => null,
        'out_stock_name' => null,
        'out_stock_number' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'material_id' => 'material_id',
        'material_name' => 'material_name',
        'material_number' => 'material_number',
        'material_is_multi_unit' => 'material_is_multi_unit',
        'material_is_serial' => 'material_is_serial',
        'material_is_asst_attr' => 'material_is_asst_attr',
        'material_is_kf_period' => 'material_is_kf_period',
        'material_is_batch' => 'material_is_batch',
        'material_model' => 'material_model',
        'barcode' => 'barcode',
        'unit_id' => 'unit_id',
        'unit_name' => 'unit_name',
        'unit_number' => 'unit_number',
        'batch_no' => 'batch_no',
        'kf_date' => 'kf_date',
        'valid_date' => 'valid_date',
        'kf_type' => 'kf_type',
        'kf_period' => 'kf_period',
        'qty' => 'qty',
        'inv_qty' => 'inv_qty',
        'base_qty' => 'base_qty',
        'diff_qty' => 'diff_qty',
        'in_stock_id' => 'in_stock_id',
        'in_stock_name' => 'in_stock_name',
        'in_stock_number' => 'in_stock_number',
        'out_stock_id' => 'out_stock_id',
        'out_stock_name' => 'out_stock_name',
        'out_stock_number' => 'out_stock_number'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'material_id' => 'setMaterialId',
        'material_name' => 'setMaterialName',
        'material_number' => 'setMaterialNumber',
        'material_is_multi_unit' => 'setMaterialIsMultiUnit',
        'material_is_serial' => 'setMaterialIsSerial',
        'material_is_asst_attr' => 'setMaterialIsAsstAttr',
        'material_is_kf_period' => 'setMaterialIsKfPeriod',
        'material_is_batch' => 'setMaterialIsBatch',
        'material_model' => 'setMaterialModel',
        'barcode' => 'setBarcode',
        'unit_id' => 'setUnitId',
        'unit_name' => 'setUnitName',
        'unit_number' => 'setUnitNumber',
        'batch_no' => 'setBatchNo',
        'kf_date' => 'setKfDate',
        'valid_date' => 'setValidDate',
        'kf_type' => 'setKfType',
        'kf_period' => 'setKfPeriod',
        'qty' => 'setQty',
        'inv_qty' => 'setInvQty',
        'base_qty' => 'setBaseQty',
        'diff_qty' => 'setDiffQty',
        'in_stock_id' => 'setInStockId',
        'in_stock_name' => 'setInStockName',
        'in_stock_number' => 'setInStockNumber',
        'out_stock_id' => 'setOutStockId',
        'out_stock_name' => 'setOutStockName',
        'out_stock_number' => 'setOutStockNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'material_id' => 'getMaterialId',
        'material_name' => 'getMaterialName',
        'material_number' => 'getMaterialNumber',
        'material_is_multi_unit' => 'getMaterialIsMultiUnit',
        'material_is_serial' => 'getMaterialIsSerial',
        'material_is_asst_attr' => 'getMaterialIsAsstAttr',
        'material_is_kf_period' => 'getMaterialIsKfPeriod',
        'material_is_batch' => 'getMaterialIsBatch',
        'material_model' => 'getMaterialModel',
        'barcode' => 'getBarcode',
        'unit_id' => 'getUnitId',
        'unit_name' => 'getUnitName',
        'unit_number' => 'getUnitNumber',
        'batch_no' => 'getBatchNo',
        'kf_date' => 'getKfDate',
        'valid_date' => 'getValidDate',
        'kf_type' => 'getKfType',
        'kf_period' => 'getKfPeriod',
        'qty' => 'getQty',
        'inv_qty' => 'getInvQty',
        'base_qty' => 'getBaseQty',
        'diff_qty' => 'getDiffQty',
        'in_stock_id' => 'getInStockId',
        'in_stock_name' => 'getInStockName',
        'in_stock_number' => 'getInStockNumber',
        'out_stock_id' => 'getOutStockId',
        'out_stock_name' => 'getOutStockName',
        'out_stock_number' => 'getOutStockNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['material_id'] = isset($data['material_id']) ? $data['material_id'] : null;
        $this->container['material_name'] = isset($data['material_name']) ? $data['material_name'] : null;
        $this->container['material_number'] = isset($data['material_number']) ? $data['material_number'] : null;
        $this->container['material_is_multi_unit'] = isset($data['material_is_multi_unit']) ? $data['material_is_multi_unit'] : null;
        $this->container['material_is_serial'] = isset($data['material_is_serial']) ? $data['material_is_serial'] : null;
        $this->container['material_is_asst_attr'] = isset($data['material_is_asst_attr']) ? $data['material_is_asst_attr'] : null;
        $this->container['material_is_kf_period'] = isset($data['material_is_kf_period']) ? $data['material_is_kf_period'] : null;
        $this->container['material_is_batch'] = isset($data['material_is_batch']) ? $data['material_is_batch'] : null;
        $this->container['material_model'] = isset($data['material_model']) ? $data['material_model'] : null;
        $this->container['barcode'] = isset($data['barcode']) ? $data['barcode'] : null;
        $this->container['unit_id'] = isset($data['unit_id']) ? $data['unit_id'] : null;
        $this->container['unit_name'] = isset($data['unit_name']) ? $data['unit_name'] : null;
        $this->container['unit_number'] = isset($data['unit_number']) ? $data['unit_number'] : null;
        $this->container['batch_no'] = isset($data['batch_no']) ? $data['batch_no'] : null;
        $this->container['kf_date'] = isset($data['kf_date']) ? $data['kf_date'] : null;
        $this->container['valid_date'] = isset($data['valid_date']) ? $data['valid_date'] : null;
        $this->container['kf_type'] = isset($data['kf_type']) ? $data['kf_type'] : null;
        $this->container['kf_period'] = isset($data['kf_period']) ? $data['kf_period'] : null;
        $this->container['qty'] = isset($data['qty']) ? $data['qty'] : null;
        $this->container['inv_qty'] = isset($data['inv_qty']) ? $data['inv_qty'] : null;
        $this->container['base_qty'] = isset($data['base_qty']) ? $data['base_qty'] : null;
        $this->container['diff_qty'] = isset($data['diff_qty']) ? $data['diff_qty'] : null;
        $this->container['in_stock_id'] = isset($data['in_stock_id']) ? $data['in_stock_id'] : null;
        $this->container['in_stock_name'] = isset($data['in_stock_name']) ? $data['in_stock_name'] : null;
        $this->container['in_stock_number'] = isset($data['in_stock_number']) ? $data['in_stock_number'] : null;
        $this->container['out_stock_id'] = isset($data['out_stock_id']) ? $data['out_stock_id'] : null;
        $this->container['out_stock_name'] = isset($data['out_stock_name']) ? $data['out_stock_name'] : null;
        $this->container['out_stock_number'] = isset($data['out_stock_number']) ? $data['out_stock_number'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets material_id
     *
     * @return string
     */
    public function getMaterialId()
    {
        return $this->container['material_id'];
    }

    /**
     * Sets material_id
     *
     * @param string $material_id material_id
     *
     * @return $this
     */
    public function setMaterialId($material_id)
    {
        $this->container['material_id'] = $material_id;

        return $this;
    }

    /**
     * Gets material_name
     *
     * @return string
     */
    public function getMaterialName()
    {
        return $this->container['material_name'];
    }

    /**
     * Sets material_name
     *
     * @param string $material_name material_name
     *
     * @return $this
     */
    public function setMaterialName($material_name)
    {
        $this->container['material_name'] = $material_name;

        return $this;
    }

    /**
     * Gets material_number
     *
     * @return string
     */
    public function getMaterialNumber()
    {
        return $this->container['material_number'];
    }

    /**
     * Sets material_number
     *
     * @param string $material_number material_number
     *
     * @return $this
     */
    public function setMaterialNumber($material_number)
    {
        $this->container['material_number'] = $material_number;

        return $this;
    }

    /**
     * Gets material_is_multi_unit
     *
     * @return bool
     */
    public function getMaterialIsMultiUnit()
    {
        return $this->container['material_is_multi_unit'];
    }

    /**
     * Sets material_is_multi_unit
     *
     * @param bool $material_is_multi_unit material_is_multi_unit
     *
     * @return $this
     */
    public function setMaterialIsMultiUnit($material_is_multi_unit)
    {
        $this->container['material_is_multi_unit'] = $material_is_multi_unit;

        return $this;
    }

    /**
     * Gets material_is_serial
     *
     * @return bool
     */
    public function getMaterialIsSerial()
    {
        return $this->container['material_is_serial'];
    }

    /**
     * Sets material_is_serial
     *
     * @param bool $material_is_serial material_is_serial
     *
     * @return $this
     */
    public function setMaterialIsSerial($material_is_serial)
    {
        $this->container['material_is_serial'] = $material_is_serial;

        return $this;
    }

    /**
     * Gets material_is_asst_attr
     *
     * @return bool
     */
    public function getMaterialIsAsstAttr()
    {
        return $this->container['material_is_asst_attr'];
    }

    /**
     * Sets material_is_asst_attr
     *
     * @param bool $material_is_asst_attr material_is_asst_attr
     *
     * @return $this
     */
    public function setMaterialIsAsstAttr($material_is_asst_attr)
    {
        $this->container['material_is_asst_attr'] = $material_is_asst_attr;

        return $this;
    }

    /**
     * Gets material_is_kf_period
     *
     * @return bool
     */
    public function getMaterialIsKfPeriod()
    {
        return $this->container['material_is_kf_period'];
    }

    /**
     * Sets material_is_kf_period
     *
     * @param bool $material_is_kf_period material_is_kf_period
     *
     * @return $this
     */
    public function setMaterialIsKfPeriod($material_is_kf_period)
    {
        $this->container['material_is_kf_period'] = $material_is_kf_period;

        return $this;
    }

    /**
     * Gets material_is_batch
     *
     * @return bool
     */
    public function getMaterialIsBatch()
    {
        return $this->container['material_is_batch'];
    }

    /**
     * Sets material_is_batch
     *
     * @param bool $material_is_batch material_is_batch
     *
     * @return $this
     */
    public function setMaterialIsBatch($material_is_batch)
    {
        $this->container['material_is_batch'] = $material_is_batch;

        return $this;
    }

    /**
     * Gets material_model
     *
     * @return string
     */
    public function getMaterialModel()
    {
        return $this->container['material_model'];
    }

    /**
     * Sets material_model
     *
     * @param string $material_model material_model
     *
     * @return $this
     */
    public function setMaterialModel($material_model)
    {
        $this->container['material_model'] = $material_model;

        return $this;
    }

    /**
     * Gets barcode
     *
     * @return string
     */
    public function getBarcode()
    {
        return $this->container['barcode'];
    }

    /**
     * Sets barcode
     *
     * @param string $barcode barcode
     *
     * @return $this
     */
    public function setBarcode($barcode)
    {
        $this->container['barcode'] = $barcode;

        return $this;
    }

    /**
     * Gets unit_id
     *
     * @return string
     */
    public function getUnitId()
    {
        return $this->container['unit_id'];
    }

    /**
     * Sets unit_id
     *
     * @param string $unit_id unit_id
     *
     * @return $this
     */
    public function setUnitId($unit_id)
    {
        $this->container['unit_id'] = $unit_id;

        return $this;
    }

    /**
     * Gets unit_name
     *
     * @return string
     */
    public function getUnitName()
    {
        return $this->container['unit_name'];
    }

    /**
     * Sets unit_name
     *
     * @param string $unit_name unit_name
     *
     * @return $this
     */
    public function setUnitName($unit_name)
    {
        $this->container['unit_name'] = $unit_name;

        return $this;
    }

    /**
     * Gets unit_number
     *
     * @return string
     */
    public function getUnitNumber()
    {
        return $this->container['unit_number'];
    }

    /**
     * Sets unit_number
     *
     * @param string $unit_number unit_number
     *
     * @return $this
     */
    public function setUnitNumber($unit_number)
    {
        $this->container['unit_number'] = $unit_number;

        return $this;
    }

    /**
     * Gets batch_no
     *
     * @return string
     */
    public function getBatchNo()
    {
        return $this->container['batch_no'];
    }

    /**
     * Sets batch_no
     *
     * @param string $batch_no batch_no
     *
     * @return $this
     */
    public function setBatchNo($batch_no)
    {
        $this->container['batch_no'] = $batch_no;

        return $this;
    }

    /**
     * Gets kf_date
     *
     * @return string
     */
    public function getKfDate()
    {
        return $this->container['kf_date'];
    }

    /**
     * Sets kf_date
     *
     * @param string $kf_date kf_date
     *
     * @return $this
     */
    public function setKfDate($kf_date)
    {
        $this->container['kf_date'] = $kf_date;

        return $this;
    }

    /**
     * Gets valid_date
     *
     * @return string
     */
    public function getValidDate()
    {
        return $this->container['valid_date'];
    }

    /**
     * Sets valid_date
     *
     * @param string $valid_date valid_date
     *
     * @return $this
     */
    public function setValidDate($valid_date)
    {
        $this->container['valid_date'] = $valid_date;

        return $this;
    }

    /**
     * Gets kf_type
     *
     * @return string
     */
    public function getKfType()
    {
        return $this->container['kf_type'];
    }

    /**
     * Sets kf_type
     *
     * @param string $kf_type kf_type
     *
     * @return $this
     */
    public function setKfType($kf_type)
    {
        $this->container['kf_type'] = $kf_type;

        return $this;
    }

    /**
     * Gets kf_period
     *
     * @return int
     */
    public function getKfPeriod()
    {
        return $this->container['kf_period'];
    }

    /**
     * Sets kf_period
     *
     * @param int $kf_period kf_period
     *
     * @return $this
     */
    public function setKfPeriod($kf_period)
    {
        $this->container['kf_period'] = $kf_period;

        return $this;
    }

    /**
     * Gets qty
     *
     * @return double
     */
    public function getQty()
    {
        return $this->container['qty'];
    }

    /**
     * Sets qty
     *
     * @param double $qty qty
     *
     * @return $this
     */
    public function setQty($qty)
    {
        $this->container['qty'] = $qty;

        return $this;
    }

    /**
     * Gets inv_qty
     *
     * @return double
     */
    public function getInvQty()
    {
        return $this->container['inv_qty'];
    }

    /**
     * Sets inv_qty
     *
     * @param double $inv_qty inv_qty
     *
     * @return $this
     */
    public function setInvQty($inv_qty)
    {
        $this->container['inv_qty'] = $inv_qty;

        return $this;
    }

    /**
     * Gets base_qty
     *
     * @return double
     */
    public function getBaseQty()
    {
        return $this->container['base_qty'];
    }

    /**
     * Sets base_qty
     *
     * @param double $base_qty base_qty
     *
     * @return $this
     */
    public function setBaseQty($base_qty)
    {
        $this->container['base_qty'] = $base_qty;

        return $this;
    }

    /**
     * Gets diff_qty
     *
     * @return double
     */
    public function getDiffQty()
    {
        return $this->container['diff_qty'];
    }

    /**
     * Sets diff_qty
     *
     * @param double $diff_qty diff_qty
     *
     * @return $this
     */
    public function setDiffQty($diff_qty)
    {
        $this->container['diff_qty'] = $diff_qty;

        return $this;
    }

    /**
     * Gets in_stock_id
     *
     * @return string
     */
    public function getInStockId()
    {
        return $this->container['in_stock_id'];
    }

    /**
     * Sets in_stock_id
     *
     * @param string $in_stock_id in_stock_id
     *
     * @return $this
     */
    public function setInStockId($in_stock_id)
    {
        $this->container['in_stock_id'] = $in_stock_id;

        return $this;
    }

    /**
     * Gets in_stock_name
     *
     * @return string
     */
    public function getInStockName()
    {
        return $this->container['in_stock_name'];
    }

    /**
     * Sets in_stock_name
     *
     * @param string $in_stock_name in_stock_name
     *
     * @return $this
     */
    public function setInStockName($in_stock_name)
    {
        $this->container['in_stock_name'] = $in_stock_name;

        return $this;
    }

    /**
     * Gets in_stock_number
     *
     * @return string
     */
    public function getInStockNumber()
    {
        return $this->container['in_stock_number'];
    }

    /**
     * Sets in_stock_number
     *
     * @param string $in_stock_number in_stock_number
     *
     * @return $this
     */
    public function setInStockNumber($in_stock_number)
    {
        $this->container['in_stock_number'] = $in_stock_number;

        return $this;
    }

    /**
     * Gets out_stock_id
     *
     * @return string
     */
    public function getOutStockId()
    {
        return $this->container['out_stock_id'];
    }

    /**
     * Sets out_stock_id
     *
     * @param string $out_stock_id out_stock_id
     *
     * @return $this
     */
    public function setOutStockId($out_stock_id)
    {
        $this->container['out_stock_id'] = $out_stock_id;

        return $this;
    }

    /**
     * Gets out_stock_name
     *
     * @return string
     */
    public function getOutStockName()
    {
        return $this->container['out_stock_name'];
    }

    /**
     * Sets out_stock_name
     *
     * @param string $out_stock_name out_stock_name
     *
     * @return $this
     */
    public function setOutStockName($out_stock_name)
    {
        $this->container['out_stock_name'] = $out_stock_name;

        return $this;
    }

    /**
     * Gets out_stock_number
     *
     * @return string
     */
    public function getOutStockNumber()
    {
        return $this->container['out_stock_number'];
    }

    /**
     * Sets out_stock_number
     *
     * @param string $out_stock_number out_stock_number
     *
     * @return $this
     */
    public function setOutStockNumber($out_stock_number)
    {
        $this->container['out_stock_number'] = $out_stock_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


