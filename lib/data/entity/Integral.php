<?php
/**
 * Integral
 *
 * PHP version 5
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 星辰
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com_kingdee_service\data\entity;

use \ArrayAccess;
use \com_kingdee_service\ObjectSerializer;

/**
 * Integral Class Doc Comment
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Integral implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Integral';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'member' => '\com_kingdee_service\data\entity\IntegralMemberInfo',
        'mb_card' => '\com_kingdee_service\data\entity\IntegralMemberCardInfo',
        'total' => 'string',
        'level_total' => 'string',
        'last' => 'string',
        'pre' => 'string',
        'usable' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'member' => null,
        'mb_card' => null,
        'total' => null,
        'level_total' => null,
        'last' => null,
        'pre' => null,
        'usable' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'member' => 'member',
        'mb_card' => 'mb_card',
        'total' => 'total',
        'level_total' => 'level_total',
        'last' => 'last',
        'pre' => 'pre',
        'usable' => 'usable'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'member' => 'setMember',
        'mb_card' => 'setMbCard',
        'total' => 'setTotal',
        'level_total' => 'setLevelTotal',
        'last' => 'setLast',
        'pre' => 'setPre',
        'usable' => 'setUsable'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'member' => 'getMember',
        'mb_card' => 'getMbCard',
        'total' => 'getTotal',
        'level_total' => 'getLevelTotal',
        'last' => 'getLast',
        'pre' => 'getPre',
        'usable' => 'getUsable'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['member'] = isset($data['member']) ? $data['member'] : null;
        $this->container['mb_card'] = isset($data['mb_card']) ? $data['mb_card'] : null;
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
        $this->container['level_total'] = isset($data['level_total']) ? $data['level_total'] : null;
        $this->container['last'] = isset($data['last']) ? $data['last'] : null;
        $this->container['pre'] = isset($data['pre']) ? $data['pre'] : null;
        $this->container['usable'] = isset($data['usable']) ? $data['usable'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets member
     *
     * @return \com_kingdee_service\data\entity\IntegralMemberInfo
     */
    public function getMember()
    {
        return $this->container['member'];
    }

    /**
     * Sets member
     *
     * @param \com_kingdee_service\data\entity\IntegralMemberInfo $member member
     *
     * @return $this
     */
    public function setMember($member)
    {
        $this->container['member'] = $member;

        return $this;
    }

    /**
     * Gets mb_card
     *
     * @return \com_kingdee_service\data\entity\IntegralMemberCardInfo
     */
    public function getMbCard()
    {
        return $this->container['mb_card'];
    }

    /**
     * Sets mb_card
     *
     * @param \com_kingdee_service\data\entity\IntegralMemberCardInfo $mb_card mb_card
     *
     * @return $this
     */
    public function setMbCard($mb_card)
    {
        $this->container['mb_card'] = $mb_card;

        return $this;
    }

    /**
     * Gets total
     *
     * @return string
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param string $total total
     *
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets level_total
     *
     * @return string
     */
    public function getLevelTotal()
    {
        return $this->container['level_total'];
    }

    /**
     * Sets level_total
     *
     * @param string $level_total level_total
     *
     * @return $this
     */
    public function setLevelTotal($level_total)
    {
        $this->container['level_total'] = $level_total;

        return $this;
    }

    /**
     * Gets last
     *
     * @return string
     */
    public function getLast()
    {
        return $this->container['last'];
    }

    /**
     * Sets last
     *
     * @param string $last last
     *
     * @return $this
     */
    public function setLast($last)
    {
        $this->container['last'] = $last;

        return $this;
    }

    /**
     * Gets pre
     *
     * @return string
     */
    public function getPre()
    {
        return $this->container['pre'];
    }

    /**
     * Sets pre
     *
     * @param string $pre pre
     *
     * @return $this
     */
    public function setPre($pre)
    {
        $this->container['pre'] = $pre;

        return $this;
    }

    /**
     * Gets usable
     *
     * @return string
     */
    public function getUsable()
    {
        return $this->container['usable'];
    }

    /**
     * Sets usable
     *
     * @param string $usable usable
     *
     * @return $this
     */
    public function setUsable($usable)
    {
        $this->container['usable'] = $usable;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


