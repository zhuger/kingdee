<?php
/**
 * ArapApSummaryReportReq
 *
 * PHP version 5
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 星辰
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com_kingdee_service\data\entity;

use \ArrayAccess;
use \com_kingdee_service\ObjectSerializer;

/**
 * ArapApSummaryReportReq Class Doc Comment
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ArapApSummaryReportReq implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Arap_apSummaryReportReq';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'end_date' => 'string',
        'not_view_zero' => 'bool',
        'not_view_no_happen' => 'bool',
        'dept_ids' => 'string[]',
        'include_uncheck' => 'bool',
        'include_oth' => 'bool',
        'summary_type' => 'string',
        'emp_ids' => 'string[]',
        'search' => 'string',
        'api_order_by' => 'int',
        'page' => 'string',
        'supplier_ids' => 'string[]',
        'supplier_group_ids' => 'string[]',
        'isshowls' => 'bool',
        'is_foreigncur' => 'bool',
        'start_date' => 'string',
        'page_size' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'end_date' => null,
        'not_view_zero' => null,
        'not_view_no_happen' => null,
        'dept_ids' => null,
        'include_uncheck' => null,
        'include_oth' => null,
        'summary_type' => null,
        'emp_ids' => null,
        'search' => null,
        'api_order_by' => 'int32',
        'page' => null,
        'supplier_ids' => null,
        'supplier_group_ids' => null,
        'isshowls' => null,
        'is_foreigncur' => null,
        'start_date' => null,
        'page_size' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'end_date' => 'end_date',
        'not_view_zero' => 'not_view_zero',
        'not_view_no_happen' => 'not_view_no_happen',
        'dept_ids' => 'dept_ids',
        'include_uncheck' => 'include_uncheck',
        'include_oth' => 'include_oth',
        'summary_type' => 'summary_type',
        'emp_ids' => 'emp_ids',
        'search' => 'search',
        'api_order_by' => 'api_order_by',
        'page' => 'page',
        'supplier_ids' => 'supplier_ids',
        'supplier_group_ids' => 'supplier_group_ids',
        'isshowls' => 'isshowls',
        'is_foreigncur' => 'is_foreigncur',
        'start_date' => 'start_date',
        'page_size' => 'page_size'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'end_date' => 'setEndDate',
        'not_view_zero' => 'setNotViewZero',
        'not_view_no_happen' => 'setNotViewNoHappen',
        'dept_ids' => 'setDeptIds',
        'include_uncheck' => 'setIncludeUncheck',
        'include_oth' => 'setIncludeOth',
        'summary_type' => 'setSummaryType',
        'emp_ids' => 'setEmpIds',
        'search' => 'setSearch',
        'api_order_by' => 'setApiOrderBy',
        'page' => 'setPage',
        'supplier_ids' => 'setSupplierIds',
        'supplier_group_ids' => 'setSupplierGroupIds',
        'isshowls' => 'setIsshowls',
        'is_foreigncur' => 'setIsForeigncur',
        'start_date' => 'setStartDate',
        'page_size' => 'setPageSize'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'end_date' => 'getEndDate',
        'not_view_zero' => 'getNotViewZero',
        'not_view_no_happen' => 'getNotViewNoHappen',
        'dept_ids' => 'getDeptIds',
        'include_uncheck' => 'getIncludeUncheck',
        'include_oth' => 'getIncludeOth',
        'summary_type' => 'getSummaryType',
        'emp_ids' => 'getEmpIds',
        'search' => 'getSearch',
        'api_order_by' => 'getApiOrderBy',
        'page' => 'getPage',
        'supplier_ids' => 'getSupplierIds',
        'supplier_group_ids' => 'getSupplierGroupIds',
        'isshowls' => 'getIsshowls',
        'is_foreigncur' => 'getIsForeigncur',
        'start_date' => 'getStartDate',
        'page_size' => 'getPageSize'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['not_view_zero'] = isset($data['not_view_zero']) ? $data['not_view_zero'] : null;
        $this->container['not_view_no_happen'] = isset($data['not_view_no_happen']) ? $data['not_view_no_happen'] : null;
        $this->container['dept_ids'] = isset($data['dept_ids']) ? $data['dept_ids'] : null;
        $this->container['include_uncheck'] = isset($data['include_uncheck']) ? $data['include_uncheck'] : null;
        $this->container['include_oth'] = isset($data['include_oth']) ? $data['include_oth'] : null;
        $this->container['summary_type'] = isset($data['summary_type']) ? $data['summary_type'] : null;
        $this->container['emp_ids'] = isset($data['emp_ids']) ? $data['emp_ids'] : null;
        $this->container['search'] = isset($data['search']) ? $data['search'] : null;
        $this->container['api_order_by'] = isset($data['api_order_by']) ? $data['api_order_by'] : null;
        $this->container['page'] = isset($data['page']) ? $data['page'] : null;
        $this->container['supplier_ids'] = isset($data['supplier_ids']) ? $data['supplier_ids'] : null;
        $this->container['supplier_group_ids'] = isset($data['supplier_group_ids']) ? $data['supplier_group_ids'] : null;
        $this->container['isshowls'] = isset($data['isshowls']) ? $data['isshowls'] : null;
        $this->container['is_foreigncur'] = isset($data['is_foreigncur']) ? $data['is_foreigncur'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['page_size'] = isset($data['page_size']) ? $data['page_size'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets end_date
     *
     * @return string
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param string $end_date end_date
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets not_view_zero
     *
     * @return bool
     */
    public function getNotViewZero()
    {
        return $this->container['not_view_zero'];
    }

    /**
     * Sets not_view_zero
     *
     * @param bool $not_view_zero not_view_zero
     *
     * @return $this
     */
    public function setNotViewZero($not_view_zero)
    {
        $this->container['not_view_zero'] = $not_view_zero;

        return $this;
    }

    /**
     * Gets not_view_no_happen
     *
     * @return bool
     */
    public function getNotViewNoHappen()
    {
        return $this->container['not_view_no_happen'];
    }

    /**
     * Sets not_view_no_happen
     *
     * @param bool $not_view_no_happen not_view_no_happen
     *
     * @return $this
     */
    public function setNotViewNoHappen($not_view_no_happen)
    {
        $this->container['not_view_no_happen'] = $not_view_no_happen;

        return $this;
    }

    /**
     * Gets dept_ids
     *
     * @return string[]
     */
    public function getDeptIds()
    {
        return $this->container['dept_ids'];
    }

    /**
     * Sets dept_ids
     *
     * @param string[] $dept_ids dept_ids
     *
     * @return $this
     */
    public function setDeptIds($dept_ids)
    {
        $this->container['dept_ids'] = $dept_ids;

        return $this;
    }

    /**
     * Gets include_uncheck
     *
     * @return bool
     */
    public function getIncludeUncheck()
    {
        return $this->container['include_uncheck'];
    }

    /**
     * Sets include_uncheck
     *
     * @param bool $include_uncheck include_uncheck
     *
     * @return $this
     */
    public function setIncludeUncheck($include_uncheck)
    {
        $this->container['include_uncheck'] = $include_uncheck;

        return $this;
    }

    /**
     * Gets include_oth
     *
     * @return bool
     */
    public function getIncludeOth()
    {
        return $this->container['include_oth'];
    }

    /**
     * Sets include_oth
     *
     * @param bool $include_oth include_oth
     *
     * @return $this
     */
    public function setIncludeOth($include_oth)
    {
        $this->container['include_oth'] = $include_oth;

        return $this;
    }

    /**
     * Gets summary_type
     *
     * @return string
     */
    public function getSummaryType()
    {
        return $this->container['summary_type'];
    }

    /**
     * Sets summary_type
     *
     * @param string $summary_type summary_type
     *
     * @return $this
     */
    public function setSummaryType($summary_type)
    {
        $this->container['summary_type'] = $summary_type;

        return $this;
    }

    /**
     * Gets emp_ids
     *
     * @return string[]
     */
    public function getEmpIds()
    {
        return $this->container['emp_ids'];
    }

    /**
     * Sets emp_ids
     *
     * @param string[] $emp_ids emp_ids
     *
     * @return $this
     */
    public function setEmpIds($emp_ids)
    {
        $this->container['emp_ids'] = $emp_ids;

        return $this;
    }

    /**
     * Gets search
     *
     * @return string
     */
    public function getSearch()
    {
        return $this->container['search'];
    }

    /**
     * Sets search
     *
     * @param string $search search
     *
     * @return $this
     */
    public function setSearch($search)
    {
        $this->container['search'] = $search;

        return $this;
    }

    /**
     * Gets api_order_by
     *
     * @return int
     */
    public function getApiOrderBy()
    {
        return $this->container['api_order_by'];
    }

    /**
     * Sets api_order_by
     *
     * @param int $api_order_by api_order_by
     *
     * @return $this
     */
    public function setApiOrderBy($api_order_by)
    {
        $this->container['api_order_by'] = $api_order_by;

        return $this;
    }

    /**
     * Gets page
     *
     * @return string
     */
    public function getPage()
    {
        return $this->container['page'];
    }

    /**
     * Sets page
     *
     * @param string $page page
     *
     * @return $this
     */
    public function setPage($page)
    {
        $this->container['page'] = $page;

        return $this;
    }

    /**
     * Gets supplier_ids
     *
     * @return string[]
     */
    public function getSupplierIds()
    {
        return $this->container['supplier_ids'];
    }

    /**
     * Sets supplier_ids
     *
     * @param string[] $supplier_ids supplier_ids
     *
     * @return $this
     */
    public function setSupplierIds($supplier_ids)
    {
        $this->container['supplier_ids'] = $supplier_ids;

        return $this;
    }

    /**
     * Gets supplier_group_ids
     *
     * @return string[]
     */
    public function getSupplierGroupIds()
    {
        return $this->container['supplier_group_ids'];
    }

    /**
     * Sets supplier_group_ids
     *
     * @param string[] $supplier_group_ids supplier_group_ids
     *
     * @return $this
     */
    public function setSupplierGroupIds($supplier_group_ids)
    {
        $this->container['supplier_group_ids'] = $supplier_group_ids;

        return $this;
    }

    /**
     * Gets isshowls
     *
     * @return bool
     */
    public function getIsshowls()
    {
        return $this->container['isshowls'];
    }

    /**
     * Sets isshowls
     *
     * @param bool $isshowls isshowls
     *
     * @return $this
     */
    public function setIsshowls($isshowls)
    {
        $this->container['isshowls'] = $isshowls;

        return $this;
    }

    /**
     * Gets is_foreigncur
     *
     * @return bool
     */
    public function getIsForeigncur()
    {
        return $this->container['is_foreigncur'];
    }

    /**
     * Sets is_foreigncur
     *
     * @param bool $is_foreigncur is_foreigncur
     *
     * @return $this
     */
    public function setIsForeigncur($is_foreigncur)
    {
        $this->container['is_foreigncur'] = $is_foreigncur;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return string
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param string $start_date start_date
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets page_size
     *
     * @return string
     */
    public function getPageSize()
    {
        return $this->container['page_size'];
    }

    /**
     * Sets page_size
     *
     * @param string $page_size page_size
     *
     * @return $this
     */
    public function setPageSize($page_size)
    {
        $this->container['page_size'] = $page_size;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


