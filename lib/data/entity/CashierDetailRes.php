<?php
/**
 * CashierDetailRes
 *
 * PHP version 5
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * æ˜Ÿè¾°
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com_kingdee_service\data\entity;

use \ArrayAccess;
use \com_kingdee_service\ObjectSerializer;

/**
 * CashierDetailRes Class Doc Comment
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CashierDetailRes implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CashierDetailRes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'acc_info' => '\com_kingdee_service\data\entity\AccInfo',
        'acc_name' => 'string',
        'account_id' => 'string',
        'admin_user' => 'string',
        'cashier_stores' => '\com_kingdee_service\data\entity\CashierStore[]',
        'create_time' => 'string',
        'emp_id' => 'string',
        'enable' => 'int',
        'fid' => 'string',
        'group_name' => 'string',
        'modify_time' => 'string',
        'service_id' => 'string',
        'tel_phone' => 'string',
        'tenant_id' => 'string',
        'url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'acc_info' => null,
        'acc_name' => null,
        'account_id' => null,
        'admin_user' => null,
        'cashier_stores' => null,
        'create_time' => null,
        'emp_id' => null,
        'enable' => 'int32',
        'fid' => null,
        'group_name' => null,
        'modify_time' => null,
        'service_id' => null,
        'tel_phone' => null,
        'tenant_id' => null,
        'url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'acc_info' => 'acc_info',
        'acc_name' => 'acc_name',
        'account_id' => 'account_id',
        'admin_user' => 'admin_user',
        'cashier_stores' => 'cashier_stores',
        'create_time' => 'create_time',
        'emp_id' => 'emp_id',
        'enable' => 'enable',
        'fid' => 'fid',
        'group_name' => 'group_name',
        'modify_time' => 'modify_time',
        'service_id' => 'service_id',
        'tel_phone' => 'tel_phone',
        'tenant_id' => 'tenant_id',
        'url' => 'url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'acc_info' => 'setAccInfo',
        'acc_name' => 'setAccName',
        'account_id' => 'setAccountId',
        'admin_user' => 'setAdminUser',
        'cashier_stores' => 'setCashierStores',
        'create_time' => 'setCreateTime',
        'emp_id' => 'setEmpId',
        'enable' => 'setEnable',
        'fid' => 'setFid',
        'group_name' => 'setGroupName',
        'modify_time' => 'setModifyTime',
        'service_id' => 'setServiceId',
        'tel_phone' => 'setTelPhone',
        'tenant_id' => 'setTenantId',
        'url' => 'setUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'acc_info' => 'getAccInfo',
        'acc_name' => 'getAccName',
        'account_id' => 'getAccountId',
        'admin_user' => 'getAdminUser',
        'cashier_stores' => 'getCashierStores',
        'create_time' => 'getCreateTime',
        'emp_id' => 'getEmpId',
        'enable' => 'getEnable',
        'fid' => 'getFid',
        'group_name' => 'getGroupName',
        'modify_time' => 'getModifyTime',
        'service_id' => 'getServiceId',
        'tel_phone' => 'getTelPhone',
        'tenant_id' => 'getTenantId',
        'url' => 'getUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['acc_info'] = isset($data['acc_info']) ? $data['acc_info'] : null;
        $this->container['acc_name'] = isset($data['acc_name']) ? $data['acc_name'] : null;
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['admin_user'] = isset($data['admin_user']) ? $data['admin_user'] : null;
        $this->container['cashier_stores'] = isset($data['cashier_stores']) ? $data['cashier_stores'] : null;
        $this->container['create_time'] = isset($data['create_time']) ? $data['create_time'] : null;
        $this->container['emp_id'] = isset($data['emp_id']) ? $data['emp_id'] : null;
        $this->container['enable'] = isset($data['enable']) ? $data['enable'] : null;
        $this->container['fid'] = isset($data['fid']) ? $data['fid'] : null;
        $this->container['group_name'] = isset($data['group_name']) ? $data['group_name'] : null;
        $this->container['modify_time'] = isset($data['modify_time']) ? $data['modify_time'] : null;
        $this->container['service_id'] = isset($data['service_id']) ? $data['service_id'] : null;
        $this->container['tel_phone'] = isset($data['tel_phone']) ? $data['tel_phone'] : null;
        $this->container['tenant_id'] = isset($data['tenant_id']) ? $data['tenant_id'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets acc_info
     *
     * @return \com_kingdee_service\data\entity\AccInfo
     */
    public function getAccInfo()
    {
        return $this->container['acc_info'];
    }

    /**
     * Sets acc_info
     *
     * @param \com_kingdee_service\data\entity\AccInfo $acc_info acc_info
     *
     * @return $this
     */
    public function setAccInfo($acc_info)
    {
        $this->container['acc_info'] = $acc_info;

        return $this;
    }

    /**
     * Gets acc_name
     *
     * @return string
     */
    public function getAccName()
    {
        return $this->container['acc_name'];
    }

    /**
     * Sets acc_name
     *
     * @param string $acc_name acc_name
     *
     * @return $this
     */
    public function setAccName($acc_name)
    {
        $this->container['acc_name'] = $acc_name;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets admin_user
     *
     * @return string
     */
    public function getAdminUser()
    {
        return $this->container['admin_user'];
    }

    /**
     * Sets admin_user
     *
     * @param string $admin_user admin_user
     *
     * @return $this
     */
    public function setAdminUser($admin_user)
    {
        $this->container['admin_user'] = $admin_user;

        return $this;
    }

    /**
     * Gets cashier_stores
     *
     * @return \com_kingdee_service\data\entity\CashierStore[]
     */
    public function getCashierStores()
    {
        return $this->container['cashier_stores'];
    }

    /**
     * Sets cashier_stores
     *
     * @param \com_kingdee_service\data\entity\CashierStore[] $cashier_stores cashier_stores
     *
     * @return $this
     */
    public function setCashierStores($cashier_stores)
    {
        $this->container['cashier_stores'] = $cashier_stores;

        return $this;
    }

    /**
     * Gets create_time
     *
     * @return string
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param string $create_time create_time
     *
     * @return $this
     */
    public function setCreateTime($create_time)
    {
        $this->container['create_time'] = $create_time;

        return $this;
    }

    /**
     * Gets emp_id
     *
     * @return string
     */
    public function getEmpId()
    {
        return $this->container['emp_id'];
    }

    /**
     * Sets emp_id
     *
     * @param string $emp_id emp_id
     *
     * @return $this
     */
    public function setEmpId($emp_id)
    {
        $this->container['emp_id'] = $emp_id;

        return $this;
    }

    /**
     * Gets enable
     *
     * @return int
     */
    public function getEnable()
    {
        return $this->container['enable'];
    }

    /**
     * Sets enable
     *
     * @param int $enable enable
     *
     * @return $this
     */
    public function setEnable($enable)
    {
        $this->container['enable'] = $enable;

        return $this;
    }

    /**
     * Gets fid
     *
     * @return string
     */
    public function getFid()
    {
        return $this->container['fid'];
    }

    /**
     * Sets fid
     *
     * @param string $fid fid
     *
     * @return $this
     */
    public function setFid($fid)
    {
        $this->container['fid'] = $fid;

        return $this;
    }

    /**
     * Gets group_name
     *
     * @return string
     */
    public function getGroupName()
    {
        return $this->container['group_name'];
    }

    /**
     * Sets group_name
     *
     * @param string $group_name group_name
     *
     * @return $this
     */
    public function setGroupName($group_name)
    {
        $this->container['group_name'] = $group_name;

        return $this;
    }

    /**
     * Gets modify_time
     *
     * @return string
     */
    public function getModifyTime()
    {
        return $this->container['modify_time'];
    }

    /**
     * Sets modify_time
     *
     * @param string $modify_time modify_time
     *
     * @return $this
     */
    public function setModifyTime($modify_time)
    {
        $this->container['modify_time'] = $modify_time;

        return $this;
    }

    /**
     * Gets service_id
     *
     * @return string
     */
    public function getServiceId()
    {
        return $this->container['service_id'];
    }

    /**
     * Sets service_id
     *
     * @param string $service_id service_id
     *
     * @return $this
     */
    public function setServiceId($service_id)
    {
        $this->container['service_id'] = $service_id;

        return $this;
    }

    /**
     * Gets tel_phone
     *
     * @return string
     */
    public function getTelPhone()
    {
        return $this->container['tel_phone'];
    }

    /**
     * Sets tel_phone
     *
     * @param string $tel_phone tel_phone
     *
     * @return $this
     */
    public function setTelPhone($tel_phone)
    {
        $this->container['tel_phone'] = $tel_phone;

        return $this;
    }

    /**
     * Gets tenant_id
     *
     * @return string
     */
    public function getTenantId()
    {
        return $this->container['tenant_id'];
    }

    /**
     * Sets tenant_id
     *
     * @param string $tenant_id tenant_id
     *
     * @return $this
     */
    public function setTenantId($tenant_id)
    {
        $this->container['tenant_id'] = $tenant_id;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


