<?php
/**
 * MallRechargeReq
 *
 * PHP version 5
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * æ˜Ÿè¾°
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com_kingdee_service\data\entity;

use \ArrayAccess;
use \com_kingdee_service\ObjectSerializer;

/**
 * MallRechargeReq Class Doc Comment
 *
 * @category Class
 * @package  com_kingdee_service
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MallRechargeReq implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MallRechargeReq';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'src_bill_id' => 'string',
        'bill_date' => 'string',
        'store_id' => 'string',
        'member_id' => 'string',
        'bal_amount' => 'string',
        'rule_id' => 'string',
        'rule_detail_id' => 'string',
        'settle_entries' => '\com_kingdee_service\data\entity\SettleEntries[]',
        'source' => 'int',
        'client_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'src_bill_id' => null,
        'bill_date' => null,
        'store_id' => null,
        'member_id' => null,
        'bal_amount' => null,
        'rule_id' => null,
        'rule_detail_id' => null,
        'settle_entries' => null,
        'source' => 'int32',
        'client_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'src_bill_id' => 'src_bill_id',
        'bill_date' => 'bill_date',
        'store_id' => 'store_id',
        'member_id' => 'member_id',
        'bal_amount' => 'bal_amount',
        'rule_id' => 'rule_id',
        'rule_detail_id' => 'rule_detail_id',
        'settle_entries' => 'settle_entries',
        'source' => 'source',
        'client_id' => 'client_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'src_bill_id' => 'setSrcBillId',
        'bill_date' => 'setBillDate',
        'store_id' => 'setStoreId',
        'member_id' => 'setMemberId',
        'bal_amount' => 'setBalAmount',
        'rule_id' => 'setRuleId',
        'rule_detail_id' => 'setRuleDetailId',
        'settle_entries' => 'setSettleEntries',
        'source' => 'setSource',
        'client_id' => 'setClientId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'src_bill_id' => 'getSrcBillId',
        'bill_date' => 'getBillDate',
        'store_id' => 'getStoreId',
        'member_id' => 'getMemberId',
        'bal_amount' => 'getBalAmount',
        'rule_id' => 'getRuleId',
        'rule_detail_id' => 'getRuleDetailId',
        'settle_entries' => 'getSettleEntries',
        'source' => 'getSource',
        'client_id' => 'getClientId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['src_bill_id'] = isset($data['src_bill_id']) ? $data['src_bill_id'] : null;
        $this->container['bill_date'] = isset($data['bill_date']) ? $data['bill_date'] : null;
        $this->container['store_id'] = isset($data['store_id']) ? $data['store_id'] : null;
        $this->container['member_id'] = isset($data['member_id']) ? $data['member_id'] : null;
        $this->container['bal_amount'] = isset($data['bal_amount']) ? $data['bal_amount'] : null;
        $this->container['rule_id'] = isset($data['rule_id']) ? $data['rule_id'] : null;
        $this->container['rule_detail_id'] = isset($data['rule_detail_id']) ? $data['rule_detail_id'] : null;
        $this->container['settle_entries'] = isset($data['settle_entries']) ? $data['settle_entries'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['client_id'] = isset($data['client_id']) ? $data['client_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets src_bill_id
     *
     * @return string
     */
    public function getSrcBillId()
    {
        return $this->container['src_bill_id'];
    }

    /**
     * Sets src_bill_id
     *
     * @param string $src_bill_id src_bill_id
     *
     * @return $this
     */
    public function setSrcBillId($src_bill_id)
    {
        $this->container['src_bill_id'] = $src_bill_id;

        return $this;
    }

    /**
     * Gets bill_date
     *
     * @return string
     */
    public function getBillDate()
    {
        return $this->container['bill_date'];
    }

    /**
     * Sets bill_date
     *
     * @param string $bill_date bill_date
     *
     * @return $this
     */
    public function setBillDate($bill_date)
    {
        $this->container['bill_date'] = $bill_date;

        return $this;
    }

    /**
     * Gets store_id
     *
     * @return string
     */
    public function getStoreId()
    {
        return $this->container['store_id'];
    }

    /**
     * Sets store_id
     *
     * @param string $store_id store_id
     *
     * @return $this
     */
    public function setStoreId($store_id)
    {
        $this->container['store_id'] = $store_id;

        return $this;
    }

    /**
     * Gets member_id
     *
     * @return string
     */
    public function getMemberId()
    {
        return $this->container['member_id'];
    }

    /**
     * Sets member_id
     *
     * @param string $member_id member_id
     *
     * @return $this
     */
    public function setMemberId($member_id)
    {
        $this->container['member_id'] = $member_id;

        return $this;
    }

    /**
     * Gets bal_amount
     *
     * @return string
     */
    public function getBalAmount()
    {
        return $this->container['bal_amount'];
    }

    /**
     * Sets bal_amount
     *
     * @param string $bal_amount bal_amount
     *
     * @return $this
     */
    public function setBalAmount($bal_amount)
    {
        $this->container['bal_amount'] = $bal_amount;

        return $this;
    }

    /**
     * Gets rule_id
     *
     * @return string
     */
    public function getRuleId()
    {
        return $this->container['rule_id'];
    }

    /**
     * Sets rule_id
     *
     * @param string $rule_id rule_id
     *
     * @return $this
     */
    public function setRuleId($rule_id)
    {
        $this->container['rule_id'] = $rule_id;

        return $this;
    }

    /**
     * Gets rule_detail_id
     *
     * @return string
     */
    public function getRuleDetailId()
    {
        return $this->container['rule_detail_id'];
    }

    /**
     * Sets rule_detail_id
     *
     * @param string $rule_detail_id rule_detail_id
     *
     * @return $this
     */
    public function setRuleDetailId($rule_detail_id)
    {
        $this->container['rule_detail_id'] = $rule_detail_id;

        return $this;
    }

    /**
     * Gets settle_entries
     *
     * @return \com_kingdee_service\data\entity\SettleEntries[]
     */
    public function getSettleEntries()
    {
        return $this->container['settle_entries'];
    }

    /**
     * Sets settle_entries
     *
     * @param \com_kingdee_service\data\entity\SettleEntries[] $settle_entries settle_entries
     *
     * @return $this
     */
    public function setSettleEntries($settle_entries)
    {
        $this->container['settle_entries'] = $settle_entries;

        return $this;
    }

    /**
     * Gets source
     *
     * @return int
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param int $source source
     *
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return string
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string $client_id client_id
     *
     * @return $this
     */
    public function setClientId($client_id)
    {
        $this->container['client_id'] = $client_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


